/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.node;

import compiler.analysis.*;

@SuppressWarnings("nls")
public final class AVariableLeftParam extends PLeftParam
{
    private TNew _new_;
    private TIdentifier _identifier_;
    private TEquals _equals_;
    private POpadd _opadd_;

    public AVariableLeftParam()
    {
        // Constructor
    }

    public AVariableLeftParam(
        @SuppressWarnings("hiding") TNew _new_,
        @SuppressWarnings("hiding") TIdentifier _identifier_,
        @SuppressWarnings("hiding") TEquals _equals_,
        @SuppressWarnings("hiding") POpadd _opadd_)
    {
        // Constructor
        setNew(_new_);

        setIdentifier(_identifier_);

        setEquals(_equals_);

        setOpadd(_opadd_);

    }

    @Override
    public Object clone()
    {
        return new AVariableLeftParam(
            cloneNode(this._new_),
            cloneNode(this._identifier_),
            cloneNode(this._equals_),
            cloneNode(this._opadd_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAVariableLeftParam(this);
    }

    public TNew getNew()
    {
        return this._new_;
    }

    public void setNew(TNew node)
    {
        if(this._new_ != null)
        {
            this._new_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._new_ = node;
    }

    public TIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    public TEquals getEquals()
    {
        return this._equals_;
    }

    public void setEquals(TEquals node)
    {
        if(this._equals_ != null)
        {
            this._equals_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._equals_ = node;
    }

    public POpadd getOpadd()
    {
        return this._opadd_;
    }

    public void setOpadd(POpadd node)
    {
        if(this._opadd_ != null)
        {
            this._opadd_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._opadd_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._new_)
            + toString(this._identifier_)
            + toString(this._equals_)
            + toString(this._opadd_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._new_ == child)
        {
            this._new_ = null;
            return;
        }

        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        if(this._equals_ == child)
        {
            this._equals_ = null;
            return;
        }

        if(this._opadd_ == child)
        {
            this._opadd_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._new_ == oldChild)
        {
            setNew((TNew) newChild);
            return;
        }

        if(this._identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(this._equals_ == oldChild)
        {
            setEquals((TEquals) newChild);
            return;
        }

        if(this._opadd_ == oldChild)
        {
            setOpadd((POpadd) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
