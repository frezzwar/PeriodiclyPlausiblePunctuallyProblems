Package grammar_specification;

/*******************************************************************
 * Helpers                                                         *
 *******************************************************************/
Helpers

digit 			= ['0' .. '9'];
nonzero_digit		= ['1' .. '9'];
lowercase		= ['a' .. 'z'];
uppercase		= ['A' .. 'Z'];
tab			= 9;
lf			= 10;
cr 			= 13;	

/*******************************************************************
 * Tokens                                                          *
 *******************************************************************/
Tokens

underscore 		= '_';
plus 			= '+';
minus 			= '-';
mult 			= '*';
div 			= '/';
equals 			= '=';
par_l 			= '(';
par_r 			= ')';
curly_l 		= '{';
curly_r 		= '}';
brack_l			= '['
brack_r			= ']'
quote			= '"';
comma			= ','
dot			= '.'
colon			= ':'
repeat			= 'repeat';
new			= 'new;
while			= 'while';
if			= 'if';
create			= 'create';
semi_c			= ';';
x			= 'x';
y			= 'y';
fig 			= 'fig';
size			= 'size';
percentage		= '%';
blank			= (' ' | tab | lf | cr)*;
foreach			= 'foreach';
in			= 'in';
startup			= 'startup';
click			= 'click';
keypress		= 'keypress';
testevent		= 'testevent';
touch			= 'touch';
edge			= 'edge';
add			= 'add';
dist			= 'dist';
random			= 'random'
set 			= 'set';
change			= 'change';
turnleft		= 'turnleft';
turnright		= 'turnright';
walk			= 'walk';
turnto			= 'turnto';
slide			= 'slide';
wait			= 'wait';
waituntil		= 'waituntil';
say			= 'say';
think			= 'think';
hide			= 'hide';
show			= 'show';
size			= 'size';
layer			= 'layer';
ask			= 'ask';
deg			= 'deg';
steps			= 'steps';
sec			= 'sec';

equal			= '=='            
and                	= '&&'
or                	= '||'
negate                	= '!='
greater_than          	= '<'
less_than         	= '>'
greater_equal        	= '<='
less_equal        	= '>=';

letter			= lowercase | uppercase;
string			= '"' (letter | digit)+ '"';
intliteral      	= 0 | non-zero-digit digit+;
floatliteral    	= digit* dot digit+;
boolean_literal 	= 'true' | 'false';

inputkey        	= letter 
                	| digit
                	| 'up'
                	| 'down'
                	| 'left'
                	| 'right'
                	| 'space';
                 
id              	= {id head}{id tail}*;

/*******************************************************************
 * Ignored Tokens                                                  *
 *******************************************************************/
Ignored Tokens
blank;

/*******************************************************************
 * Productions                                                     *
 *******************************************************************/

/*http://sablecc.sourceforge.net/grammars/j102.sablecc.html*/

prog            	= dcls events;

events     		= event events;

line          		= {stmt} stmt
                	| {dcl} dcl  
                	| {controlstructure} controlstructure
			| {action} action;
			
stmt            	= id  typeofassign  semi_c
                	| list dot add  par_l  val  par_r  semi_c ;	
				              
val             	= id
                	| intliteral 
                	| floatliteral
                	| boolean_literal
                	| rnd
                	| string;
				
lines 	        	= line lines
                	|;
				
printstmt       	= val plus printstmt
                	|  val
                	|;

dcls            	= dcl dcls
                	|;
				
dcl             	= new id equals val expr semi_c
                	| new  id  equals  list semi_c
                	| new  id  equals  create  par_l  stringliteral comma  x colon  val comma  y colon  val comma  size colon  val  percentage  par_r semi_c 
			/*stringliteral er navnet på filen hvori billedet til figuren er. */
                	| new id equals create par_l stringliteral comma x colon val comma y colon val par_r semi_c;

				  
list          		= brack_l  listvariables  brack_r;

listvariables   	= val comma  listvariables
                	| val
                	| ; 
				  
controlstructure	= repeat repeatstructure 
			| ifstructure;
				
ifstructure		= if  par_l  booleanexpr  par_r  curly_l  lines  curly_r
			| if  par_l  booleanexpr  par_r  curly_l  lines  curly_r  else  curly_l  lines  curly_r ;

repeatstructure 	=  repeatfor
                	|  repeatwhile
                	|  repeatforeach;
				
repeatfor       	=  par_l  id  par_r  curly_l  lines  curly_r
                	|  par_l  intliteral  par_r  curly_l  lines  curly_r;

repeatwhile  		= while  par_l  booleanexpr  par_r  curly_l  lines  curly_r;

repeatforeach   	= foreach par_l  id  in  list  par_r  curly_l  lines  curly_r;
				
event           	= startup  par_l  fig  colon  id  par_r  curly_l  lines  curly_r
                	| keypress  par_l  fig  colon  id  comma  key  colon  inputkey  par_r  curly_l  lines  curly_r 
                	| click  par_l  fig  colon  id  par_r  curly_l  lines  curly_r 
                	| testevent  curly_l  lines  curly_r;
				
condition       	= touch  par_l  fig  colon  id  par_r
                	| touch  par_l  edge  par_r;

typeofassign    	= incrassign
                	| normassign;
				
incrassign      	= operator equals  val  expr; 

normassign      	= equals  val  expr;
				
expr            	= operator  val  expr 
                	| dist  par_l  fig colon  val  par_r  expr
                	| ;
			
booleanexpr     	= val  booloperators  val
                	| condition
                	| val  booloperators  val  booloperators  booleanexpr ;
				
operator        	= plus
                	| minus
                	| mult
                	| div;

booloperators   	= 'equal'            
                	| 'and'
                	| 'or'
                	| 'negate'
                	| 'greater_than'
                	| 'less_than'
                	| 'greater_equal'
                	| 'less_equal';

rnd             	= random  par_l  val  to  val  par_r ; !det her må kun være tal. 

action          	= set  par_l  x colon  val  par_r  semi_c
                	| set  par_l  y colon  val  par_r  semi_c
                	| set  par_l  x colon  val  comma  y colon  val  par_r  semi_c
                	| change  par_l  x colon  val  par_r  semi_c
                	| change  par_l  y colon  val  par_r  semi_c
			| change  par_l  x colon  val  comma  y colon  val  par_r  semi_c
                	| turnleft  par_l  deg colon  val  par_r  semi_c
                	| turnright  par_l  deg colon  val  par_r  semi_c
                	| walk  par_l  steps colon  val  par_r  semi_c
                	| turnto  par_l  fig colon  id  par_r  semi_c
                	| turnto  par_l  deg colon  val  par_r  semi_c
                	| slide  par_l  sec colon  val  comma  x colon  val  comma  y colon  val  par_r  semi_c
                	| wait  par_l  sec colon  val  par_r  semi_c
                	| waituntil  par_l  booleanexpr  par_r  semi_c
                	| say  par_l  printstmt  par_r  semi_c
                	| think  par_l  printstmt  par_r  semi_c
                	| say  par_l  printstmt  comma  sec colon val  par_r  semi_c
                	| think par_l printstmt comma sec colon val par_r semi_c
                	| hide  semi_c
                	| show  semi_c
                	| size  par_l  val  percentage  par_r  semi_c
                	| layer  par_l  val  par_r  semi_c
                	| ask  par_l  printstmt  par_r  semi_c;
