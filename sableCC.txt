Package Grammar_Specification;

Helpers

Digit 			= ['0' .. '9'];
non-zero-digit	= ['1' .. '9'];
lowercase		= ['a' .. 'z'];
uppercase		= ['A' .. 'Z'];
tab				= 9;
lf				= 10;
cr 				= 13;	

underscore 		= '_';
plus 			= '+';
minus 			= '-';
mult 			= '*';
div 			= '/';
equals 			= '=';
par_l 			= '(';
par_r 			= ')';
curly_l 		= '{';
curly_r 		= '}';
brack_l			= '['
brack_r			= ']'
quote			= '"';
comma			= ','
dot				= '.'
colon			= ':'
repeat			= 'repeat';
new				= 'new;
while			= 'while';
if				= 'if';
create			= 'create';
semi_c			= ';';
x				= 'x';
y				= 'y';
fig 			= 'fig';
size			= 'size';
percentage		= '%';
blank			= (' ' | tab | lf | cr)*;
foreach			= 'foreach';
in				= 'in';
startup			= 'startup';
click			= 'click';
keyPress		= 'keyPress';
testevent		= 'testevent';
touch			= 'touch';
edge			= 'edge';
add				= 'add';
dist			= 'dist';
random			= 'random'
set 			= 'set';
change			= 'change';
turnLeft		= 'turnLeft';
turnRight		= 'turnRight';
walk			= 'walk';
turnto			= 'turnto';
slide			= 'slide';
wait			= 'wait';
waitUntil		= 'waitUntil';
say				= 'say';
think			= 'think';
hide			= 'hide';
show			= 'show';
size			= 'size';
layer			= 'layer';
ask				= 'ask';
deg				= 'deg';
steps			= 'steps';
sec				= 'sec';

Letter			= lowercase | uppercase;
String			= '"' (Letter | Digit)+ '"';
INTLITERAL      = 0 | non-zero-digit Digit+;
FLOATLITERAL    = Digit* dot Digit+;
boolean_literal = 'true' | 'false';

InputKey        = Letter 
                | Digit
                | 'up'
                | 'down'
                | 'left'
                | 'right'
                | 'space';
                 
Id              = {Id Head}{Id Tail}*;

Prog            = Dcls Events;

Events     		= Event Events;

Line          	= Stmt
                | Dcl  
                | ControlStructure
				| Action;
				
				              
Val             = Id
                  | INTLITERAL 
                  | FLOATLITERAL
                  | boolean_literal
                  | rnd
                  | String;
				
Lines 	        = Line Lines
                |;
				
PrintStmt       = Val plus PrintStmt
                  |  Val
                  |;

Dcls            = Dcl Dcls
                |;
				
Dcl             = new Id equals Val Expr semi_c
                  | new blank Id blank equals blank List semi_c
                  | new blank Id blank equals blank create blank par_l blank STRINGLITERAL comma blank x colon blank Val comma blank y colon blank Val comma blank size colon blank Val blank percentage blank par_r semi_c !STRINGLITERAL er navnet på filen hvori billedet til figuren er.
                  | new Id equals create par_l STRINGLITERAL comma x colon Val comma y colon Val par_r semi_c;

				  
List          	= brack_l blank Listvariables blank brack_r;

Listvariables   = Val comma blank Listvariables
                | Val
                | ; 
				  
ControlStructure= repeat RepeatStructure 
				| IfStructure;
				
IfStructure		= if blank par_l blank BooleanExpr blank par_r blank curly_l blank Lines blank curly_r
				| if blank par_l blank BooleanExpr blank par_r blank curly_l blank Lines blank curly_r blank else blank curly_l blank Lines blank curly_r ;

RepeatStructure =  RepeatFor
                |  RepeatWhile
                |  RepeatForEach;
				
RepeatFor       =  par_l blank Id blank par_r blank curly_l blank Lines blank curly_r
                |  par_l blank INTLITERAL blank par_r blank curly_l blank Lines blank curly_r;

RepeatWhile  	= while blank par_l blank BooleanExpr blank par_r blank curly_l blank Lines blank curly_r;

RepeatForEach   = foreach par_l blank Id blank in blank List blank par_r blank curly_l blank Lines blank curly_r;
				
Event           = startup blank par_l blank fig blank colon blank Id blank par_r blank curly_l blank Lines blank curly_r
                | keyPress blank par_l blank fig blank colon blank Id blank comma blank key blank colon blank InputKey blank par_r blank curly_l blank Lines blank curly_r 
                | click blank par_l blank fig blank colon blank Id blank par_r blank curly_l blank Lines blank curly_r 
                | testevent blank curly_l blank Lines blank curly_r;
				
Condition       = touch blank par_l blank fig blank colon blank Id blank par_r
                | touch blank par_l blank edge blank par_r;

typeofAssign    = IncrAssign
                | NormAssign;
				
IncrAssign      = Operator equals blank Val blank Expr; 

NormAssign      = equals blank Val blank Expr;
				
Stmt            = Id blank typeofAssign blank semi_c
                | List dot add blank par_l blank Val blank par_r blank semi_c ;
				
Expr            = Operator blank Val blank Expr 
                | dist blank par_l blank fig colon blank Val blank par_r blank Expr
                | ;
			
BooleanExpr     = Val blank BoolOperators blank Val
                | Condition
                | Val blank BoolOperators blank Val blank BoolOperators blank BooleanExpr ;
				
Operator        = plus
                | minus
                | mult
                | div;

BoolOperators   = '=='            
                | '&&'
                | '||'
                | '!='
                | '<'
                | '>'
                | '<='
                | '>=';
				
rnd             = random blank par_l blank Val blank to blank Val blank par_r ; !Det her må kun være tal. 

Action          = set blank par_l blank x colon blank Val blank par_r blank semi_c
                | set blank par_l blank y colon blank Val blank par_r blank semi_c
                | set blank par_l blank x colon blank Val blank comma blank y colon blank Val blank par_r blank semi_c
                | change blank par_l blank x colon blank Val blank par_r blank semi_c
                | change blank par_l blank y colon blank Val blank par_r blank semi_c
				| change blank par_l blank x colon blank Val blank comma blank y colon blank Val blank par_r blank semi_c
                | turnLeft blank par_l blank deg colon blank Val blank par_r blank semi_c
                | turnRight blank par_l blank deg colon blank Val blank par_r blank semi_c
                | walk blank par_l blank steps colon blank Val blank par_r blank semi_c
                | turnto blank par_l blank fig colon blank Id blank par_r blank semi_c
                | turnto blank par_l blank deg colon blank Val blank par_r blank semi_c
                | slide blank par_l blank sec colon blank Val blank comma blank x colon blank Val blank comma blank y colon blank Val blank par_r blank semi_c
                | wait blank par_l blank sec colon blank Val blank par_r blank semi_c
                | waitUntil blank par_l blank BooleanExpr blank par_r blank semi_c
                | say blank par_l blank PrintStmt blank par_r blank semi_c
                | think blank par_l blank PrintStmt blank par_r blank semi_c
                | say blank par_l blank PrintStmt blank comma blank sec colon Val blank par_r blank semi_c
                | think par_l PrintStmt comma sec colon Val par_r semi_c
                | hide blank semi_c
                | show blank semi_c
                | size blank par_l blank Val blank percentage blank par_r blank semi_c
                | layer blank par_l blank Val blank par_r blank semi_c
                | ask blank par_l blank PrintStmt blank par_r blank semi_c;
