/* This file was generated by SableCC (http://www.sablecc.org/). */

package simpleAdder.node;

import simpleAdder.analysis.*;

@SuppressWarnings("nls")
public final class AOption2Actionsay extends PActionsay
{
    private TSay _say_;
    private TParL _parL_;
    private PPrintstmt _printstmt_;
    private TComma _comma_;
    private TSec _sec_;
    private TColon _colon_;
    private PValue _value_;
    private TParR _parR_;
    private TSemiC _semiC_;

    public AOption2Actionsay()
    {
        // Constructor
    }

    public AOption2Actionsay(
        @SuppressWarnings("hiding") TSay _say_,
        @SuppressWarnings("hiding") TParL _parL_,
        @SuppressWarnings("hiding") PPrintstmt _printstmt_,
        @SuppressWarnings("hiding") TComma _comma_,
        @SuppressWarnings("hiding") TSec _sec_,
        @SuppressWarnings("hiding") TColon _colon_,
        @SuppressWarnings("hiding") PValue _value_,
        @SuppressWarnings("hiding") TParR _parR_,
        @SuppressWarnings("hiding") TSemiC _semiC_)
    {
        // Constructor
        setSay(_say_);

        setParL(_parL_);

        setPrintstmt(_printstmt_);

        setComma(_comma_);

        setSec(_sec_);

        setColon(_colon_);

        setValue(_value_);

        setParR(_parR_);

        setSemiC(_semiC_);

    }

    @Override
    public Object clone()
    {
        return new AOption2Actionsay(
            cloneNode(this._say_),
            cloneNode(this._parL_),
            cloneNode(this._printstmt_),
            cloneNode(this._comma_),
            cloneNode(this._sec_),
            cloneNode(this._colon_),
            cloneNode(this._value_),
            cloneNode(this._parR_),
            cloneNode(this._semiC_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAOption2Actionsay(this);
    }

    public TSay getSay()
    {
        return this._say_;
    }

    public void setSay(TSay node)
    {
        if(this._say_ != null)
        {
            this._say_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._say_ = node;
    }

    public TParL getParL()
    {
        return this._parL_;
    }

    public void setParL(TParL node)
    {
        if(this._parL_ != null)
        {
            this._parL_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parL_ = node;
    }

    public PPrintstmt getPrintstmt()
    {
        return this._printstmt_;
    }

    public void setPrintstmt(PPrintstmt node)
    {
        if(this._printstmt_ != null)
        {
            this._printstmt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._printstmt_ = node;
    }

    public TComma getComma()
    {
        return this._comma_;
    }

    public void setComma(TComma node)
    {
        if(this._comma_ != null)
        {
            this._comma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comma_ = node;
    }

    public TSec getSec()
    {
        return this._sec_;
    }

    public void setSec(TSec node)
    {
        if(this._sec_ != null)
        {
            this._sec_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._sec_ = node;
    }

    public TColon getColon()
    {
        return this._colon_;
    }

    public void setColon(TColon node)
    {
        if(this._colon_ != null)
        {
            this._colon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._colon_ = node;
    }

    public PValue getValue()
    {
        return this._value_;
    }

    public void setValue(PValue node)
    {
        if(this._value_ != null)
        {
            this._value_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._value_ = node;
    }

    public TParR getParR()
    {
        return this._parR_;
    }

    public void setParR(TParR node)
    {
        if(this._parR_ != null)
        {
            this._parR_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parR_ = node;
    }

    public TSemiC getSemiC()
    {
        return this._semiC_;
    }

    public void setSemiC(TSemiC node)
    {
        if(this._semiC_ != null)
        {
            this._semiC_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._semiC_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._say_)
            + toString(this._parL_)
            + toString(this._printstmt_)
            + toString(this._comma_)
            + toString(this._sec_)
            + toString(this._colon_)
            + toString(this._value_)
            + toString(this._parR_)
            + toString(this._semiC_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._say_ == child)
        {
            this._say_ = null;
            return;
        }

        if(this._parL_ == child)
        {
            this._parL_ = null;
            return;
        }

        if(this._printstmt_ == child)
        {
            this._printstmt_ = null;
            return;
        }

        if(this._comma_ == child)
        {
            this._comma_ = null;
            return;
        }

        if(this._sec_ == child)
        {
            this._sec_ = null;
            return;
        }

        if(this._colon_ == child)
        {
            this._colon_ = null;
            return;
        }

        if(this._value_ == child)
        {
            this._value_ = null;
            return;
        }

        if(this._parR_ == child)
        {
            this._parR_ = null;
            return;
        }

        if(this._semiC_ == child)
        {
            this._semiC_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._say_ == oldChild)
        {
            setSay((TSay) newChild);
            return;
        }

        if(this._parL_ == oldChild)
        {
            setParL((TParL) newChild);
            return;
        }

        if(this._printstmt_ == oldChild)
        {
            setPrintstmt((PPrintstmt) newChild);
            return;
        }

        if(this._comma_ == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        if(this._sec_ == oldChild)
        {
            setSec((TSec) newChild);
            return;
        }

        if(this._colon_ == oldChild)
        {
            setColon((TColon) newChild);
            return;
        }

        if(this._value_ == oldChild)
        {
            setValue((PValue) newChild);
            return;
        }

        if(this._parR_ == oldChild)
        {
            setParR((TParR) newChild);
            return;
        }

        if(this._semiC_ == oldChild)
        {
            setSemiC((TSemiC) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
