/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.node;

import compiler.analysis.*;

@SuppressWarnings("nls")
public final class AMethodCallMember extends PMember
{
    private TDot _dot_;
    private TIdentifier _identifier_;
    private TParL _parL_;
    private PCallParams _callParams_;
    private TParR _parR_;

    public AMethodCallMember()
    {
        // Constructor
    }

    public AMethodCallMember(
        @SuppressWarnings("hiding") TDot _dot_,
        @SuppressWarnings("hiding") TIdentifier _identifier_,
        @SuppressWarnings("hiding") TParL _parL_,
        @SuppressWarnings("hiding") PCallParams _callParams_,
        @SuppressWarnings("hiding") TParR _parR_)
    {
        // Constructor
        setDot(_dot_);

        setIdentifier(_identifier_);

        setParL(_parL_);

        setCallParams(_callParams_);

        setParR(_parR_);

    }

    @Override
    public Object clone()
    {
        return new AMethodCallMember(
            cloneNode(this._dot_),
            cloneNode(this._identifier_),
            cloneNode(this._parL_),
            cloneNode(this._callParams_),
            cloneNode(this._parR_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMethodCallMember(this);
    }

    public TDot getDot()
    {
        return this._dot_;
    }

    public void setDot(TDot node)
    {
        if(this._dot_ != null)
        {
            this._dot_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dot_ = node;
    }

    public TIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    public TParL getParL()
    {
        return this._parL_;
    }

    public void setParL(TParL node)
    {
        if(this._parL_ != null)
        {
            this._parL_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parL_ = node;
    }

    public PCallParams getCallParams()
    {
        return this._callParams_;
    }

    public void setCallParams(PCallParams node)
    {
        if(this._callParams_ != null)
        {
            this._callParams_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._callParams_ = node;
    }

    public TParR getParR()
    {
        return this._parR_;
    }

    public void setParR(TParR node)
    {
        if(this._parR_ != null)
        {
            this._parR_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parR_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._dot_)
            + toString(this._identifier_)
            + toString(this._parL_)
            + toString(this._callParams_)
            + toString(this._parR_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._dot_ == child)
        {
            this._dot_ = null;
            return;
        }

        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        if(this._parL_ == child)
        {
            this._parL_ = null;
            return;
        }

        if(this._callParams_ == child)
        {
            this._callParams_ = null;
            return;
        }

        if(this._parR_ == child)
        {
            this._parR_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._dot_ == oldChild)
        {
            setDot((TDot) newChild);
            return;
        }

        if(this._identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(this._parL_ == oldChild)
        {
            setParL((TParL) newChild);
            return;
        }

        if(this._callParams_ == oldChild)
        {
            setCallParams((PCallParams) newChild);
            return;
        }

        if(this._parR_ == oldChild)
        {
            setParR((TParR) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
