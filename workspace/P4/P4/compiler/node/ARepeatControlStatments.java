/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.node;

import compiler.analysis.*;

@SuppressWarnings("nls")
public final class ARepeatControlStatments extends PControlStatments
{
    private TRepeat _repeat_;
    private POpadd _opadd_;
    private TParR _parR_;
    private PBody _body_;

    public ARepeatControlStatments()
    {
        // Constructor
    }

    public ARepeatControlStatments(
        @SuppressWarnings("hiding") TRepeat _repeat_,
        @SuppressWarnings("hiding") POpadd _opadd_,
        @SuppressWarnings("hiding") TParR _parR_,
        @SuppressWarnings("hiding") PBody _body_)
    {
        // Constructor
        setRepeat(_repeat_);

        setOpadd(_opadd_);

        setParR(_parR_);

        setBody(_body_);

    }

    @Override
    public Object clone()
    {
        return new ARepeatControlStatments(
            cloneNode(this._repeat_),
            cloneNode(this._opadd_),
            cloneNode(this._parR_),
            cloneNode(this._body_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseARepeatControlStatments(this);
    }

    public TRepeat getRepeat()
    {
        return this._repeat_;
    }

    public void setRepeat(TRepeat node)
    {
        if(this._repeat_ != null)
        {
            this._repeat_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._repeat_ = node;
    }

    public POpadd getOpadd()
    {
        return this._opadd_;
    }

    public void setOpadd(POpadd node)
    {
        if(this._opadd_ != null)
        {
            this._opadd_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._opadd_ = node;
    }

    public TParR getParR()
    {
        return this._parR_;
    }

    public void setParR(TParR node)
    {
        if(this._parR_ != null)
        {
            this._parR_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parR_ = node;
    }

    public PBody getBody()
    {
        return this._body_;
    }

    public void setBody(PBody node)
    {
        if(this._body_ != null)
        {
            this._body_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._body_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._repeat_)
            + toString(this._opadd_)
            + toString(this._parR_)
            + toString(this._body_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._repeat_ == child)
        {
            this._repeat_ = null;
            return;
        }

        if(this._opadd_ == child)
        {
            this._opadd_ = null;
            return;
        }

        if(this._parR_ == child)
        {
            this._parR_ = null;
            return;
        }

        if(this._body_ == child)
        {
            this._body_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._repeat_ == oldChild)
        {
            setRepeat((TRepeat) newChild);
            return;
        }

        if(this._opadd_ == oldChild)
        {
            setOpadd((POpadd) newChild);
            return;
        }

        if(this._parR_ == oldChild)
        {
            setParR((TParR) newChild);
            return;
        }

        if(this._body_ == oldChild)
        {
            setBody((PBody) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
