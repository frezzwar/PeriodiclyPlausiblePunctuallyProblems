/* This file was generated by SableCC (http://www.sablecc.org/). */

package simpleAdder.analysis;

import java.util.*;
import simpleAdder.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPDecls().apply(this);
        outStart(node);
    }

    public void inADeclsDecls(ADeclsDecls node)
    {
        defaultIn(node);
    }

    public void outADeclsDecls(ADeclsDecls node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclsDecls(ADeclsDecls node)
    {
        inADeclsDecls(node);
        if(node.getDecls() != null)
        {
            node.getDecls().apply(this);
        }
        if(node.getDecl() != null)
        {
            node.getDecl().apply(this);
        }
        outADeclsDecls(node);
    }

    public void inADecls(ADecls node)
    {
        defaultIn(node);
    }

    public void outADecls(ADecls node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecls(ADecls node)
    {
        inADecls(node);
        outADecls(node);
    }

    public void inAVardeclDecl(AVardeclDecl node)
    {
        defaultIn(node);
    }

    public void outAVardeclDecl(AVardeclDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVardeclDecl(AVardeclDecl node)
    {
        inAVardeclDecl(node);
        if(node.getVardecl() != null)
        {
            node.getVardecl().apply(this);
        }
        outAVardeclDecl(node);
    }

    public void inAEventDecl(AEventDecl node)
    {
        defaultIn(node);
    }

    public void outAEventDecl(AEventDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEventDecl(AEventDecl node)
    {
        inAEventDecl(node);
        if(node.getEvent() != null)
        {
            node.getEvent().apply(this);
        }
        outAEventDecl(node);
    }

    public void inAStmtDecl(AStmtDecl node)
    {
        defaultIn(node);
    }

    public void outAStmtDecl(AStmtDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStmtDecl(AStmtDecl node)
    {
        inAStmtDecl(node);
        if(node.getStmt() != null)
        {
            node.getStmt().apply(this);
        }
        outAStmtDecl(node);
    }

    public void inAControlstructureDecl(AControlstructureDecl node)
    {
        defaultIn(node);
    }

    public void outAControlstructureDecl(AControlstructureDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAControlstructureDecl(AControlstructureDecl node)
    {
        inAControlstructureDecl(node);
        if(node.getControlstructure() != null)
        {
            node.getControlstructure().apply(this);
        }
        outAControlstructureDecl(node);
    }

    public void inAActionDecl(AActionDecl node)
    {
        defaultIn(node);
    }

    public void outAActionDecl(AActionDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAActionDecl(AActionDecl node)
    {
        inAActionDecl(node);
        if(node.getAction() != null)
        {
            node.getAction().apply(this);
        }
        outAActionDecl(node);
    }

    public void inARepeatstructureControlstructure(ARepeatstructureControlstructure node)
    {
        defaultIn(node);
    }

    public void outARepeatstructureControlstructure(ARepeatstructureControlstructure node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARepeatstructureControlstructure(ARepeatstructureControlstructure node)
    {
        inARepeatstructureControlstructure(node);
        if(node.getRepeatstructure() != null)
        {
            node.getRepeatstructure().apply(this);
        }
        if(node.getRepeat() != null)
        {
            node.getRepeat().apply(this);
        }
        outARepeatstructureControlstructure(node);
    }

    public void inAIfstructureControlstructure(AIfstructureControlstructure node)
    {
        defaultIn(node);
    }

    public void outAIfstructureControlstructure(AIfstructureControlstructure node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfstructureControlstructure(AIfstructureControlstructure node)
    {
        inAIfstructureControlstructure(node);
        if(node.getElsestructure() != null)
        {
            node.getElsestructure().apply(this);
        }
        if(node.getCurlyR() != null)
        {
            node.getCurlyR().apply(this);
        }
        if(node.getDecls() != null)
        {
            node.getDecls().apply(this);
        }
        if(node.getCurlyL() != null)
        {
            node.getCurlyL().apply(this);
        }
        if(node.getParR() != null)
        {
            node.getParR().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getParL() != null)
        {
            node.getParL().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outAIfstructureControlstructure(node);
    }

    public void inASwitchstructureControlstructure(ASwitchstructureControlstructure node)
    {
        defaultIn(node);
    }

    public void outASwitchstructureControlstructure(ASwitchstructureControlstructure node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASwitchstructureControlstructure(ASwitchstructureControlstructure node)
    {
        inASwitchstructureControlstructure(node);
        if(node.getCurlyR() != null)
        {
            node.getCurlyR().apply(this);
        }
        if(node.getSwitchcase() != null)
        {
            node.getSwitchcase().apply(this);
        }
        if(node.getCurlyL() != null)
        {
            node.getCurlyL().apply(this);
        }
        if(node.getParR() != null)
        {
            node.getParR().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getParL() != null)
        {
            node.getParL().apply(this);
        }
        if(node.getSwitch() != null)
        {
            node.getSwitch().apply(this);
        }
        outASwitchstructureControlstructure(node);
    }

    public void inASwitchcase(ASwitchcase node)
    {
        defaultIn(node);
    }

    public void outASwitchcase(ASwitchcase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASwitchcase(ASwitchcase node)
    {
        inASwitchcase(node);
        if(node.getSwitchcase() != null)
        {
            node.getSwitchcase().apply(this);
        }
        if(node.getCurlyR() != null)
        {
            node.getCurlyR().apply(this);
        }
        if(node.getDecls() != null)
        {
            node.getDecls().apply(this);
        }
        if(node.getCurlyL() != null)
        {
            node.getCurlyL().apply(this);
        }
        if(node.getParR() != null)
        {
            node.getParR().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getTo() != null)
        {
            node.getTo().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getParL() != null)
        {
            node.getParL().apply(this);
        }
        if(node.getCase() != null)
        {
            node.getCase().apply(this);
        }
        outASwitchcase(node);
    }

    public void inAElsestructureElsestructure(AElsestructureElsestructure node)
    {
        defaultIn(node);
    }

    public void outAElsestructureElsestructure(AElsestructureElsestructure node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElsestructureElsestructure(AElsestructureElsestructure node)
    {
        inAElsestructureElsestructure(node);
        if(node.getCurlyR() != null)
        {
            node.getCurlyR().apply(this);
        }
        if(node.getDecls() != null)
        {
            node.getDecls().apply(this);
        }
        if(node.getCurlyL() != null)
        {
            node.getCurlyL().apply(this);
        }
        if(node.getParR() != null)
        {
            node.getParR().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getParL() != null)
        {
            node.getParL().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        outAElsestructureElsestructure(node);
    }

    public void inARepeatwhileRepeatstructure(ARepeatwhileRepeatstructure node)
    {
        defaultIn(node);
    }

    public void outARepeatwhileRepeatstructure(ARepeatwhileRepeatstructure node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARepeatwhileRepeatstructure(ARepeatwhileRepeatstructure node)
    {
        inARepeatwhileRepeatstructure(node);
        if(node.getCurlyR() != null)
        {
            node.getCurlyR().apply(this);
        }
        if(node.getDecls() != null)
        {
            node.getDecls().apply(this);
        }
        if(node.getCurlyL() != null)
        {
            node.getCurlyL().apply(this);
        }
        if(node.getParR() != null)
        {
            node.getParR().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getParL() != null)
        {
            node.getParL().apply(this);
        }
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        outARepeatwhileRepeatstructure(node);
    }

    public void inAIdRepeatstructure(AIdRepeatstructure node)
    {
        defaultIn(node);
    }

    public void outAIdRepeatstructure(AIdRepeatstructure node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdRepeatstructure(AIdRepeatstructure node)
    {
        inAIdRepeatstructure(node);
        if(node.getCurlyR() != null)
        {
            node.getCurlyR().apply(this);
        }
        if(node.getDecls() != null)
        {
            node.getDecls().apply(this);
        }
        if(node.getCurlyL() != null)
        {
            node.getCurlyL().apply(this);
        }
        if(node.getParR() != null)
        {
            node.getParR().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getParL() != null)
        {
            node.getParL().apply(this);
        }
        outAIdRepeatstructure(node);
    }

    public void inARepeatstructure(ARepeatstructure node)
    {
        defaultIn(node);
    }

    public void outARepeatstructure(ARepeatstructure node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARepeatstructure(ARepeatstructure node)
    {
        inARepeatstructure(node);
        if(node.getCurlyR() != null)
        {
            node.getCurlyR().apply(this);
        }
        if(node.getDecls() != null)
        {
            node.getDecls().apply(this);
        }
        if(node.getCurlyL() != null)
        {
            node.getCurlyL().apply(this);
        }
        if(node.getParR() != null)
        {
            node.getParR().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getIn() != null)
        {
            node.getIn().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getParL() != null)
        {
            node.getParL().apply(this);
        }
        if(node.getForeach() != null)
        {
            node.getForeach().apply(this);
        }
        outARepeatstructure(node);
    }

    public void inAStartupEvent(AStartupEvent node)
    {
        defaultIn(node);
    }

    public void outAStartupEvent(AStartupEvent node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStartupEvent(AStartupEvent node)
    {
        inAStartupEvent(node);
        if(node.getCurlyR() != null)
        {
            node.getCurlyR().apply(this);
        }
        if(node.getDecls() != null)
        {
            node.getDecls().apply(this);
        }
        if(node.getCurlyL() != null)
        {
            node.getCurlyL().apply(this);
        }
        if(node.getParR() != null)
        {
            node.getParR().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getFig() != null)
        {
            node.getFig().apply(this);
        }
        if(node.getParL() != null)
        {
            node.getParL().apply(this);
        }
        if(node.getStartup() != null)
        {
            node.getStartup().apply(this);
        }
        outAStartupEvent(node);
    }

    public void inASingleVarDeclsVardecl(ASingleVarDeclsVardecl node)
    {
        defaultIn(node);
    }

    public void outASingleVarDeclsVardecl(ASingleVarDeclsVardecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleVarDeclsVardecl(ASingleVarDeclsVardecl node)
    {
        inASingleVarDeclsVardecl(node);
        if(node.getSemiC() != null)
        {
            node.getSemiC().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getEquals() != null)
        {
            node.getEquals().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getNew() != null)
        {
            node.getNew().apply(this);
        }
        outASingleVarDeclsVardecl(node);
    }

    public void inAListVardecl(AListVardecl node)
    {
        defaultIn(node);
    }

    public void outAListVardecl(AListVardecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListVardecl(AListVardecl node)
    {
        inAListVardecl(node);
        if(node.getSemiC() != null)
        {
            node.getSemiC().apply(this);
        }
        if(node.getBrackR() != null)
        {
            node.getBrackR().apply(this);
        }
        if(node.getListvariables() != null)
        {
            node.getListvariables().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getBrackL() != null)
        {
            node.getBrackL().apply(this);
        }
        if(node.getEquals() != null)
        {
            node.getEquals().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getNew() != null)
        {
            node.getNew().apply(this);
        }
        outAListVardecl(node);
    }

    public void inASayAction(ASayAction node)
    {
        defaultIn(node);
    }

    public void outASayAction(ASayAction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASayAction(ASayAction node)
    {
        inASayAction(node);
        if(node.getActionsay() != null)
        {
            node.getActionsay().apply(this);
        }
        outASayAction(node);
    }

    public void inAThinkAction(AThinkAction node)
    {
        defaultIn(node);
    }

    public void outAThinkAction(AThinkAction node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAThinkAction(AThinkAction node)
    {
        inAThinkAction(node);
        if(node.getActionthink() != null)
        {
            node.getActionthink().apply(this);
        }
        outAThinkAction(node);
    }

    public void inAOption1Actionsay(AOption1Actionsay node)
    {
        defaultIn(node);
    }

    public void outAOption1Actionsay(AOption1Actionsay node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOption1Actionsay(AOption1Actionsay node)
    {
        inAOption1Actionsay(node);
        if(node.getSemiC() != null)
        {
            node.getSemiC().apply(this);
        }
        if(node.getParR() != null)
        {
            node.getParR().apply(this);
        }
        if(node.getPrintstmt() != null)
        {
            node.getPrintstmt().apply(this);
        }
        if(node.getParL() != null)
        {
            node.getParL().apply(this);
        }
        if(node.getSay() != null)
        {
            node.getSay().apply(this);
        }
        outAOption1Actionsay(node);
    }

    public void inAOption2Actionsay(AOption2Actionsay node)
    {
        defaultIn(node);
    }

    public void outAOption2Actionsay(AOption2Actionsay node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOption2Actionsay(AOption2Actionsay node)
    {
        inAOption2Actionsay(node);
        if(node.getSemiC() != null)
        {
            node.getSemiC().apply(this);
        }
        if(node.getParR() != null)
        {
            node.getParR().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getSec() != null)
        {
            node.getSec().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getPrintstmt() != null)
        {
            node.getPrintstmt().apply(this);
        }
        if(node.getParL() != null)
        {
            node.getParL().apply(this);
        }
        if(node.getSay() != null)
        {
            node.getSay().apply(this);
        }
        outAOption2Actionsay(node);
    }

    public void inAOption1Actionthink(AOption1Actionthink node)
    {
        defaultIn(node);
    }

    public void outAOption1Actionthink(AOption1Actionthink node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOption1Actionthink(AOption1Actionthink node)
    {
        inAOption1Actionthink(node);
        if(node.getSemiC() != null)
        {
            node.getSemiC().apply(this);
        }
        if(node.getParR() != null)
        {
            node.getParR().apply(this);
        }
        if(node.getPrintstmt() != null)
        {
            node.getPrintstmt().apply(this);
        }
        if(node.getParL() != null)
        {
            node.getParL().apply(this);
        }
        if(node.getThink() != null)
        {
            node.getThink().apply(this);
        }
        outAOption1Actionthink(node);
    }

    public void inAOption2Actionthink(AOption2Actionthink node)
    {
        defaultIn(node);
    }

    public void outAOption2Actionthink(AOption2Actionthink node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOption2Actionthink(AOption2Actionthink node)
    {
        inAOption2Actionthink(node);
        if(node.getSemiC() != null)
        {
            node.getSemiC().apply(this);
        }
        if(node.getParR() != null)
        {
            node.getParR().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getSec() != null)
        {
            node.getSec().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getPrintstmt() != null)
        {
            node.getPrintstmt().apply(this);
        }
        if(node.getParL() != null)
        {
            node.getParL().apply(this);
        }
        if(node.getThink() != null)
        {
            node.getThink().apply(this);
        }
        outAOption2Actionthink(node);
    }

    public void inAPlusPrintstmt(APlusPrintstmt node)
    {
        defaultIn(node);
    }

    public void outAPlusPrintstmt(APlusPrintstmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusPrintstmt(APlusPrintstmt node)
    {
        inAPlusPrintstmt(node);
        if(node.getPrintstmt() != null)
        {
            node.getPrintstmt().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAPlusPrintstmt(node);
    }

    public void inAValPrintstmt(AValPrintstmt node)
    {
        defaultIn(node);
    }

    public void outAValPrintstmt(AValPrintstmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValPrintstmt(AValPrintstmt node)
    {
        inAValPrintstmt(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAValPrintstmt(node);
    }

    public void inAListvariablesListvariables(AListvariablesListvariables node)
    {
        defaultIn(node);
    }

    public void outAListvariablesListvariables(AListvariablesListvariables node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListvariablesListvariables(AListvariablesListvariables node)
    {
        inAListvariablesListvariables(node);
        if(node.getListvariables() != null)
        {
            node.getListvariables().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAListvariablesListvariables(node);
    }

    public void inAListvariables(AListvariables node)
    {
        defaultIn(node);
    }

    public void outAListvariables(AListvariables node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListvariables(AListvariables node)
    {
        inAListvariables(node);
        outAListvariables(node);
    }

    public void inAListStmt(AListStmt node)
    {
        defaultIn(node);
    }

    public void outAListStmt(AListStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListStmt(AListStmt node)
    {
        inAListStmt(node);
        if(node.getSemiC() != null)
        {
            node.getSemiC().apply(this);
        }
        if(node.getParR() != null)
        {
            node.getParR().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getParL() != null)
        {
            node.getParL().apply(this);
        }
        if(node.getAdd() != null)
        {
            node.getAdd().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAListStmt(node);
    }

    public void inAAddStmt(AAddStmt node)
    {
        defaultIn(node);
    }

    public void outAAddStmt(AAddStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddStmt(AAddStmt node)
    {
        inAAddStmt(node);
        if(node.getSemiC() != null)
        {
            node.getSemiC().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAAddStmt(node);
    }

    public void inAExprExpr(AExprExpr node)
    {
        defaultIn(node);
    }

    public void outAExprExpr(AExprExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprExpr(AExprExpr node)
    {
        inAExprExpr(node);
        if(node.getOpassign() != null)
        {
            node.getOpassign().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAExprExpr(node);
    }

    public void inAOpassignExpr(AOpassignExpr node)
    {
        defaultIn(node);
    }

    public void outAOpassignExpr(AOpassignExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpassignExpr(AOpassignExpr node)
    {
        inAOpassignExpr(node);
        if(node.getOpassign() != null)
        {
            node.getOpassign().apply(this);
        }
        outAOpassignExpr(node);
    }

    public void inAOpassign1Opassign(AOpassign1Opassign node)
    {
        defaultIn(node);
    }

    public void outAOpassign1Opassign(AOpassign1Opassign node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpassign1Opassign(AOpassign1Opassign node)
    {
        inAOpassign1Opassign(node);
        if(node.getOpassign() != null)
        {
            node.getOpassign().apply(this);
        }
        if(node.getEquals() != null)
        {
            node.getEquals().apply(this);
        }
        if(node.getOpor() != null)
        {
            node.getOpor().apply(this);
        }
        outAOpassign1Opassign(node);
    }

    public void inAOpassign2Opassign(AOpassign2Opassign node)
    {
        defaultIn(node);
    }

    public void outAOpassign2Opassign(AOpassign2Opassign node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpassign2Opassign(AOpassign2Opassign node)
    {
        inAOpassign2Opassign(node);
        if(node.getOpassign() != null)
        {
            node.getOpassign().apply(this);
        }
        if(node.getIncrement() != null)
        {
            node.getIncrement().apply(this);
        }
        if(node.getOpor() != null)
        {
            node.getOpor().apply(this);
        }
        outAOpassign2Opassign(node);
    }

    public void inAOpassign3Opassign(AOpassign3Opassign node)
    {
        defaultIn(node);
    }

    public void outAOpassign3Opassign(AOpassign3Opassign node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpassign3Opassign(AOpassign3Opassign node)
    {
        inAOpassign3Opassign(node);
        if(node.getOpassign() != null)
        {
            node.getOpassign().apply(this);
        }
        if(node.getDecrement() != null)
        {
            node.getDecrement().apply(this);
        }
        if(node.getOpor() != null)
        {
            node.getOpor().apply(this);
        }
        outAOpassign3Opassign(node);
    }

    public void inAOporOpassign(AOporOpassign node)
    {
        defaultIn(node);
    }

    public void outAOporOpassign(AOporOpassign node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOporOpassign(AOporOpassign node)
    {
        inAOporOpassign(node);
        if(node.getOpor() != null)
        {
            node.getOpor().apply(this);
        }
        outAOporOpassign(node);
    }

    public void inAOporOpor(AOporOpor node)
    {
        defaultIn(node);
    }

    public void outAOporOpor(AOporOpor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOporOpor(AOporOpor node)
    {
        inAOporOpor(node);
        if(node.getOpand() != null)
        {
            node.getOpand().apply(this);
        }
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        if(node.getOpor() != null)
        {
            node.getOpor().apply(this);
        }
        outAOporOpor(node);
    }

    public void inAOpandOpor(AOpandOpor node)
    {
        defaultIn(node);
    }

    public void outAOpandOpor(AOpandOpor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpandOpor(AOpandOpor node)
    {
        inAOpandOpor(node);
        if(node.getOpand() != null)
        {
            node.getOpand().apply(this);
        }
        outAOpandOpor(node);
    }

    public void inAOpandOpand(AOpandOpand node)
    {
        defaultIn(node);
    }

    public void outAOpandOpand(AOpandOpand node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpandOpand(AOpandOpand node)
    {
        inAOpandOpand(node);
        if(node.getOpcompare() != null)
        {
            node.getOpcompare().apply(this);
        }
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        if(node.getOpand() != null)
        {
            node.getOpand().apply(this);
        }
        outAOpandOpand(node);
    }

    public void inAOpcompareOpand(AOpcompareOpand node)
    {
        defaultIn(node);
    }

    public void outAOpcompareOpand(AOpcompareOpand node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpcompareOpand(AOpcompareOpand node)
    {
        inAOpcompareOpand(node);
        if(node.getOpcompare() != null)
        {
            node.getOpcompare().apply(this);
        }
        outAOpcompareOpand(node);
    }

    public void inAOpcompare1Opcompare(AOpcompare1Opcompare node)
    {
        defaultIn(node);
    }

    public void outAOpcompare1Opcompare(AOpcompare1Opcompare node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpcompare1Opcompare(AOpcompare1Opcompare node)
    {
        inAOpcompare1Opcompare(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getLess() != null)
        {
            node.getLess().apply(this);
        }
        if(node.getOpcompare() != null)
        {
            node.getOpcompare().apply(this);
        }
        outAOpcompare1Opcompare(node);
    }

    public void inAOpcompare2Opcompare(AOpcompare2Opcompare node)
    {
        defaultIn(node);
    }

    public void outAOpcompare2Opcompare(AOpcompare2Opcompare node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpcompare2Opcompare(AOpcompare2Opcompare node)
    {
        inAOpcompare2Opcompare(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getGreater() != null)
        {
            node.getGreater().apply(this);
        }
        if(node.getOpcompare() != null)
        {
            node.getOpcompare().apply(this);
        }
        outAOpcompare2Opcompare(node);
    }

    public void inAOpcompare3Opcompare(AOpcompare3Opcompare node)
    {
        defaultIn(node);
    }

    public void outAOpcompare3Opcompare(AOpcompare3Opcompare node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpcompare3Opcompare(AOpcompare3Opcompare node)
    {
        inAOpcompare3Opcompare(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getLessEqual() != null)
        {
            node.getLessEqual().apply(this);
        }
        if(node.getOpcompare() != null)
        {
            node.getOpcompare().apply(this);
        }
        outAOpcompare3Opcompare(node);
    }

    public void inAOpcompare4Opcompare(AOpcompare4Opcompare node)
    {
        defaultIn(node);
    }

    public void outAOpcompare4Opcompare(AOpcompare4Opcompare node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOpcompare4Opcompare(AOpcompare4Opcompare node)
    {
        inAOpcompare4Opcompare(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getGreaterEqual() != null)
        {
            node.getGreaterEqual().apply(this);
        }
        if(node.getOpcompare() != null)
        {
            node.getOpcompare().apply(this);
        }
        outAOpcompare4Opcompare(node);
    }

    public void inAValueOpcompare(AValueOpcompare node)
    {
        defaultIn(node);
    }

    public void outAValueOpcompare(AValueOpcompare node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValueOpcompare(AValueOpcompare node)
    {
        inAValueOpcompare(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAValueOpcompare(node);
    }

    public void inAIdentifierValue(AIdentifierValue node)
    {
        defaultIn(node);
    }

    public void outAIdentifierValue(AIdentifierValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifierValue(AIdentifierValue node)
    {
        inAIdentifierValue(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdentifierValue(node);
    }

    public void inALiteralValue(ALiteralValue node)
    {
        defaultIn(node);
    }

    public void outALiteralValue(ALiteralValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALiteralValue(ALiteralValue node)
    {
        inALiteralValue(node);
        if(node.getLiteral() != null)
        {
            node.getLiteral().apply(this);
        }
        outALiteralValue(node);
    }

    public void inARndValue(ARndValue node)
    {
        defaultIn(node);
    }

    public void outARndValue(ARndValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARndValue(ARndValue node)
    {
        inARndValue(node);
        if(node.getRnd() != null)
        {
            node.getRnd().apply(this);
        }
        outARndValue(node);
    }

    public void inALessEqualCompareToken(ALessEqualCompareToken node)
    {
        defaultIn(node);
    }

    public void outALessEqualCompareToken(ALessEqualCompareToken node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessEqualCompareToken(ALessEqualCompareToken node)
    {
        inALessEqualCompareToken(node);
        if(node.getLessEqual() != null)
        {
            node.getLessEqual().apply(this);
        }
        outALessEqualCompareToken(node);
    }

    public void inALessCompareToken(ALessCompareToken node)
    {
        defaultIn(node);
    }

    public void outALessCompareToken(ALessCompareToken node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessCompareToken(ALessCompareToken node)
    {
        inALessCompareToken(node);
        if(node.getLess() != null)
        {
            node.getLess().apply(this);
        }
        outALessCompareToken(node);
    }

    public void inAGreaterEqualCompareToken(AGreaterEqualCompareToken node)
    {
        defaultIn(node);
    }

    public void outAGreaterEqualCompareToken(AGreaterEqualCompareToken node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterEqualCompareToken(AGreaterEqualCompareToken node)
    {
        inAGreaterEqualCompareToken(node);
        if(node.getGreaterEqual() != null)
        {
            node.getGreaterEqual().apply(this);
        }
        outAGreaterEqualCompareToken(node);
    }

    public void inAGreaterCompareToken(AGreaterCompareToken node)
    {
        defaultIn(node);
    }

    public void outAGreaterCompareToken(AGreaterCompareToken node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterCompareToken(AGreaterCompareToken node)
    {
        inAGreaterCompareToken(node);
        if(node.getGreater() != null)
        {
            node.getGreater().apply(this);
        }
        outAGreaterCompareToken(node);
    }

    public void inAMinusOperator(AMinusOperator node)
    {
        defaultIn(node);
    }

    public void outAMinusOperator(AMinusOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusOperator(AMinusOperator node)
    {
        inAMinusOperator(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAMinusOperator(node);
    }

    public void inAPlusOperator(APlusOperator node)
    {
        defaultIn(node);
    }

    public void outAPlusOperator(APlusOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusOperator(APlusOperator node)
    {
        inAPlusOperator(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAPlusOperator(node);
    }

    public void inAMultOperator(AMultOperator node)
    {
        defaultIn(node);
    }

    public void outAMultOperator(AMultOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultOperator(AMultOperator node)
    {
        inAMultOperator(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        outAMultOperator(node);
    }

    public void inADivOperator(ADivOperator node)
    {
        defaultIn(node);
    }

    public void outADivOperator(ADivOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivOperator(ADivOperator node)
    {
        inADivOperator(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        outADivOperator(node);
    }

    public void inAEqualBoolOperator(AEqualBoolOperator node)
    {
        defaultIn(node);
    }

    public void outAEqualBoolOperator(AEqualBoolOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqualBoolOperator(AEqualBoolOperator node)
    {
        inAEqualBoolOperator(node);
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        outAEqualBoolOperator(node);
    }

    public void inALessEqualBoolOperator(ALessEqualBoolOperator node)
    {
        defaultIn(node);
    }

    public void outALessEqualBoolOperator(ALessEqualBoolOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessEqualBoolOperator(ALessEqualBoolOperator node)
    {
        inALessEqualBoolOperator(node);
        if(node.getLessEqual() != null)
        {
            node.getLessEqual().apply(this);
        }
        outALessEqualBoolOperator(node);
    }

    public void inAGreaterEqualBoolOperator(AGreaterEqualBoolOperator node)
    {
        defaultIn(node);
    }

    public void outAGreaterEqualBoolOperator(AGreaterEqualBoolOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterEqualBoolOperator(AGreaterEqualBoolOperator node)
    {
        inAGreaterEqualBoolOperator(node);
        if(node.getGreaterEqual() != null)
        {
            node.getGreaterEqual().apply(this);
        }
        outAGreaterEqualBoolOperator(node);
    }

    public void inANegateBoolOperator(ANegateBoolOperator node)
    {
        defaultIn(node);
    }

    public void outANegateBoolOperator(ANegateBoolOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegateBoolOperator(ANegateBoolOperator node)
    {
        inANegateBoolOperator(node);
        if(node.getNegate() != null)
        {
            node.getNegate().apply(this);
        }
        outANegateBoolOperator(node);
    }

    public void inAAndBoolOperator(AAndBoolOperator node)
    {
        defaultIn(node);
    }

    public void outAAndBoolOperator(AAndBoolOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndBoolOperator(AAndBoolOperator node)
    {
        inAAndBoolOperator(node);
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        outAAndBoolOperator(node);
    }

    public void inAOrBoolOperator(AOrBoolOperator node)
    {
        defaultIn(node);
    }

    public void outAOrBoolOperator(AOrBoolOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrBoolOperator(AOrBoolOperator node)
    {
        inAOrBoolOperator(node);
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        outAOrBoolOperator(node);
    }

    public void inALessBoolOperator(ALessBoolOperator node)
    {
        defaultIn(node);
    }

    public void outALessBoolOperator(ALessBoolOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessBoolOperator(ALessBoolOperator node)
    {
        inALessBoolOperator(node);
        if(node.getLess() != null)
        {
            node.getLess().apply(this);
        }
        outALessBoolOperator(node);
    }

    public void inAGreaterBoolOperator(AGreaterBoolOperator node)
    {
        defaultIn(node);
    }

    public void outAGreaterBoolOperator(AGreaterBoolOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterBoolOperator(AGreaterBoolOperator node)
    {
        inAGreaterBoolOperator(node);
        if(node.getGreater() != null)
        {
            node.getGreater().apply(this);
        }
        outAGreaterBoolOperator(node);
    }

    public void inARnd(ARnd node)
    {
        defaultIn(node);
    }

    public void outARnd(ARnd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARnd(ARnd node)
    {
        inARnd(node);
        if(node.getParR() != null)
        {
            node.getParR().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getTo() != null)
        {
            node.getTo().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getParL() != null)
        {
            node.getParL().apply(this);
        }
        if(node.getRandom() != null)
        {
            node.getRandom().apply(this);
        }
        outARnd(node);
    }

    public void inABooleanLiteralLiteral(ABooleanLiteralLiteral node)
    {
        defaultIn(node);
    }

    public void outABooleanLiteralLiteral(ABooleanLiteralLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanLiteralLiteral(ABooleanLiteralLiteral node)
    {
        inABooleanLiteralLiteral(node);
        if(node.getBooleanLiteral() != null)
        {
            node.getBooleanLiteral().apply(this);
        }
        outABooleanLiteralLiteral(node);
    }

    public void inAIntegerLiteralLiteral(AIntegerLiteralLiteral node)
    {
        defaultIn(node);
    }

    public void outAIntegerLiteralLiteral(AIntegerLiteralLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntegerLiteralLiteral(AIntegerLiteralLiteral node)
    {
        inAIntegerLiteralLiteral(node);
        if(node.getIntegerLiteral() != null)
        {
            node.getIntegerLiteral().apply(this);
        }
        outAIntegerLiteralLiteral(node);
    }

    public void inADoubleLiteralLiteral(ADoubleLiteralLiteral node)
    {
        defaultIn(node);
    }

    public void outADoubleLiteralLiteral(ADoubleLiteralLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADoubleLiteralLiteral(ADoubleLiteralLiteral node)
    {
        inADoubleLiteralLiteral(node);
        if(node.getDoubleLiteral() != null)
        {
            node.getDoubleLiteral().apply(this);
        }
        outADoubleLiteralLiteral(node);
    }

    public void inAStringLiteralLiteral(AStringLiteralLiteral node)
    {
        defaultIn(node);
    }

    public void outAStringLiteralLiteral(AStringLiteralLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringLiteralLiteral(AStringLiteralLiteral node)
    {
        inAStringLiteralLiteral(node);
        if(node.getStringLiteral() != null)
        {
            node.getStringLiteral().apply(this);
        }
        outAStringLiteralLiteral(node);
    }

    public void inATrueBooleanLiteral(ATrueBooleanLiteral node)
    {
        defaultIn(node);
    }

    public void outATrueBooleanLiteral(ATrueBooleanLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrueBooleanLiteral(ATrueBooleanLiteral node)
    {
        inATrueBooleanLiteral(node);
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        outATrueBooleanLiteral(node);
    }

    public void inAFalseBooleanLiteral(AFalseBooleanLiteral node)
    {
        defaultIn(node);
    }

    public void outAFalseBooleanLiteral(AFalseBooleanLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalseBooleanLiteral(AFalseBooleanLiteral node)
    {
        inAFalseBooleanLiteral(node);
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAFalseBooleanLiteral(node);
    }
}
