package compiler.interpret;
import compiler.node.*;
import compiler.analysis.*;
import compiler.interpret.Typecheck;

import java.util.*;

public class SemanticAnalyzer extends DepthFirstAdapter {
	
	Hashtable symble_table = new Hashtable();
	
	
	public void outAVariableDeclaration(AVariableDeclaration node)
	{
		TIdentifier ident = node.getIdentifier();
		
		String key = ident.toString().toUpperCase();
		List<TypeExpression> Type = Typecheck.TypeExpressions(node.getVariables(), node.getVariableTail());
		
		if(symble_table.containsKey(key))
		{
			System.out.println("Identifier already defined");
			System.exit(0);
		}
		else
		{
			symble_table.put(key,Type);
		}
	}
	
	public void outAParams(AParams node)
	{
		TIdentifier ident = node.getIdentifier();
		
		String key = ident.toString().toUpperCase();
		
		if(symble_table.containsKey(key))
		{
			System.out.println("Identifier already defined");
			System.exit(0);
		}
		else
		{
			symble_table.put(key,key);
		}
	}
	
	public void outAVarname(AVarname node)
	{
		TIdentifier ident = node.getIdentifier();
		
		String key = ident.toString().toUpperCase();
		if(!key.equals("GRID "))
		{
			if(!symble_table.containsKey(key))
			{
				System.out.println("Identifier not defined: " + node.getIdentifier());
				System.exit(0);
			}
		}
	}
	
	public void outAProgram(AProgram node)
	{
		System.out.println("hej");
		Iterator it = symble_table.entrySet().iterator();
		while(it.hasNext())
		{
			Map.Entry pair = (Map.Entry)it.next();
			symble_table.put(pair.getKey(), Typecheck.typeChecker((List<TypeExpression>)pair.getValue()));
		}
	}
	

}
