/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.node;

import compiler.analysis.*;

@SuppressWarnings("nls")
public final class AGridPosValue extends PValue
{
    private PFuncCall _funcCall_;
    private TDot _dot_;
    private TIdentifier _identifier_;
    private PGridParams _gridParams_;

    public AGridPosValue()
    {
        // Constructor
    }

    public AGridPosValue(
        @SuppressWarnings("hiding") PFuncCall _funcCall_,
        @SuppressWarnings("hiding") TDot _dot_,
        @SuppressWarnings("hiding") TIdentifier _identifier_,
        @SuppressWarnings("hiding") PGridParams _gridParams_)
    {
        // Constructor
        setFuncCall(_funcCall_);

        setDot(_dot_);

        setIdentifier(_identifier_);

        setGridParams(_gridParams_);

    }

    @Override
    public Object clone()
    {
        return new AGridPosValue(
            cloneNode(this._funcCall_),
            cloneNode(this._dot_),
            cloneNode(this._identifier_),
            cloneNode(this._gridParams_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAGridPosValue(this);
    }

    public PFuncCall getFuncCall()
    {
        return this._funcCall_;
    }

    public void setFuncCall(PFuncCall node)
    {
        if(this._funcCall_ != null)
        {
            this._funcCall_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._funcCall_ = node;
    }

    public TDot getDot()
    {
        return this._dot_;
    }

    public void setDot(TDot node)
    {
        if(this._dot_ != null)
        {
            this._dot_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._dot_ = node;
    }

    public TIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    public PGridParams getGridParams()
    {
        return this._gridParams_;
    }

    public void setGridParams(PGridParams node)
    {
        if(this._gridParams_ != null)
        {
            this._gridParams_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._gridParams_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._funcCall_)
            + toString(this._dot_)
            + toString(this._identifier_)
            + toString(this._gridParams_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._funcCall_ == child)
        {
            this._funcCall_ = null;
            return;
        }

        if(this._dot_ == child)
        {
            this._dot_ = null;
            return;
        }

        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        if(this._gridParams_ == child)
        {
            this._gridParams_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._funcCall_ == oldChild)
        {
            setFuncCall((PFuncCall) newChild);
            return;
        }

        if(this._dot_ == oldChild)
        {
            setDot((TDot) newChild);
            return;
        }

        if(this._identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(this._gridParams_ == oldChild)
        {
            setGridParams((PGridParams) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
