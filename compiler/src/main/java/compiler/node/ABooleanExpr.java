/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.node;

import compiler.analysis.*;

@SuppressWarnings("nls")
public final class ABooleanExpr extends PExpr
{
    private PNegationOperator _negationOperator_;
    private PBoolExpr _boolExpr_;

    public ABooleanExpr()
    {
        // Constructor
    }

    public ABooleanExpr(
        @SuppressWarnings("hiding") PNegationOperator _negationOperator_,
        @SuppressWarnings("hiding") PBoolExpr _boolExpr_)
    {
        // Constructor
        setNegationOperator(_negationOperator_);

        setBoolExpr(_boolExpr_);

    }

    @Override
    public Object clone()
    {
        return new ABooleanExpr(
            cloneNode(this._negationOperator_),
            cloneNode(this._boolExpr_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseABooleanExpr(this);
    }

    public PNegationOperator getNegationOperator()
    {
        return this._negationOperator_;
    }

    public void setNegationOperator(PNegationOperator node)
    {
        if(this._negationOperator_ != null)
        {
            this._negationOperator_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._negationOperator_ = node;
    }

    public PBoolExpr getBoolExpr()
    {
        return this._boolExpr_;
    }

    public void setBoolExpr(PBoolExpr node)
    {
        if(this._boolExpr_ != null)
        {
            this._boolExpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._boolExpr_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._negationOperator_)
            + toString(this._boolExpr_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._negationOperator_ == child)
        {
            this._negationOperator_ = null;
            return;
        }

        if(this._boolExpr_ == child)
        {
            this._boolExpr_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._negationOperator_ == oldChild)
        {
            setNegationOperator((PNegationOperator) newChild);
            return;
        }

        if(this._boolExpr_ == oldChild)
        {
            setBoolExpr((PBoolExpr) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
