/* This file was generated by SableCC (http://www.sablecc.org/). */

package simpleAdder.analysis;

import simpleAdder.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseADeclsDecls(ADeclsDecls node);
    void caseADecls(ADecls node);
    void caseAVardeclDecl(AVardeclDecl node);
    void caseAEventDecl(AEventDecl node);
    void caseAStmtDecl(AStmtDecl node);
    void caseAControlstructureDecl(AControlstructureDecl node);
    void caseAActionDecl(AActionDecl node);
    void caseARepeatstructureControlstructure(ARepeatstructureControlstructure node);
    void caseAIfstructureControlstructure(AIfstructureControlstructure node);
    void caseASwitchstructureControlstructure(ASwitchstructureControlstructure node);
    void caseASwitchcase(ASwitchcase node);
    void caseAElsestructureElsestructure(AElsestructureElsestructure node);
    void caseARepeatwhileRepeatstructure(ARepeatwhileRepeatstructure node);
    void caseAIdRepeatstructure(AIdRepeatstructure node);
    void caseARepeatstructure(ARepeatstructure node);
    void caseAStartupEvent(AStartupEvent node);
    void caseASingleVarDeclsVardecl(ASingleVarDeclsVardecl node);
    void caseAListVardecl(AListVardecl node);
    void caseASayAction(ASayAction node);
    void caseAThinkAction(AThinkAction node);
    void caseAOption1Actionsay(AOption1Actionsay node);
    void caseAOption2Actionsay(AOption2Actionsay node);
    void caseAOption1Actionthink(AOption1Actionthink node);
    void caseAOption2Actionthink(AOption2Actionthink node);
    void caseAPlusPrintstmt(APlusPrintstmt node);
    void caseAValPrintstmt(AValPrintstmt node);
    void caseAListvariablesListvariables(AListvariablesListvariables node);
    void caseAListvariables(AListvariables node);
    void caseAListStmt(AListStmt node);
    void caseAAddStmt(AAddStmt node);
    void caseAExprExpr(AExprExpr node);
    void caseAOpassignExpr(AOpassignExpr node);
    void caseAOpassign1Opassign(AOpassign1Opassign node);
    void caseAOpassign2Opassign(AOpassign2Opassign node);
    void caseAOpassign3Opassign(AOpassign3Opassign node);
    void caseAOporOpassign(AOporOpassign node);
    void caseAOporOpor(AOporOpor node);
    void caseAOpandOpor(AOpandOpor node);
    void caseAOpandOpand(AOpandOpand node);
    void caseAOpcompareOpand(AOpcompareOpand node);
    void caseAOpcompare1Opcompare(AOpcompare1Opcompare node);
    void caseAOpcompare2Opcompare(AOpcompare2Opcompare node);
    void caseAOpcompare3Opcompare(AOpcompare3Opcompare node);
    void caseAOpcompare4Opcompare(AOpcompare4Opcompare node);
    void caseAValueOpcompare(AValueOpcompare node);
    void caseAIdentifierValue(AIdentifierValue node);
    void caseALiteralValue(ALiteralValue node);
    void caseARndValue(ARndValue node);
    void caseALessEqualCompareToken(ALessEqualCompareToken node);
    void caseALessCompareToken(ALessCompareToken node);
    void caseAGreaterEqualCompareToken(AGreaterEqualCompareToken node);
    void caseAGreaterCompareToken(AGreaterCompareToken node);
    void caseAMinusOperator(AMinusOperator node);
    void caseAPlusOperator(APlusOperator node);
    void caseAMultOperator(AMultOperator node);
    void caseADivOperator(ADivOperator node);
    void caseAEqualBoolOperator(AEqualBoolOperator node);
    void caseALessEqualBoolOperator(ALessEqualBoolOperator node);
    void caseAGreaterEqualBoolOperator(AGreaterEqualBoolOperator node);
    void caseANegateBoolOperator(ANegateBoolOperator node);
    void caseAAndBoolOperator(AAndBoolOperator node);
    void caseAOrBoolOperator(AOrBoolOperator node);
    void caseALessBoolOperator(ALessBoolOperator node);
    void caseAGreaterBoolOperator(AGreaterBoolOperator node);
    void caseARnd(ARnd node);
    void caseABooleanLiteralLiteral(ABooleanLiteralLiteral node);
    void caseAIntegerLiteralLiteral(AIntegerLiteralLiteral node);
    void caseADoubleLiteralLiteral(ADoubleLiteralLiteral node);
    void caseAStringLiteralLiteral(AStringLiteralLiteral node);
    void caseATrueBooleanLiteral(ATrueBooleanLiteral node);
    void caseAFalseBooleanLiteral(AFalseBooleanLiteral node);

    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTMult(TMult node);
    void caseTDiv(TDiv node);
    void caseTEquals(TEquals node);
    void caseTParL(TParL node);
    void caseTParR(TParR node);
    void caseTCurlyL(TCurlyL node);
    void caseTCurlyR(TCurlyR node);
    void caseTBrackL(TBrackL node);
    void caseTBrackR(TBrackR node);
    void caseTQuote(TQuote node);
    void caseTComma(TComma node);
    void caseTSemiC(TSemiC node);
    void caseTBlank(TBlank node);
    void caseTTrue(TTrue node);
    void caseTFalse(TFalse node);
    void caseTDot(TDot node);
    void caseTEqual(TEqual node);
    void caseTLessEqual(TLessEqual node);
    void caseTGreaterEqual(TGreaterEqual node);
    void caseTNegate(TNegate node);
    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTLess(TLess node);
    void caseTGreater(TGreater node);
    void caseTIncrement(TIncrement node);
    void caseTDecrement(TDecrement node);
    void caseTNew(TNew node);
    void caseTAdd(TAdd node);
    void caseTStartup(TStartup node);
    void caseTFig(TFig node);
    void caseTColon(TColon node);
    void caseTRepeat(TRepeat node);
    void caseTWhile(TWhile node);
    void caseTRandom(TRandom node);
    void caseTTo(TTo node);
    void caseTIf(TIf node);
    void caseTElse(TElse node);
    void caseTSay(TSay node);
    void caseTSec(TSec node);
    void caseTForeach(TForeach node);
    void caseTIn(TIn node);
    void caseTThink(TThink node);
    void caseTSwitch(TSwitch node);
    void caseTCase(TCase node);
    void caseTStringLiteral(TStringLiteral node);
    void caseTIdentifier(TIdentifier node);
    void caseTDoubleLiteral(TDoubleLiteral node);
    void caseTIntegerLiteral(TIntegerLiteral node);
    void caseTMultilineComment(TMultilineComment node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
