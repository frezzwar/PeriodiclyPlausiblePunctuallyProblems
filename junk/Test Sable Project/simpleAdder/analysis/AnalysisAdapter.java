/* This file was generated by SableCC (http://www.sablecc.org/). */

package simpleAdder.analysis;

import java.util.*;
import simpleAdder.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADeclsDecls(ADeclsDecls node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADecls(ADecls node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVardeclDecl(AVardeclDecl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEventDecl(AEventDecl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStmtDecl(AStmtDecl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAControlstructureDecl(AControlstructureDecl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAActionDecl(AActionDecl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARepeatstructureControlstructure(ARepeatstructureControlstructure node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfstructureControlstructure(AIfstructureControlstructure node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASwitchstructureControlstructure(ASwitchstructureControlstructure node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASwitchcase(ASwitchcase node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAElsestructureElsestructure(AElsestructureElsestructure node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARepeatwhileRepeatstructure(ARepeatwhileRepeatstructure node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdRepeatstructure(AIdRepeatstructure node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARepeatstructure(ARepeatstructure node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStartupEvent(AStartupEvent node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASingleVarDeclsVardecl(ASingleVarDeclsVardecl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListVardecl(AListVardecl node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASayAction(ASayAction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAThinkAction(AThinkAction node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOption1Actionsay(AOption1Actionsay node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOption2Actionsay(AOption2Actionsay node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOption1Actionthink(AOption1Actionthink node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOption2Actionthink(AOption2Actionthink node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPlusPrintstmt(APlusPrintstmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAValPrintstmt(AValPrintstmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListvariablesListvariables(AListvariablesListvariables node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListvariables(AListvariables node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListStmt(AListStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAddStmt(AAddStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExprExpr(AExprExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOpassignExpr(AOpassignExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOpassign1Opassign(AOpassign1Opassign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOpassign2Opassign(AOpassign2Opassign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOpassign3Opassign(AOpassign3Opassign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOporOpassign(AOporOpassign node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOporOpor(AOporOpor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOpandOpor(AOpandOpor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOpandOpand(AOpandOpand node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOpcompareOpand(AOpcompareOpand node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOpcompare1Opcompare(AOpcompare1Opcompare node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOpcompare2Opcompare(AOpcompare2Opcompare node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOpcompare3Opcompare(AOpcompare3Opcompare node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOpcompare4Opcompare(AOpcompare4Opcompare node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAValueOpcompare(AValueOpcompare node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdentifierValue(AIdentifierValue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALiteralValue(ALiteralValue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARndValue(ARndValue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALessEqualCompareToken(ALessEqualCompareToken node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALessCompareToken(ALessCompareToken node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGreaterEqualCompareToken(AGreaterEqualCompareToken node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGreaterCompareToken(AGreaterCompareToken node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMinusOperator(AMinusOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPlusOperator(APlusOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultOperator(AMultOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADivOperator(ADivOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEqualBoolOperator(AEqualBoolOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALessEqualBoolOperator(ALessEqualBoolOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGreaterEqualBoolOperator(AGreaterEqualBoolOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANegateBoolOperator(ANegateBoolOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAndBoolOperator(AAndBoolOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOrBoolOperator(AOrBoolOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALessBoolOperator(ALessBoolOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGreaterBoolOperator(AGreaterBoolOperator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARnd(ARnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABooleanLiteralLiteral(ABooleanLiteralLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIntegerLiteralLiteral(AIntegerLiteralLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADoubleLiteralLiteral(ADoubleLiteralLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStringLiteralLiteral(AStringLiteralLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATrueBooleanLiteral(ATrueBooleanLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFalseBooleanLiteral(AFalseBooleanLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMinus(TMinus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMult(TMult node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEquals(TEquals node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTParL(TParL node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTParR(TParR node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCurlyL(TCurlyL node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCurlyR(TCurlyR node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBrackL(TBrackL node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBrackR(TBrackR node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTQuote(TQuote node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSemiC(TSemiC node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTrue(TTrue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFalse(TFalse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDot(TDot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEqual(TEqual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLessEqual(TLessEqual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGreaterEqual(TGreaterEqual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNegate(TNegate node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLess(TLess node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTGreater(TGreater node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIncrement(TIncrement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDecrement(TDecrement node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNew(TNew node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAdd(TAdd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStartup(TStartup node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFig(TFig node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTColon(TColon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRepeat(TRepeat node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTWhile(TWhile node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRandom(TRandom node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTo(TTo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSay(TSay node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSec(TSec node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTForeach(TForeach node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIn(TIn node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTThink(TThink node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSwitch(TSwitch node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCase(TCase node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStringLiteral(TStringLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIdentifier(TIdentifier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDoubleLiteral(TDoubleLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIntegerLiteral(TIntegerLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMultilineComment(TMultilineComment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
