/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.analysis;

import java.util.*;
import compiler.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPProgram().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        {
            List<PGlobalDecl> copy = new ArrayList<PGlobalDecl>(node.getGlobalDecl());
            for(PGlobalDecl e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getMain() != null)
        {
            node.getMain().apply(this);
        }
        if(node.getBody() != null)
        {
            node.getBody().apply(this);
        }
        {
            List<PFuncDecl> copy = new ArrayList<PFuncDecl>(node.getFuncDecl());
            for(PFuncDecl e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getEventDecl() != null)
        {
            node.getEventDecl().apply(this);
        }
        outAProgram(node);
    }

    public void inAVariableDeclStmt(AVariableDeclStmt node)
    {
        defaultIn(node);
    }

    public void outAVariableDeclStmt(AVariableDeclStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariableDeclStmt(AVariableDeclStmt node)
    {
        inAVariableDeclStmt(node);
        if(node.getVariableDecl() != null)
        {
            node.getVariableDecl().apply(this);
        }
        outAVariableDeclStmt(node);
    }

    public void inAControlStmtStmt(AControlStmtStmt node)
    {
        defaultIn(node);
    }

    public void outAControlStmtStmt(AControlStmtStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAControlStmtStmt(AControlStmtStmt node)
    {
        inAControlStmtStmt(node);
        if(node.getControlStmt() != null)
        {
            node.getControlStmt().apply(this);
        }
        outAControlStmtStmt(node);
    }

    public void inAExprStmt(AExprStmt node)
    {
        defaultIn(node);
    }

    public void outAExprStmt(AExprStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprStmt(AExprStmt node)
    {
        inAExprStmt(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getSemiC() != null)
        {
            node.getSemiC().apply(this);
        }
        outAExprStmt(node);
    }

    public void inAVarGlobalDecl(AVarGlobalDecl node)
    {
        defaultIn(node);
    }

    public void outAVarGlobalDecl(AVarGlobalDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarGlobalDecl(AVarGlobalDecl node)
    {
        inAVarGlobalDecl(node);
        if(node.getVariableDecl() != null)
        {
            node.getVariableDecl().apply(this);
        }
        outAVarGlobalDecl(node);
    }

    public void inAObjGlobalDecl(AObjGlobalDecl node)
    {
        defaultIn(node);
    }

    public void outAObjGlobalDecl(AObjGlobalDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAObjGlobalDecl(AObjGlobalDecl node)
    {
        inAObjGlobalDecl(node);
        if(node.getObjectDecl() != null)
        {
            node.getObjectDecl().apply(this);
        }
        outAObjGlobalDecl(node);
    }

    public void inAGridGlobalDecl(AGridGlobalDecl node)
    {
        defaultIn(node);
    }

    public void outAGridGlobalDecl(AGridGlobalDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGridGlobalDecl(AGridGlobalDecl node)
    {
        inAGridGlobalDecl(node);
        if(node.getGridDecl() != null)
        {
            node.getGridDecl().apply(this);
        }
        outAGridGlobalDecl(node);
    }

    public void inAEventDecl(AEventDecl node)
    {
        defaultIn(node);
    }

    public void outAEventDecl(AEventDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEventDecl(AEventDecl node)
    {
        inAEventDecl(node);
        if(node.getEvent() != null)
        {
            node.getEvent().apply(this);
        }
        if(node.getParL() != null)
        {
            node.getParL().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getParR() != null)
        {
            node.getParR().apply(this);
        }
        if(node.getBody() != null)
        {
            node.getBody().apply(this);
        }
        outAEventDecl(node);
    }

    public void inAGridDecl(AGridDecl node)
    {
        defaultIn(node);
    }

    public void outAGridDecl(AGridDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGridDecl(AGridDecl node)
    {
        inAGridDecl(node);
        if(node.getNew() != null)
        {
            node.getNew().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getGrid() != null)
        {
            node.getGrid().apply(this);
        }
        if(node.getParL() != null)
        {
            node.getParL().apply(this);
        }
        if(node.getInt1() != null)
        {
            node.getInt1().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getInt2() != null)
        {
            node.getInt2().apply(this);
        }
        if(node.getParR() != null)
        {
            node.getParR().apply(this);
        }
        if(node.getSemiC() != null)
        {
            node.getSemiC().apply(this);
        }
        outAGridDecl(node);
    }

    public void inAObjectDecl(AObjectDecl node)
    {
        defaultIn(node);
    }

    public void outAObjectDecl(AObjectDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAObjectDecl(AObjectDecl node)
    {
        inAObjectDecl(node);
        if(node.getNew() != null)
        {
            node.getNew().apply(this);
        }
        if(node.getId1() != null)
        {
            node.getId1().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getFigure() != null)
        {
            node.getFigure().apply(this);
        }
        if(node.getParL() != null)
        {
            node.getParL().apply(this);
        }
        if(node.getId2() != null)
        {
            node.getId2().apply(this);
        }
        if(node.getParR() != null)
        {
            node.getParR().apply(this);
        }
        if(node.getObjBody() != null)
        {
            node.getObjBody().apply(this);
        }
        outAObjectDecl(node);
    }

    public void inAFuncDecl(AFuncDecl node)
    {
        defaultIn(node);
    }

    public void outAFuncDecl(AFuncDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncDecl(AFuncDecl node)
    {
        inAFuncDecl(node);
        if(node.getNew() != null)
        {
            node.getNew().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getParL() != null)
        {
            node.getParL().apply(this);
        }
        if(node.getParams() != null)
        {
            node.getParams().apply(this);
        }
        if(node.getParR() != null)
        {
            node.getParR().apply(this);
        }
        if(node.getBody() != null)
        {
            node.getBody().apply(this);
        }
        outAFuncDecl(node);
    }

    public void inAVariableDecl(AVariableDecl node)
    {
        defaultIn(node);
    }

    public void outAVariableDecl(AVariableDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariableDecl(AVariableDecl node)
    {
        inAVariableDecl(node);
        if(node.getNew() != null)
        {
            node.getNew().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getAssignOperator() != null)
        {
            node.getAssignOperator().apply(this);
        }
        if(node.getVariable() != null)
        {
            node.getVariable().apply(this);
        }
        if(node.getSemiC() != null)
        {
            node.getSemiC().apply(this);
        }
        outAVariableDecl(node);
    }

    public void inAExprVariable(AExprVariable node)
    {
        defaultIn(node);
    }

    public void outAExprVariable(AExprVariable node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprVariable(AExprVariable node)
    {
        inAExprVariable(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAExprVariable(node);
    }

    public void inAListVariable(AListVariable node)
    {
        defaultIn(node);
    }

    public void outAListVariable(AListVariable node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListVariable(AListVariable node)
    {
        inAListVariable(node);
        if(node.getBrackL() != null)
        {
            node.getBrackL().apply(this);
        }
        if(node.getListVar() != null)
        {
            node.getListVar().apply(this);
        }
        if(node.getBrackR() != null)
        {
            node.getBrackR().apply(this);
        }
        outAListVariable(node);
    }

    public void inAListVar(AListVar node)
    {
        defaultIn(node);
    }

    public void outAListVar(AListVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListVar(AListVar node)
    {
        inAListVar(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        {
            List<PListVarTail> copy = new ArrayList<PListVarTail>(node.getListVarTail());
            for(PListVarTail e : copy)
            {
                e.apply(this);
            }
        }
        outAListVar(node);
    }

    public void inAListVarTail(AListVarTail node)
    {
        defaultIn(node);
    }

    public void outAListVarTail(AListVarTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListVarTail(AListVarTail node)
    {
        inAListVarTail(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAListVarTail(node);
    }

    public void inACallParams(ACallParams node)
    {
        defaultIn(node);
    }

    public void outACallParams(ACallParams node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACallParams(ACallParams node)
    {
        inACallParams(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        {
            List<PCallParamsTail> copy = new ArrayList<PCallParamsTail>(node.getCallParamsTail());
            for(PCallParamsTail e : copy)
            {
                e.apply(this);
            }
        }
        outACallParams(node);
    }

    public void inACallParamsTail(ACallParamsTail node)
    {
        defaultIn(node);
    }

    public void outACallParamsTail(ACallParamsTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACallParamsTail(ACallParamsTail node)
    {
        inACallParamsTail(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outACallParamsTail(node);
    }

    public void inAReturnValue(AReturnValue node)
    {
        defaultIn(node);
    }

    public void outAReturnValue(AReturnValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnValue(AReturnValue node)
    {
        inAReturnValue(node);
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getSemiC() != null)
        {
            node.getSemiC().apply(this);
        }
        outAReturnValue(node);
    }

    public void inAParams(AParams node)
    {
        defaultIn(node);
    }

    public void outAParams(AParams node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParams(AParams node)
    {
        inAParams(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PParamsTail> copy = new ArrayList<PParamsTail>(node.getParamsTail());
            for(PParamsTail e : copy)
            {
                e.apply(this);
            }
        }
        outAParams(node);
    }

    public void inAParamsTail(AParamsTail node)
    {
        defaultIn(node);
    }

    public void outAParamsTail(AParamsTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParamsTail(AParamsTail node)
    {
        inAParamsTail(node);
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAParamsTail(node);
    }

    public void inAWhileControlStmt(AWhileControlStmt node)
    {
        defaultIn(node);
    }

    public void outAWhileControlStmt(AWhileControlStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileControlStmt(AWhileControlStmt node)
    {
        inAWhileControlStmt(node);
        if(node.getRepeat() != null)
        {
            node.getRepeat().apply(this);
        }
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        if(node.getBody() != null)
        {
            node.getBody().apply(this);
        }
        outAWhileControlStmt(node);
    }

    public void inARepeatControlStmt(ARepeatControlStmt node)
    {
        defaultIn(node);
    }

    public void outARepeatControlStmt(ARepeatControlStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARepeatControlStmt(ARepeatControlStmt node)
    {
        inARepeatControlStmt(node);
        if(node.getRepeat() != null)
        {
            node.getRepeat().apply(this);
        }
        if(node.getRepeatCount() != null)
        {
            node.getRepeatCount().apply(this);
        }
        if(node.getBody() != null)
        {
            node.getBody().apply(this);
        }
        outARepeatControlStmt(node);
    }

    public void inAForeachControlStmt(AForeachControlStmt node)
    {
        defaultIn(node);
    }

    public void outAForeachControlStmt(AForeachControlStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForeachControlStmt(AForeachControlStmt node)
    {
        inAForeachControlStmt(node);
        if(node.getRepeat() != null)
        {
            node.getRepeat().apply(this);
        }
        if(node.getForeach() != null)
        {
            node.getForeach().apply(this);
        }
        if(node.getParL() != null)
        {
            node.getParL().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getIn() != null)
        {
            node.getIn().apply(this);
        }
        if(node.getList() != null)
        {
            node.getList().apply(this);
        }
        if(node.getParR() != null)
        {
            node.getParR().apply(this);
        }
        if(node.getBody() != null)
        {
            node.getBody().apply(this);
        }
        outAForeachControlStmt(node);
    }

    public void inAIfStmtControlStmt(AIfStmtControlStmt node)
    {
        defaultIn(node);
    }

    public void outAIfStmtControlStmt(AIfStmtControlStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStmtControlStmt(AIfStmtControlStmt node)
    {
        inAIfStmtControlStmt(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        if(node.getBody() != null)
        {
            node.getBody().apply(this);
        }
        if(node.getElseStmt() != null)
        {
            node.getElseStmt().apply(this);
        }
        outAIfStmtControlStmt(node);
    }

    public void inAElseStmtElseStmt(AElseStmtElseStmt node)
    {
        defaultIn(node);
    }

    public void outAElseStmtElseStmt(AElseStmtElseStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElseStmtElseStmt(AElseStmtElseStmt node)
    {
        inAElseStmtElseStmt(node);
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getBody() != null)
        {
            node.getBody().apply(this);
        }
        outAElseStmtElseStmt(node);
    }

    public void inAElseifStmtElseStmt(AElseifStmtElseStmt node)
    {
        defaultIn(node);
    }

    public void outAElseifStmtElseStmt(AElseifStmtElseStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElseifStmtElseStmt(AElseifStmtElseStmt node)
    {
        inAElseifStmtElseStmt(node);
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        if(node.getBody() != null)
        {
            node.getBody().apply(this);
        }
        if(node.getElseStmt() != null)
        {
            node.getElseStmt().apply(this);
        }
        outAElseifStmtElseStmt(node);
    }

    public void inACondition(ACondition node)
    {
        defaultIn(node);
    }

    public void outACondition(ACondition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondition(ACondition node)
    {
        inACondition(node);
        if(node.getParL() != null)
        {
            node.getParL().apply(this);
        }
        if(node.getBoolExpr() != null)
        {
            node.getBoolExpr().apply(this);
        }
        if(node.getParR() != null)
        {
            node.getParR().apply(this);
        }
        outACondition(node);
    }

    public void inARepeatCount(ARepeatCount node)
    {
        defaultIn(node);
    }

    public void outARepeatCount(ARepeatCount node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARepeatCount(ARepeatCount node)
    {
        inARepeatCount(node);
        if(node.getParL() != null)
        {
            node.getParL().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getParR() != null)
        {
            node.getParR().apply(this);
        }
        outARepeatCount(node);
    }

    public void inABody(ABody node)
    {
        defaultIn(node);
    }

    public void outABody(ABody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABody(ABody node)
    {
        inABody(node);
        if(node.getCurlyL() != null)
        {
            node.getCurlyL().apply(this);
        }
        {
            List<PStmt> copy = new ArrayList<PStmt>(node.getStmt());
            for(PStmt e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getReturnValue() != null)
        {
            node.getReturnValue().apply(this);
        }
        if(node.getCurlyR() != null)
        {
            node.getCurlyR().apply(this);
        }
        outABody(node);
    }

    public void inAObjBody(AObjBody node)
    {
        defaultIn(node);
    }

    public void outAObjBody(AObjBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAObjBody(AObjBody node)
    {
        inAObjBody(node);
        if(node.getCurlyL() != null)
        {
            node.getCurlyL().apply(this);
        }
        {
            List<PInObjDecl> copy = new ArrayList<PInObjDecl>(node.getInObjDecl());
            for(PInObjDecl e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getCurlyR() != null)
        {
            node.getCurlyR().apply(this);
        }
        outAObjBody(node);
    }

    public void inAMethodInObjDecl(AMethodInObjDecl node)
    {
        defaultIn(node);
    }

    public void outAMethodInObjDecl(AMethodInObjDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodInObjDecl(AMethodInObjDecl node)
    {
        inAMethodInObjDecl(node);
        if(node.getFuncDecl() != null)
        {
            node.getFuncDecl().apply(this);
        }
        outAMethodInObjDecl(node);
    }

    public void inAMemberInObjDecl(AMemberInObjDecl node)
    {
        defaultIn(node);
    }

    public void outAMemberInObjDecl(AMemberInObjDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMemberInObjDecl(AMemberInObjDecl node)
    {
        inAMemberInObjDecl(node);
        if(node.getVariableDecl() != null)
        {
            node.getVariableDecl().apply(this);
        }
        outAMemberInObjDecl(node);
    }

    public void inAAssignExpr(AAssignExpr node)
    {
        defaultIn(node);
    }

    public void outAAssignExpr(AAssignExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignExpr(AAssignExpr node)
    {
        inAAssignExpr(node);
        if(node.getAssignExpr() != null)
        {
            node.getAssignExpr().apply(this);
        }
        outAAssignExpr(node);
    }

    public void inABooleanExpr(ABooleanExpr node)
    {
        defaultIn(node);
    }

    public void outABooleanExpr(ABooleanExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanExpr(ABooleanExpr node)
    {
        inABooleanExpr(node);
        if(node.getNegationOperator() != null)
        {
            node.getNegationOperator().apply(this);
        }
        if(node.getBoolExpr() != null)
        {
            node.getBoolExpr().apply(this);
        }
        outABooleanExpr(node);
    }

    public void inANumericExpr(ANumericExpr node)
    {
        defaultIn(node);
    }

    public void outANumericExpr(ANumericExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumericExpr(ANumericExpr node)
    {
        inANumericExpr(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getOperator() != null)
        {
            node.getOperator().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outANumericExpr(node);
    }

    public void inAValueExpr(AValueExpr node)
    {
        defaultIn(node);
    }

    public void outAValueExpr(AValueExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValueExpr(AValueExpr node)
    {
        inAValueExpr(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAValueExpr(node);
    }

    public void inAParenthesizedExpr(AParenthesizedExpr node)
    {
        defaultIn(node);
    }

    public void outAParenthesizedExpr(AParenthesizedExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParenthesizedExpr(AParenthesizedExpr node)
    {
        inAParenthesizedExpr(node);
        if(node.getParL() != null)
        {
            node.getParL().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getParR() != null)
        {
            node.getParR().apply(this);
        }
        outAParenthesizedExpr(node);
    }

    public void inAParamaBoolExpr(AParamaBoolExpr node)
    {
        defaultIn(node);
    }

    public void outAParamaBoolExpr(AParamaBoolExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParamaBoolExpr(AParamaBoolExpr node)
    {
        inAParamaBoolExpr(node);
        if(node.getParL() != null)
        {
            node.getParL().apply(this);
        }
        if(node.getBody() != null)
        {
            node.getBody().apply(this);
        }
        if(node.getParR() != null)
        {
            node.getParR().apply(this);
        }
        if(node.getBoolOperator() != null)
        {
            node.getBoolOperator().apply(this);
        }
        if(node.getForllowExpr() != null)
        {
            node.getForllowExpr().apply(this);
        }
        outAParamaBoolExpr(node);
    }

    public void inAParamaNumericExpr(AParamaNumericExpr node)
    {
        defaultIn(node);
    }

    public void outAParamaNumericExpr(AParamaNumericExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParamaNumericExpr(AParamaNumericExpr node)
    {
        inAParamaNumericExpr(node);
        if(node.getParL() != null)
        {
            node.getParL().apply(this);
        }
        if(node.getBody() != null)
        {
            node.getBody().apply(this);
        }
        if(node.getParR() != null)
        {
            node.getParR().apply(this);
        }
        if(node.getOperator() != null)
        {
            node.getOperator().apply(this);
        }
        if(node.getForllowExpr() != null)
        {
            node.getForllowExpr().apply(this);
        }
        outAParamaNumericExpr(node);
    }

    public void inAVarAssignExpr(AVarAssignExpr node)
    {
        defaultIn(node);
    }

    public void outAVarAssignExpr(AVarAssignExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarAssignExpr(AVarAssignExpr node)
    {
        inAVarAssignExpr(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getMember() != null)
        {
            node.getMember().apply(this);
        }
        if(node.getAssignOperator() != null)
        {
            node.getAssignOperator().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAVarAssignExpr(node);
    }

    public void inABoolExpr(ABoolExpr node)
    {
        defaultIn(node);
    }

    public void outABoolExpr(ABoolExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolExpr(ABoolExpr node)
    {
        inABoolExpr(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getBoolOperator() != null)
        {
            node.getBoolOperator().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outABoolExpr(node);
    }

    public void inAIdValue(AIdValue node)
    {
        defaultIn(node);
    }

    public void outAIdValue(AIdValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdValue(AIdValue node)
    {
        inAIdValue(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        {
            List<PMember> copy = new ArrayList<PMember>(node.getMember());
            for(PMember e : copy)
            {
                e.apply(this);
            }
        }
        outAIdValue(node);
    }

    public void inAMethodCallValue(AMethodCallValue node)
    {
        defaultIn(node);
    }

    public void outAMethodCallValue(AMethodCallValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodCallValue(AMethodCallValue node)
    {
        inAMethodCallValue(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getFuncCall() != null)
        {
            node.getFuncCall().apply(this);
        }
        outAMethodCallValue(node);
    }

    public void inAGridPosValue(AGridPosValue node)
    {
        defaultIn(node);
    }

    public void outAGridPosValue(AGridPosValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGridPosValue(AGridPosValue node)
    {
        inAGridPosValue(node);
        if(node.getFuncCall() != null)
        {
            node.getFuncCall().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getGridParams() != null)
        {
            node.getGridParams().apply(this);
        }
        outAGridPosValue(node);
    }

    public void inAFuncCallValue(AFuncCallValue node)
    {
        defaultIn(node);
    }

    public void outAFuncCallValue(AFuncCallValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncCallValue(AFuncCallValue node)
    {
        inAFuncCallValue(node);
        if(node.getFuncCall() != null)
        {
            node.getFuncCall().apply(this);
        }
        outAFuncCallValue(node);
    }

    public void inALiteralValue(ALiteralValue node)
    {
        defaultIn(node);
    }

    public void outALiteralValue(ALiteralValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALiteralValue(ALiteralValue node)
    {
        inALiteralValue(node);
        if(node.getLiteral() != null)
        {
            node.getLiteral().apply(this);
        }
        outALiteralValue(node);
    }

    public void inAGridParams(AGridParams node)
    {
        defaultIn(node);
    }

    public void outAGridParams(AGridParams node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGridParams(AGridParams node)
    {
        inAGridParams(node);
        if(node.getParL() != null)
        {
            node.getParL().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getParR() != null)
        {
            node.getParR().apply(this);
        }
        outAGridParams(node);
    }

    public void inAFuncCall(AFuncCall node)
    {
        defaultIn(node);
    }

    public void outAFuncCall(AFuncCall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFuncCall(AFuncCall node)
    {
        inAFuncCall(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getParL() != null)
        {
            node.getParL().apply(this);
        }
        if(node.getCallParams() != null)
        {
            node.getCallParams().apply(this);
        }
        if(node.getParR() != null)
        {
            node.getParR().apply(this);
        }
        outAFuncCall(node);
    }

    public void inAMember(AMember node)
    {
        defaultIn(node);
    }

    public void outAMember(AMember node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMember(AMember node)
    {
        inAMember(node);
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAMember(node);
    }

    public void inAMinusOperator(AMinusOperator node)
    {
        defaultIn(node);
    }

    public void outAMinusOperator(AMinusOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusOperator(AMinusOperator node)
    {
        inAMinusOperator(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAMinusOperator(node);
    }

    public void inAPlusOperator(APlusOperator node)
    {
        defaultIn(node);
    }

    public void outAPlusOperator(APlusOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusOperator(APlusOperator node)
    {
        inAPlusOperator(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAPlusOperator(node);
    }

    public void inAMultOperator(AMultOperator node)
    {
        defaultIn(node);
    }

    public void outAMultOperator(AMultOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultOperator(AMultOperator node)
    {
        inAMultOperator(node);
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        outAMultOperator(node);
    }

    public void inADivOperator(ADivOperator node)
    {
        defaultIn(node);
    }

    public void outADivOperator(ADivOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivOperator(ADivOperator node)
    {
        inADivOperator(node);
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        outADivOperator(node);
    }

    public void inAAssignOperator(AAssignOperator node)
    {
        defaultIn(node);
    }

    public void outAAssignOperator(AAssignOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignOperator(AAssignOperator node)
    {
        inAAssignOperator(node);
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        outAAssignOperator(node);
    }

    public void inAEqualBoolOperator(AEqualBoolOperator node)
    {
        defaultIn(node);
    }

    public void outAEqualBoolOperator(AEqualBoolOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqualBoolOperator(AEqualBoolOperator node)
    {
        inAEqualBoolOperator(node);
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        outAEqualBoolOperator(node);
    }

    public void inANotEqualBoolOperator(ANotEqualBoolOperator node)
    {
        defaultIn(node);
    }

    public void outANotEqualBoolOperator(ANotEqualBoolOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotEqualBoolOperator(ANotEqualBoolOperator node)
    {
        inANotEqualBoolOperator(node);
        if(node.getNotEqual() != null)
        {
            node.getNotEqual().apply(this);
        }
        outANotEqualBoolOperator(node);
    }

    public void inALessEqualBoolOperator(ALessEqualBoolOperator node)
    {
        defaultIn(node);
    }

    public void outALessEqualBoolOperator(ALessEqualBoolOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessEqualBoolOperator(ALessEqualBoolOperator node)
    {
        inALessEqualBoolOperator(node);
        if(node.getLessEqual() != null)
        {
            node.getLessEqual().apply(this);
        }
        outALessEqualBoolOperator(node);
    }

    public void inAGreaterEqualBoolOperator(AGreaterEqualBoolOperator node)
    {
        defaultIn(node);
    }

    public void outAGreaterEqualBoolOperator(AGreaterEqualBoolOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterEqualBoolOperator(AGreaterEqualBoolOperator node)
    {
        inAGreaterEqualBoolOperator(node);
        if(node.getGreaterEqual() != null)
        {
            node.getGreaterEqual().apply(this);
        }
        outAGreaterEqualBoolOperator(node);
    }

    public void inAAndBoolOperator(AAndBoolOperator node)
    {
        defaultIn(node);
    }

    public void outAAndBoolOperator(AAndBoolOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndBoolOperator(AAndBoolOperator node)
    {
        inAAndBoolOperator(node);
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        outAAndBoolOperator(node);
    }

    public void inAOrBoolOperator(AOrBoolOperator node)
    {
        defaultIn(node);
    }

    public void outAOrBoolOperator(AOrBoolOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrBoolOperator(AOrBoolOperator node)
    {
        inAOrBoolOperator(node);
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        outAOrBoolOperator(node);
    }

    public void inALessBoolOperator(ALessBoolOperator node)
    {
        defaultIn(node);
    }

    public void outALessBoolOperator(ALessBoolOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessBoolOperator(ALessBoolOperator node)
    {
        inALessBoolOperator(node);
        if(node.getLess() != null)
        {
            node.getLess().apply(this);
        }
        outALessBoolOperator(node);
    }

    public void inAGreaterBoolOperator(AGreaterBoolOperator node)
    {
        defaultIn(node);
    }

    public void outAGreaterBoolOperator(AGreaterBoolOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterBoolOperator(AGreaterBoolOperator node)
    {
        inAGreaterBoolOperator(node);
        if(node.getGreater() != null)
        {
            node.getGreater().apply(this);
        }
        outAGreaterBoolOperator(node);
    }

    public void inANegationOperator(ANegationOperator node)
    {
        defaultIn(node);
    }

    public void outANegationOperator(ANegationOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegationOperator(ANegationOperator node)
    {
        inANegationOperator(node);
        if(node.getNegate() != null)
        {
            node.getNegate().apply(this);
        }
        outANegationOperator(node);
    }

    public void inABooleanLiteral(ABooleanLiteral node)
    {
        defaultIn(node);
    }

    public void outABooleanLiteral(ABooleanLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanLiteral(ABooleanLiteral node)
    {
        inABooleanLiteral(node);
        if(node.getBooleanLiteral() != null)
        {
            node.getBooleanLiteral().apply(this);
        }
        outABooleanLiteral(node);
    }

    public void inANumberLiteral(ANumberLiteral node)
    {
        defaultIn(node);
    }

    public void outANumberLiteral(ANumberLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumberLiteral(ANumberLiteral node)
    {
        inANumberLiteral(node);
        if(node.getNumberLiteral() != null)
        {
            node.getNumberLiteral().apply(this);
        }
        outANumberLiteral(node);
    }

    public void inAStringLiteral(AStringLiteral node)
    {
        defaultIn(node);
    }

    public void outAStringLiteral(AStringLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringLiteral(AStringLiteral node)
    {
        inAStringLiteral(node);
        if(node.getStringLiteral() != null)
        {
            node.getStringLiteral().apply(this);
        }
        outAStringLiteral(node);
    }

    public void inATrueBooleanLiteral(ATrueBooleanLiteral node)
    {
        defaultIn(node);
    }

    public void outATrueBooleanLiteral(ATrueBooleanLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrueBooleanLiteral(ATrueBooleanLiteral node)
    {
        inATrueBooleanLiteral(node);
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        outATrueBooleanLiteral(node);
    }

    public void inAFalseBooleanLiteral(AFalseBooleanLiteral node)
    {
        defaultIn(node);
    }

    public void outAFalseBooleanLiteral(AFalseBooleanLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalseBooleanLiteral(AFalseBooleanLiteral node)
    {
        inAFalseBooleanLiteral(node);
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAFalseBooleanLiteral(node);
    }
}
