/* This file was generated by SableCC (http://www.sablecc.org/). */

package simpleAdder.node;

import simpleAdder.analysis.*;

@SuppressWarnings("nls")
public final class AListVardecl extends PVardecl
{
    private TNew _new_;
    private TIdentifier _identifier_;
    private TEquals _equals_;
    private TBrackL _brackL_;
    private PValue _value_;
    private PListvariables _listvariables_;
    private TBrackR _brackR_;
    private TSemiC _semiC_;

    public AListVardecl()
    {
        // Constructor
    }

    public AListVardecl(
        @SuppressWarnings("hiding") TNew _new_,
        @SuppressWarnings("hiding") TIdentifier _identifier_,
        @SuppressWarnings("hiding") TEquals _equals_,
        @SuppressWarnings("hiding") TBrackL _brackL_,
        @SuppressWarnings("hiding") PValue _value_,
        @SuppressWarnings("hiding") PListvariables _listvariables_,
        @SuppressWarnings("hiding") TBrackR _brackR_,
        @SuppressWarnings("hiding") TSemiC _semiC_)
    {
        // Constructor
        setNew(_new_);

        setIdentifier(_identifier_);

        setEquals(_equals_);

        setBrackL(_brackL_);

        setValue(_value_);

        setListvariables(_listvariables_);

        setBrackR(_brackR_);

        setSemiC(_semiC_);

    }

    @Override
    public Object clone()
    {
        return new AListVardecl(
            cloneNode(this._new_),
            cloneNode(this._identifier_),
            cloneNode(this._equals_),
            cloneNode(this._brackL_),
            cloneNode(this._value_),
            cloneNode(this._listvariables_),
            cloneNode(this._brackR_),
            cloneNode(this._semiC_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAListVardecl(this);
    }

    public TNew getNew()
    {
        return this._new_;
    }

    public void setNew(TNew node)
    {
        if(this._new_ != null)
        {
            this._new_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._new_ = node;
    }

    public TIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    public TEquals getEquals()
    {
        return this._equals_;
    }

    public void setEquals(TEquals node)
    {
        if(this._equals_ != null)
        {
            this._equals_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._equals_ = node;
    }

    public TBrackL getBrackL()
    {
        return this._brackL_;
    }

    public void setBrackL(TBrackL node)
    {
        if(this._brackL_ != null)
        {
            this._brackL_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._brackL_ = node;
    }

    public PValue getValue()
    {
        return this._value_;
    }

    public void setValue(PValue node)
    {
        if(this._value_ != null)
        {
            this._value_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._value_ = node;
    }

    public PListvariables getListvariables()
    {
        return this._listvariables_;
    }

    public void setListvariables(PListvariables node)
    {
        if(this._listvariables_ != null)
        {
            this._listvariables_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._listvariables_ = node;
    }

    public TBrackR getBrackR()
    {
        return this._brackR_;
    }

    public void setBrackR(TBrackR node)
    {
        if(this._brackR_ != null)
        {
            this._brackR_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._brackR_ = node;
    }

    public TSemiC getSemiC()
    {
        return this._semiC_;
    }

    public void setSemiC(TSemiC node)
    {
        if(this._semiC_ != null)
        {
            this._semiC_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._semiC_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._new_)
            + toString(this._identifier_)
            + toString(this._equals_)
            + toString(this._brackL_)
            + toString(this._value_)
            + toString(this._listvariables_)
            + toString(this._brackR_)
            + toString(this._semiC_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._new_ == child)
        {
            this._new_ = null;
            return;
        }

        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        if(this._equals_ == child)
        {
            this._equals_ = null;
            return;
        }

        if(this._brackL_ == child)
        {
            this._brackL_ = null;
            return;
        }

        if(this._value_ == child)
        {
            this._value_ = null;
            return;
        }

        if(this._listvariables_ == child)
        {
            this._listvariables_ = null;
            return;
        }

        if(this._brackR_ == child)
        {
            this._brackR_ = null;
            return;
        }

        if(this._semiC_ == child)
        {
            this._semiC_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._new_ == oldChild)
        {
            setNew((TNew) newChild);
            return;
        }

        if(this._identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(this._equals_ == oldChild)
        {
            setEquals((TEquals) newChild);
            return;
        }

        if(this._brackL_ == oldChild)
        {
            setBrackL((TBrackL) newChild);
            return;
        }

        if(this._value_ == oldChild)
        {
            setValue((PValue) newChild);
            return;
        }

        if(this._listvariables_ == oldChild)
        {
            setListvariables((PListvariables) newChild);
            return;
        }

        if(this._brackR_ == oldChild)
        {
            setBrackR((TBrackR) newChild);
            return;
        }

        if(this._semiC_ == oldChild)
        {
            setSemiC((TSemiC) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
