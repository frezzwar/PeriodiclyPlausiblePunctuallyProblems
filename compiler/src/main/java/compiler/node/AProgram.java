/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.node;

import java.util.*;
import compiler.analysis.*;

@SuppressWarnings("nls")
public final class AProgram extends PProgram
{
    private TMain _main_;
    private TParL _parL_;
    private TParR _parR_;
    private TCurlyL _curlyL_;
    private final LinkedList<PDecl> _decl_ = new LinkedList<PDecl>();
    private TCurlyR _curlyR_;
    private final LinkedList<PFuncDecl> _funcDecl_ = new LinkedList<PFuncDecl>();

    public AProgram()
    {
        // Constructor
    }

    public AProgram(
        @SuppressWarnings("hiding") TMain _main_,
        @SuppressWarnings("hiding") TParL _parL_,
        @SuppressWarnings("hiding") TParR _parR_,
        @SuppressWarnings("hiding") TCurlyL _curlyL_,
        @SuppressWarnings("hiding") List<?> _decl_,
        @SuppressWarnings("hiding") TCurlyR _curlyR_,
        @SuppressWarnings("hiding") List<?> _funcDecl_)
    {
        // Constructor
        setMain(_main_);

        setParL(_parL_);

        setParR(_parR_);

        setCurlyL(_curlyL_);

        setDecl(_decl_);

        setCurlyR(_curlyR_);

        setFuncDecl(_funcDecl_);

    }

    @Override
    public Object clone()
    {
        return new AProgram(
            cloneNode(this._main_),
            cloneNode(this._parL_),
            cloneNode(this._parR_),
            cloneNode(this._curlyL_),
            cloneList(this._decl_),
            cloneNode(this._curlyR_),
            cloneList(this._funcDecl_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAProgram(this);
    }

    public TMain getMain()
    {
        return this._main_;
    }

    public void setMain(TMain node)
    {
        if(this._main_ != null)
        {
            this._main_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._main_ = node;
    }

    public TParL getParL()
    {
        return this._parL_;
    }

    public void setParL(TParL node)
    {
        if(this._parL_ != null)
        {
            this._parL_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parL_ = node;
    }

    public TParR getParR()
    {
        return this._parR_;
    }

    public void setParR(TParR node)
    {
        if(this._parR_ != null)
        {
            this._parR_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parR_ = node;
    }

    public TCurlyL getCurlyL()
    {
        return this._curlyL_;
    }

    public void setCurlyL(TCurlyL node)
    {
        if(this._curlyL_ != null)
        {
            this._curlyL_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._curlyL_ = node;
    }

    public LinkedList<PDecl> getDecl()
    {
        return this._decl_;
    }

    public void setDecl(List<?> list)
    {
        for(PDecl e : this._decl_)
        {
            e.parent(null);
        }
        this._decl_.clear();

        for(Object obj_e : list)
        {
            PDecl e = (PDecl) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._decl_.add(e);
        }
    }

    public TCurlyR getCurlyR()
    {
        return this._curlyR_;
    }

    public void setCurlyR(TCurlyR node)
    {
        if(this._curlyR_ != null)
        {
            this._curlyR_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._curlyR_ = node;
    }

    public LinkedList<PFuncDecl> getFuncDecl()
    {
        return this._funcDecl_;
    }

    public void setFuncDecl(List<?> list)
    {
        for(PFuncDecl e : this._funcDecl_)
        {
            e.parent(null);
        }
        this._funcDecl_.clear();

        for(Object obj_e : list)
        {
            PFuncDecl e = (PFuncDecl) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._funcDecl_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._main_)
            + toString(this._parL_)
            + toString(this._parR_)
            + toString(this._curlyL_)
            + toString(this._decl_)
            + toString(this._curlyR_)
            + toString(this._funcDecl_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._main_ == child)
        {
            this._main_ = null;
            return;
        }

        if(this._parL_ == child)
        {
            this._parL_ = null;
            return;
        }

        if(this._parR_ == child)
        {
            this._parR_ = null;
            return;
        }

        if(this._curlyL_ == child)
        {
            this._curlyL_ = null;
            return;
        }

        if(this._decl_.remove(child))
        {
            return;
        }

        if(this._curlyR_ == child)
        {
            this._curlyR_ = null;
            return;
        }

        if(this._funcDecl_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._main_ == oldChild)
        {
            setMain((TMain) newChild);
            return;
        }

        if(this._parL_ == oldChild)
        {
            setParL((TParL) newChild);
            return;
        }

        if(this._parR_ == oldChild)
        {
            setParR((TParR) newChild);
            return;
        }

        if(this._curlyL_ == oldChild)
        {
            setCurlyL((TCurlyL) newChild);
            return;
        }

        for(ListIterator<PDecl> i = this._decl_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PDecl) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._curlyR_ == oldChild)
        {
            setCurlyR((TCurlyR) newChild);
            return;
        }

        for(ListIterator<PFuncDecl> i = this._funcDecl_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PFuncDecl) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
