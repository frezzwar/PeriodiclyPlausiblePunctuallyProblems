/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.node;

import compiler.analysis.*;

@SuppressWarnings("nls")
public final class AEqualOpequate extends POpequate
{
    private POpequate _opequate_;
    private TEqual _equal_;
    private POpcompare _opcompare_;

    public AEqualOpequate()
    {
        // Constructor
    }

    public AEqualOpequate(
        @SuppressWarnings("hiding") POpequate _opequate_,
        @SuppressWarnings("hiding") TEqual _equal_,
        @SuppressWarnings("hiding") POpcompare _opcompare_)
    {
        // Constructor
        setOpequate(_opequate_);

        setEqual(_equal_);

        setOpcompare(_opcompare_);

    }

    @Override
    public Object clone()
    {
        return new AEqualOpequate(
            cloneNode(this._opequate_),
            cloneNode(this._equal_),
            cloneNode(this._opcompare_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAEqualOpequate(this);
    }

    public POpequate getOpequate()
    {
        return this._opequate_;
    }

    public void setOpequate(POpequate node)
    {
        if(this._opequate_ != null)
        {
            this._opequate_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._opequate_ = node;
    }

    public TEqual getEqual()
    {
        return this._equal_;
    }

    public void setEqual(TEqual node)
    {
        if(this._equal_ != null)
        {
            this._equal_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._equal_ = node;
    }

    public POpcompare getOpcompare()
    {
        return this._opcompare_;
    }

    public void setOpcompare(POpcompare node)
    {
        if(this._opcompare_ != null)
        {
            this._opcompare_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._opcompare_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._opequate_)
            + toString(this._equal_)
            + toString(this._opcompare_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._opequate_ == child)
        {
            this._opequate_ = null;
            return;
        }

        if(this._equal_ == child)
        {
            this._equal_ = null;
            return;
        }

        if(this._opcompare_ == child)
        {
            this._opcompare_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._opequate_ == oldChild)
        {
            setOpequate((POpequate) newChild);
            return;
        }

        if(this._equal_ == oldChild)
        {
            setEqual((TEqual) newChild);
            return;
        }

        if(this._opcompare_ == oldChild)
        {
            setOpcompare((POpcompare) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
