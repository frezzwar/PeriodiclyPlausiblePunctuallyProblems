/* This file was generated by SableCC (http://www.sablecc.org/). */

package simpleAdder.node;

import simpleAdder.analysis.*;

@SuppressWarnings("nls")
public final class ARepeatstructure extends PRepeatstructure
{
    private TForeach _foreach_;
    private TParL _parL_;
    private TIdentifier _left_;
    private TIn _in_;
    private TIdentifier _right_;
    private TParR _parR_;
    private TCurlyL _curlyL_;
    private PDecls _decls_;
    private TCurlyR _curlyR_;

    public ARepeatstructure()
    {
        // Constructor
    }

    public ARepeatstructure(
        @SuppressWarnings("hiding") TForeach _foreach_,
        @SuppressWarnings("hiding") TParL _parL_,
        @SuppressWarnings("hiding") TIdentifier _left_,
        @SuppressWarnings("hiding") TIn _in_,
        @SuppressWarnings("hiding") TIdentifier _right_,
        @SuppressWarnings("hiding") TParR _parR_,
        @SuppressWarnings("hiding") TCurlyL _curlyL_,
        @SuppressWarnings("hiding") PDecls _decls_,
        @SuppressWarnings("hiding") TCurlyR _curlyR_)
    {
        // Constructor
        setForeach(_foreach_);

        setParL(_parL_);

        setLeft(_left_);

        setIn(_in_);

        setRight(_right_);

        setParR(_parR_);

        setCurlyL(_curlyL_);

        setDecls(_decls_);

        setCurlyR(_curlyR_);

    }

    @Override
    public Object clone()
    {
        return new ARepeatstructure(
            cloneNode(this._foreach_),
            cloneNode(this._parL_),
            cloneNode(this._left_),
            cloneNode(this._in_),
            cloneNode(this._right_),
            cloneNode(this._parR_),
            cloneNode(this._curlyL_),
            cloneNode(this._decls_),
            cloneNode(this._curlyR_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseARepeatstructure(this);
    }

    public TForeach getForeach()
    {
        return this._foreach_;
    }

    public void setForeach(TForeach node)
    {
        if(this._foreach_ != null)
        {
            this._foreach_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._foreach_ = node;
    }

    public TParL getParL()
    {
        return this._parL_;
    }

    public void setParL(TParL node)
    {
        if(this._parL_ != null)
        {
            this._parL_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parL_ = node;
    }

    public TIdentifier getLeft()
    {
        return this._left_;
    }

    public void setLeft(TIdentifier node)
    {
        if(this._left_ != null)
        {
            this._left_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._left_ = node;
    }

    public TIn getIn()
    {
        return this._in_;
    }

    public void setIn(TIn node)
    {
        if(this._in_ != null)
        {
            this._in_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._in_ = node;
    }

    public TIdentifier getRight()
    {
        return this._right_;
    }

    public void setRight(TIdentifier node)
    {
        if(this._right_ != null)
        {
            this._right_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._right_ = node;
    }

    public TParR getParR()
    {
        return this._parR_;
    }

    public void setParR(TParR node)
    {
        if(this._parR_ != null)
        {
            this._parR_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parR_ = node;
    }

    public TCurlyL getCurlyL()
    {
        return this._curlyL_;
    }

    public void setCurlyL(TCurlyL node)
    {
        if(this._curlyL_ != null)
        {
            this._curlyL_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._curlyL_ = node;
    }

    public PDecls getDecls()
    {
        return this._decls_;
    }

    public void setDecls(PDecls node)
    {
        if(this._decls_ != null)
        {
            this._decls_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._decls_ = node;
    }

    public TCurlyR getCurlyR()
    {
        return this._curlyR_;
    }

    public void setCurlyR(TCurlyR node)
    {
        if(this._curlyR_ != null)
        {
            this._curlyR_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._curlyR_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._foreach_)
            + toString(this._parL_)
            + toString(this._left_)
            + toString(this._in_)
            + toString(this._right_)
            + toString(this._parR_)
            + toString(this._curlyL_)
            + toString(this._decls_)
            + toString(this._curlyR_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._foreach_ == child)
        {
            this._foreach_ = null;
            return;
        }

        if(this._parL_ == child)
        {
            this._parL_ = null;
            return;
        }

        if(this._left_ == child)
        {
            this._left_ = null;
            return;
        }

        if(this._in_ == child)
        {
            this._in_ = null;
            return;
        }

        if(this._right_ == child)
        {
            this._right_ = null;
            return;
        }

        if(this._parR_ == child)
        {
            this._parR_ = null;
            return;
        }

        if(this._curlyL_ == child)
        {
            this._curlyL_ = null;
            return;
        }

        if(this._decls_ == child)
        {
            this._decls_ = null;
            return;
        }

        if(this._curlyR_ == child)
        {
            this._curlyR_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._foreach_ == oldChild)
        {
            setForeach((TForeach) newChild);
            return;
        }

        if(this._parL_ == oldChild)
        {
            setParL((TParL) newChild);
            return;
        }

        if(this._left_ == oldChild)
        {
            setLeft((TIdentifier) newChild);
            return;
        }

        if(this._in_ == oldChild)
        {
            setIn((TIn) newChild);
            return;
        }

        if(this._right_ == oldChild)
        {
            setRight((TIdentifier) newChild);
            return;
        }

        if(this._parR_ == oldChild)
        {
            setParR((TParR) newChild);
            return;
        }

        if(this._curlyL_ == oldChild)
        {
            setCurlyL((TCurlyL) newChild);
            return;
        }

        if(this._decls_ == oldChild)
        {
            setDecls((PDecls) newChild);
            return;
        }

        if(this._curlyR_ == oldChild)
        {
            setCurlyR((TCurlyR) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
