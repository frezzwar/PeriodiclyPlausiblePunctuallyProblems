/* This file was generated by SableCC (http://www.sablecc.org/). */

package simpleAdder.node;

import simpleAdder.analysis.*;

@SuppressWarnings("nls")
public final class AOption1Actionthink extends PActionthink
{
    private TThink _think_;
    private TParL _parL_;
    private PPrintstmt _printstmt_;
    private TParR _parR_;
    private TSemiC _semiC_;

    public AOption1Actionthink()
    {
        // Constructor
    }

    public AOption1Actionthink(
        @SuppressWarnings("hiding") TThink _think_,
        @SuppressWarnings("hiding") TParL _parL_,
        @SuppressWarnings("hiding") PPrintstmt _printstmt_,
        @SuppressWarnings("hiding") TParR _parR_,
        @SuppressWarnings("hiding") TSemiC _semiC_)
    {
        // Constructor
        setThink(_think_);

        setParL(_parL_);

        setPrintstmt(_printstmt_);

        setParR(_parR_);

        setSemiC(_semiC_);

    }

    @Override
    public Object clone()
    {
        return new AOption1Actionthink(
            cloneNode(this._think_),
            cloneNode(this._parL_),
            cloneNode(this._printstmt_),
            cloneNode(this._parR_),
            cloneNode(this._semiC_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAOption1Actionthink(this);
    }

    public TThink getThink()
    {
        return this._think_;
    }

    public void setThink(TThink node)
    {
        if(this._think_ != null)
        {
            this._think_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._think_ = node;
    }

    public TParL getParL()
    {
        return this._parL_;
    }

    public void setParL(TParL node)
    {
        if(this._parL_ != null)
        {
            this._parL_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parL_ = node;
    }

    public PPrintstmt getPrintstmt()
    {
        return this._printstmt_;
    }

    public void setPrintstmt(PPrintstmt node)
    {
        if(this._printstmt_ != null)
        {
            this._printstmt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._printstmt_ = node;
    }

    public TParR getParR()
    {
        return this._parR_;
    }

    public void setParR(TParR node)
    {
        if(this._parR_ != null)
        {
            this._parR_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parR_ = node;
    }

    public TSemiC getSemiC()
    {
        return this._semiC_;
    }

    public void setSemiC(TSemiC node)
    {
        if(this._semiC_ != null)
        {
            this._semiC_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._semiC_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._think_)
            + toString(this._parL_)
            + toString(this._printstmt_)
            + toString(this._parR_)
            + toString(this._semiC_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._think_ == child)
        {
            this._think_ = null;
            return;
        }

        if(this._parL_ == child)
        {
            this._parL_ = null;
            return;
        }

        if(this._printstmt_ == child)
        {
            this._printstmt_ = null;
            return;
        }

        if(this._parR_ == child)
        {
            this._parR_ = null;
            return;
        }

        if(this._semiC_ == child)
        {
            this._semiC_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._think_ == oldChild)
        {
            setThink((TThink) newChild);
            return;
        }

        if(this._parL_ == oldChild)
        {
            setParL((TParL) newChild);
            return;
        }

        if(this._printstmt_ == oldChild)
        {
            setPrintstmt((PPrintstmt) newChild);
            return;
        }

        if(this._parR_ == oldChild)
        {
            setParR((TParR) newChild);
            return;
        }

        if(this._semiC_ == oldChild)
        {
            setSemiC((TSemiC) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
