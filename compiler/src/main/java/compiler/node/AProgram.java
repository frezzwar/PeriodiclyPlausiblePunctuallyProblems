/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.node;

import java.util.*;
import compiler.analysis.*;

@SuppressWarnings("nls")
public final class AProgram extends PProgram
{
    private final LinkedList<PGlobalDecl> _globalDecl_ = new LinkedList<PGlobalDecl>();
    private TMain _main_;
    private PBody _body_;
    private final LinkedList<PFuncDecl> _funcDecl_ = new LinkedList<PFuncDecl>();
    private PEventDecl _eventDecl_;

    public AProgram()
    {
        // Constructor
    }

    public AProgram(
        @SuppressWarnings("hiding") List<?> _globalDecl_,
        @SuppressWarnings("hiding") TMain _main_,
        @SuppressWarnings("hiding") PBody _body_,
        @SuppressWarnings("hiding") List<?> _funcDecl_,
        @SuppressWarnings("hiding") PEventDecl _eventDecl_)
    {
        // Constructor
        setGlobalDecl(_globalDecl_);

        setMain(_main_);

        setBody(_body_);

        setFuncDecl(_funcDecl_);

        setEventDecl(_eventDecl_);

    }

    @Override
    public Object clone()
    {
        return new AProgram(
            cloneList(this._globalDecl_),
            cloneNode(this._main_),
            cloneNode(this._body_),
            cloneList(this._funcDecl_),
            cloneNode(this._eventDecl_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAProgram(this);
    }

    public LinkedList<PGlobalDecl> getGlobalDecl()
    {
        return this._globalDecl_;
    }

    public void setGlobalDecl(List<?> list)
    {
        for(PGlobalDecl e : this._globalDecl_)
        {
            e.parent(null);
        }
        this._globalDecl_.clear();

        for(Object obj_e : list)
        {
            PGlobalDecl e = (PGlobalDecl) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._globalDecl_.add(e);
        }
    }

    public TMain getMain()
    {
        return this._main_;
    }

    public void setMain(TMain node)
    {
        if(this._main_ != null)
        {
            this._main_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._main_ = node;
    }

    public PBody getBody()
    {
        return this._body_;
    }

    public void setBody(PBody node)
    {
        if(this._body_ != null)
        {
            this._body_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._body_ = node;
    }

    public LinkedList<PFuncDecl> getFuncDecl()
    {
        return this._funcDecl_;
    }

    public void setFuncDecl(List<?> list)
    {
        for(PFuncDecl e : this._funcDecl_)
        {
            e.parent(null);
        }
        this._funcDecl_.clear();

        for(Object obj_e : list)
        {
            PFuncDecl e = (PFuncDecl) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._funcDecl_.add(e);
        }
    }

    public PEventDecl getEventDecl()
    {
        return this._eventDecl_;
    }

    public void setEventDecl(PEventDecl node)
    {
        if(this._eventDecl_ != null)
        {
            this._eventDecl_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._eventDecl_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._globalDecl_)
            + toString(this._main_)
            + toString(this._body_)
            + toString(this._funcDecl_)
            + toString(this._eventDecl_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._globalDecl_.remove(child))
        {
            return;
        }

        if(this._main_ == child)
        {
            this._main_ = null;
            return;
        }

        if(this._body_ == child)
        {
            this._body_ = null;
            return;
        }

        if(this._funcDecl_.remove(child))
        {
            return;
        }

        if(this._eventDecl_ == child)
        {
            this._eventDecl_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PGlobalDecl> i = this._globalDecl_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PGlobalDecl) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._main_ == oldChild)
        {
            setMain((TMain) newChild);
            return;
        }

        if(this._body_ == oldChild)
        {
            setBody((PBody) newChild);
            return;
        }

        for(ListIterator<PFuncDecl> i = this._funcDecl_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PFuncDecl) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._eventDecl_ == oldChild)
        {
            setEventDecl((PEventDecl) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
