/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.node;

import compiler.analysis.*;

@SuppressWarnings("nls")
public final class AGridDecl extends PGridDecl
{
    private TNew _new_;
    private TIdentifier _identifier_;
    private TAssign _assign_;
    private TGrid _grid_;
    private TParL _parL_;
    private PValue _int1_;
    private TComma _comma_;
    private PValue _int2_;
    private TParR _parR_;
    private TSemiC _semiC_;

    public AGridDecl()
    {
        // Constructor
    }

    public AGridDecl(
        @SuppressWarnings("hiding") TNew _new_,
        @SuppressWarnings("hiding") TIdentifier _identifier_,
        @SuppressWarnings("hiding") TAssign _assign_,
        @SuppressWarnings("hiding") TGrid _grid_,
        @SuppressWarnings("hiding") TParL _parL_,
        @SuppressWarnings("hiding") PValue _int1_,
        @SuppressWarnings("hiding") TComma _comma_,
        @SuppressWarnings("hiding") PValue _int2_,
        @SuppressWarnings("hiding") TParR _parR_,
        @SuppressWarnings("hiding") TSemiC _semiC_)
    {
        // Constructor
        setNew(_new_);

        setIdentifier(_identifier_);

        setAssign(_assign_);

        setGrid(_grid_);

        setParL(_parL_);

        setInt1(_int1_);

        setComma(_comma_);

        setInt2(_int2_);

        setParR(_parR_);

        setSemiC(_semiC_);

    }

    @Override
    public Object clone()
    {
        return new AGridDecl(
            cloneNode(this._new_),
            cloneNode(this._identifier_),
            cloneNode(this._assign_),
            cloneNode(this._grid_),
            cloneNode(this._parL_),
            cloneNode(this._int1_),
            cloneNode(this._comma_),
            cloneNode(this._int2_),
            cloneNode(this._parR_),
            cloneNode(this._semiC_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAGridDecl(this);
    }

    public TNew getNew()
    {
        return this._new_;
    }

    public void setNew(TNew node)
    {
        if(this._new_ != null)
        {
            this._new_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._new_ = node;
    }

    public TIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    public TAssign getAssign()
    {
        return this._assign_;
    }

    public void setAssign(TAssign node)
    {
        if(this._assign_ != null)
        {
            this._assign_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._assign_ = node;
    }

    public TGrid getGrid()
    {
        return this._grid_;
    }

    public void setGrid(TGrid node)
    {
        if(this._grid_ != null)
        {
            this._grid_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._grid_ = node;
    }

    public TParL getParL()
    {
        return this._parL_;
    }

    public void setParL(TParL node)
    {
        if(this._parL_ != null)
        {
            this._parL_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parL_ = node;
    }

    public PValue getInt1()
    {
        return this._int1_;
    }

    public void setInt1(PValue node)
    {
        if(this._int1_ != null)
        {
            this._int1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._int1_ = node;
    }

    public TComma getComma()
    {
        return this._comma_;
    }

    public void setComma(TComma node)
    {
        if(this._comma_ != null)
        {
            this._comma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comma_ = node;
    }

    public PValue getInt2()
    {
        return this._int2_;
    }

    public void setInt2(PValue node)
    {
        if(this._int2_ != null)
        {
            this._int2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._int2_ = node;
    }

    public TParR getParR()
    {
        return this._parR_;
    }

    public void setParR(TParR node)
    {
        if(this._parR_ != null)
        {
            this._parR_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parR_ = node;
    }

    public TSemiC getSemiC()
    {
        return this._semiC_;
    }

    public void setSemiC(TSemiC node)
    {
        if(this._semiC_ != null)
        {
            this._semiC_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._semiC_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._new_)
            + toString(this._identifier_)
            + toString(this._assign_)
            + toString(this._grid_)
            + toString(this._parL_)
            + toString(this._int1_)
            + toString(this._comma_)
            + toString(this._int2_)
            + toString(this._parR_)
            + toString(this._semiC_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._new_ == child)
        {
            this._new_ = null;
            return;
        }

        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        if(this._assign_ == child)
        {
            this._assign_ = null;
            return;
        }

        if(this._grid_ == child)
        {
            this._grid_ = null;
            return;
        }

        if(this._parL_ == child)
        {
            this._parL_ = null;
            return;
        }

        if(this._int1_ == child)
        {
            this._int1_ = null;
            return;
        }

        if(this._comma_ == child)
        {
            this._comma_ = null;
            return;
        }

        if(this._int2_ == child)
        {
            this._int2_ = null;
            return;
        }

        if(this._parR_ == child)
        {
            this._parR_ = null;
            return;
        }

        if(this._semiC_ == child)
        {
            this._semiC_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._new_ == oldChild)
        {
            setNew((TNew) newChild);
            return;
        }

        if(this._identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(this._assign_ == oldChild)
        {
            setAssign((TAssign) newChild);
            return;
        }

        if(this._grid_ == oldChild)
        {
            setGrid((TGrid) newChild);
            return;
        }

        if(this._parL_ == oldChild)
        {
            setParL((TParL) newChild);
            return;
        }

        if(this._int1_ == oldChild)
        {
            setInt1((PValue) newChild);
            return;
        }

        if(this._comma_ == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        if(this._int2_ == oldChild)
        {
            setInt2((PValue) newChild);
            return;
        }

        if(this._parR_ == oldChild)
        {
            setParR((TParR) newChild);
            return;
        }

        if(this._semiC_ == oldChild)
        {
            setSemiC((TSemiC) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
