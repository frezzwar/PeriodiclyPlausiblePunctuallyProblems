/* This file was generated by SableCC (http://www.sablecc.org/). */

package simpleAdder.node;

import simpleAdder.analysis.*;

@SuppressWarnings("nls")
public final class AOpcompare3Opcompare extends POpcompare
{
    private POpcompare _opcompare_;
    private TLessEqual _lessEqual_;
    private PValue _value_;

    public AOpcompare3Opcompare()
    {
        // Constructor
    }

    public AOpcompare3Opcompare(
        @SuppressWarnings("hiding") POpcompare _opcompare_,
        @SuppressWarnings("hiding") TLessEqual _lessEqual_,
        @SuppressWarnings("hiding") PValue _value_)
    {
        // Constructor
        setOpcompare(_opcompare_);

        setLessEqual(_lessEqual_);

        setValue(_value_);

    }

    @Override
    public Object clone()
    {
        return new AOpcompare3Opcompare(
            cloneNode(this._opcompare_),
            cloneNode(this._lessEqual_),
            cloneNode(this._value_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAOpcompare3Opcompare(this);
    }

    public POpcompare getOpcompare()
    {
        return this._opcompare_;
    }

    public void setOpcompare(POpcompare node)
    {
        if(this._opcompare_ != null)
        {
            this._opcompare_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._opcompare_ = node;
    }

    public TLessEqual getLessEqual()
    {
        return this._lessEqual_;
    }

    public void setLessEqual(TLessEqual node)
    {
        if(this._lessEqual_ != null)
        {
            this._lessEqual_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lessEqual_ = node;
    }

    public PValue getValue()
    {
        return this._value_;
    }

    public void setValue(PValue node)
    {
        if(this._value_ != null)
        {
            this._value_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._value_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._opcompare_)
            + toString(this._lessEqual_)
            + toString(this._value_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._opcompare_ == child)
        {
            this._opcompare_ = null;
            return;
        }

        if(this._lessEqual_ == child)
        {
            this._lessEqual_ = null;
            return;
        }

        if(this._value_ == child)
        {
            this._value_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._opcompare_ == oldChild)
        {
            setOpcompare((POpcompare) newChild);
            return;
        }

        if(this._lessEqual_ == oldChild)
        {
            setLessEqual((TLessEqual) newChild);
            return;
        }

        if(this._value_ == oldChild)
        {
            setValue((PValue) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
