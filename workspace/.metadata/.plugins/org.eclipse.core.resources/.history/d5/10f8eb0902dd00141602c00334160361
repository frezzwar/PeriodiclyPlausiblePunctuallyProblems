/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.parser;

import compiler.lexer.*;
import compiler.node.*;
import compiler.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AProgram */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AAdecls1Decls */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list, false);
            }
            break;
            case 2: /* reduce AAdecls2Decls */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce AAdecls3Decls */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list, false);
            }
            break;
            case 4: /* reduce AAdecls4Decls */
            {
                ArrayList<Object> list = new4();
                push(goTo(1), list, false);
            }
            break;
            case 5: /* reduce AAdecls5Decls */
            {
                ArrayList<Object> list = new5();
                push(goTo(1), list, false);
            }
            break;
            case 6: /* reduce AAdecls6Decls */
            {
                ArrayList<Object> list = new6();
                push(goTo(1), list, false);
            }
            break;
            case 7: /* reduce AAdecls7Decls */
            {
                ArrayList<Object> list = new7();
                push(goTo(1), list, false);
            }
            break;
            case 8: /* reduce AAdecls8Decls */
            {
                ArrayList<Object> list = new8();
                push(goTo(1), list, false);
            }
            break;
            case 9: /* reduce AVariableDeclarationDecl */
            {
                ArrayList<Object> list = new9();
                push(goTo(2), list, false);
            }
            break;
            case 10: /* reduce AFunctionDeclarationDecl */
            {
                ArrayList<Object> list = new10();
                push(goTo(2), list, false);
            }
            break;
            case 11: /* reduce AControlStatementsDecl */
            {
                ArrayList<Object> list = new11();
                push(goTo(2), list, false);
            }
            break;
            case 12: /* reduce AAssignDecl */
            {
                ArrayList<Object> list = new12();
                push(goTo(2), list, false);
            }
            break;
            case 13: /* reduce AAvariabledeclaration1VariableDeclaration */
            {
                ArrayList<Object> list = new13();
                push(goTo(3), list, false);
            }
            break;
            case 14: /* reduce AAvariabledeclaration2VariableDeclaration */
            {
                ArrayList<Object> list = new14();
                push(goTo(3), list, false);
            }
            break;
            case 15: /* reduce ASingleVariableTypes */
            {
                ArrayList<Object> list = new15();
                push(goTo(4), list, false);
            }
            break;
            case 16: /* reduce AAlistvariabletypes1VariableTypes */
            {
                ArrayList<Object> list = new16();
                push(goTo(4), list, false);
            }
            break;
            case 17: /* reduce AAlistvariabletypes2VariableTypes */
            {
                ArrayList<Object> list = new17();
                push(goTo(4), list, false);
            }
            break;
            case 18: /* reduce AVariableTail */
            {
                ArrayList<Object> list = new18();
                push(goTo(5), list, false);
            }
            break;
            case 19: /* reduce AListVarTail */
            {
                ArrayList<Object> list = new19();
                push(goTo(6), list, false);
            }
            break;
            case 20: /* reduce AAcallparams1CallParams */
            {
                ArrayList<Object> list = new20();
                push(goTo(7), list, false);
            }
            break;
            case 21: /* reduce AAcallparams2CallParams */
            {
                ArrayList<Object> list = new21();
                push(goTo(7), list, false);
            }
            break;
            case 22: /* reduce ACallParamsTail */
            {
                ArrayList<Object> list = new22();
                push(goTo(8), list, false);
            }
            break;
            case 23: /* reduce AFunctionDeclaration */
            {
                ArrayList<Object> list = new23();
                push(goTo(9), list, false);
            }
            break;
            case 24: /* reduce AReturnValue */
            {
                ArrayList<Object> list = new24();
                push(goTo(10), list, false);
            }
            break;
            case 25: /* reduce AAparams1Params */
            {
                ArrayList<Object> list = new25();
                push(goTo(11), list, false);
            }
            break;
            case 26: /* reduce AAparams2Params */
            {
                ArrayList<Object> list = new26();
                push(goTo(11), list, false);
            }
            break;
            case 27: /* reduce AParamsTail */
            {
                ArrayList<Object> list = new27();
                push(goTo(12), list, false);
            }
            break;
            case 28: /* reduce AWhileControlStatments */
            {
                ArrayList<Object> list = new28();
                push(goTo(13), list, false);
            }
            break;
            case 29: /* reduce AArepeatcontrolstatments1ControlStatments */
            {
                ArrayList<Object> list = new29();
                push(goTo(13), list, false);
            }
            break;
            case 30: /* reduce AArepeatcontrolstatments2ControlStatments */
            {
                ArrayList<Object> list = new30();
                push(goTo(13), list, false);
            }
            break;
            case 31: /* reduce AForeachControlStatments */
            {
                ArrayList<Object> list = new31();
                push(goTo(13), list, false);
            }
            break;
            case 32: /* reduce AAifstructurecontrolstatments1ControlStatments */
            {
                ArrayList<Object> list = new32();
                push(goTo(13), list, false);
            }
            break;
            case 33: /* reduce AAifstructurecontrolstatments2ControlStatments */
            {
                ArrayList<Object> list = new33();
                push(goTo(13), list, false);
            }
            break;
            case 34: /* reduce AElseElsestructure */
            {
                ArrayList<Object> list = new34();
                push(goTo(14), list, false);
            }
            break;
            case 35: /* reduce AAifelseelsestructure1Elsestructure */
            {
                ArrayList<Object> list = new35();
                push(goTo(14), list, false);
            }
            break;
            case 36: /* reduce AAifelseelsestructure2Elsestructure */
            {
                ArrayList<Object> list = new36();
                push(goTo(14), list, false);
            }
            break;
            case 37: /* reduce AAssignLeftParam */
            {
                ArrayList<Object> list = new37();
                push(goTo(15), list, false);
            }
            break;
            case 38: /* reduce AVariableLeftParam */
            {
                ArrayList<Object> list = new38();
                push(goTo(15), list, false);
            }
            break;
            case 39: /* reduce ARightParam */
            {
                ArrayList<Object> list = new39();
                push(goTo(16), list, false);
            }
            break;
            case 40: /* reduce AAbody1Body */
            {
                ArrayList<Object> list = new40();
                push(goTo(17), list, false);
            }
            break;
            case 41: /* reduce AAbody2Body */
            {
                ArrayList<Object> list = new41();
                push(goTo(17), list, false);
            }
            break;
            case 42: /* reduce AEqualsExpr */
            {
                ArrayList<Object> list = new42();
                push(goTo(18), list, false);
            }
            break;
            case 43: /* reduce AIncrementExpr */
            {
                ArrayList<Object> list = new43();
                push(goTo(18), list, false);
            }
            break;
            case 44: /* reduce ADecrementExpr */
            {
                ArrayList<Object> list = new44();
                push(goTo(18), list, false);
            }
            break;
            case 45: /* reduce AOrExpr */
            {
                ArrayList<Object> list = new45();
                push(goTo(18), list, false);
            }
            break;
            case 46: /* reduce AOrOpor */
            {
                ArrayList<Object> list = new46();
                push(goTo(19), list, false);
            }
            break;
            case 47: /* reduce AAndOpor */
            {
                ArrayList<Object> list = new47();
                push(goTo(19), list, false);
            }
            break;
            case 48: /* reduce AAndOpand */
            {
                ArrayList<Object> list = new48();
                push(goTo(20), list, false);
            }
            break;
            case 49: /* reduce AEquateOpand */
            {
                ArrayList<Object> list = new49();
                push(goTo(20), list, false);
            }
            break;
            case 50: /* reduce AEqualOpequate */
            {
                ArrayList<Object> list = new50();
                push(goTo(21), list, false);
            }
            break;
            case 51: /* reduce ANegateOpequate */
            {
                ArrayList<Object> list = new51();
                push(goTo(21), list, false);
            }
            break;
            case 52: /* reduce ACompareOpequate */
            {
                ArrayList<Object> list = new52();
                push(goTo(21), list, false);
            }
            break;
            case 53: /* reduce ALessOpcompare */
            {
                ArrayList<Object> list = new53();
                push(goTo(22), list, false);
            }
            break;
            case 54: /* reduce AGreaterOpcompare */
            {
                ArrayList<Object> list = new54();
                push(goTo(22), list, false);
            }
            break;
            case 55: /* reduce ALessEqualOpcompare */
            {
                ArrayList<Object> list = new55();
                push(goTo(22), list, false);
            }
            break;
            case 56: /* reduce AGreaterEqualOpcompare */
            {
                ArrayList<Object> list = new56();
                push(goTo(22), list, false);
            }
            break;
            case 57: /* reduce AAddOpcompare */
            {
                ArrayList<Object> list = new57();
                push(goTo(22), list, false);
            }
            break;
            case 58: /* reduce APlusOpadd */
            {
                ArrayList<Object> list = new58();
                push(goTo(23), list, false);
            }
            break;
            case 59: /* reduce AMinusOpadd */
            {
                ArrayList<Object> list = new59();
                push(goTo(23), list, false);
            }
            break;
            case 60: /* reduce AMultOpadd */
            {
                ArrayList<Object> list = new60();
                push(goTo(23), list, false);
            }
            break;
            case 61: /* reduce AMultOpmult */
            {
                ArrayList<Object> list = new61();
                push(goTo(24), list, false);
            }
            break;
            case 62: /* reduce ADivOpmult */
            {
                ArrayList<Object> list = new62();
                push(goTo(24), list, false);
            }
            break;
            case 63: /* reduce AUnaryOpmult */
            {
                ArrayList<Object> list = new63();
                push(goTo(24), list, false);
            }
            break;
            case 64: /* reduce AMinusvalueOpunary */
            {
                ArrayList<Object> list = new64();
                push(goTo(25), list, false);
            }
            break;
            case 65: /* reduce AValueOpunary */
            {
                ArrayList<Object> list = new65();
                push(goTo(25), list, false);
            }
            break;
            case 66: /* reduce AAvarnamevalue1Value */
            {
                ArrayList<Object> list = new66();
                push(goTo(26), list, false);
            }
            break;
            case 67: /* reduce AAvarnamevalue2Value */
            {
                ArrayList<Object> list = new67();
                push(goTo(26), list, false);
            }
            break;
            case 68: /* reduce ALiteralValue */
            {
                ArrayList<Object> list = new68();
                push(goTo(26), list, false);
            }
            break;
            case 69: /* reduce ARndValue */
            {
                ArrayList<Object> list = new69();
                push(goTo(26), list, false);
            }
            break;
            case 70: /* reduce AAfunctioncall1FunctionCall */
            {
                ArrayList<Object> list = new70();
                push(goTo(27), list, false);
            }
            break;
            case 71: /* reduce AAfunctioncall2FunctionCall */
            {
                ArrayList<Object> list = new71();
                push(goTo(27), list, false);
            }
            break;
            case 72: /* reduce AAfunctioncall3FunctionCall */
            {
                ArrayList<Object> list = new72();
                push(goTo(27), list, false);
            }
            break;
            case 73: /* reduce AAfunctioncall4FunctionCall */
            {
                ArrayList<Object> list = new73();
                push(goTo(27), list, false);
            }
            break;
            case 74: /* reduce AAvarname1Varname */
            {
                ArrayList<Object> list = new74();
                push(goTo(28), list, false);
            }
            break;
            case 75: /* reduce AAvarname2Varname */
            {
                ArrayList<Object> list = new75();
                push(goTo(28), list, false);
            }
            break;
            case 76: /* reduce AIdlist */
            {
                ArrayList<Object> list = new76();
                push(goTo(29), list, false);
            }
            break;
            case 77: /* reduce ALessEqualCompareToken */
            {
                ArrayList<Object> list = new77();
                push(goTo(30), list, false);
            }
            break;
            case 78: /* reduce ALessCompareToken */
            {
                ArrayList<Object> list = new78();
                push(goTo(30), list, false);
            }
            break;
            case 79: /* reduce AGreaterEqualCompareToken */
            {
                ArrayList<Object> list = new79();
                push(goTo(30), list, false);
            }
            break;
            case 80: /* reduce AGreaterCompareToken */
            {
                ArrayList<Object> list = new80();
                push(goTo(30), list, false);
            }
            break;
            case 81: /* reduce AMinusOperator */
            {
                ArrayList<Object> list = new81();
                push(goTo(31), list, false);
            }
            break;
            case 82: /* reduce APlusOperator */
            {
                ArrayList<Object> list = new82();
                push(goTo(31), list, false);
            }
            break;
            case 83: /* reduce AMultOperator */
            {
                ArrayList<Object> list = new83();
                push(goTo(31), list, false);
            }
            break;
            case 84: /* reduce ADivOperator */
            {
                ArrayList<Object> list = new84();
                push(goTo(31), list, false);
            }
            break;
            case 85: /* reduce AEqualBoolOperator */
            {
                ArrayList<Object> list = new85();
                push(goTo(32), list, false);
            }
            break;
            case 86: /* reduce ALessEqualBoolOperator */
            {
                ArrayList<Object> list = new86();
                push(goTo(32), list, false);
            }
            break;
            case 87: /* reduce AGreaterEqualBoolOperator */
            {
                ArrayList<Object> list = new87();
                push(goTo(32), list, false);
            }
            break;
            case 88: /* reduce ANegateBoolOperator */
            {
                ArrayList<Object> list = new88();
                push(goTo(32), list, false);
            }
            break;
            case 89: /* reduce AAndBoolOperator */
            {
                ArrayList<Object> list = new89();
                push(goTo(32), list, false);
            }
            break;
            case 90: /* reduce AOrBoolOperator */
            {
                ArrayList<Object> list = new90();
                push(goTo(32), list, false);
            }
            break;
            case 91: /* reduce ALessBoolOperator */
            {
                ArrayList<Object> list = new91();
                push(goTo(32), list, false);
            }
            break;
            case 92: /* reduce AGreaterBoolOperator */
            {
                ArrayList<Object> list = new92();
                push(goTo(32), list, false);
            }
            break;
            case 93: /* reduce ARnd */
            {
                ArrayList<Object> list = new93();
                push(goTo(33), list, false);
            }
            break;
            case 94: /* reduce ABooleanLiteralLiteral */
            {
                ArrayList<Object> list = new94();
                push(goTo(34), list, false);
            }
            break;
            case 95: /* reduce AIntegerLiteralLiteral */
            {
                ArrayList<Object> list = new95();
                push(goTo(34), list, false);
            }
            break;
            case 96: /* reduce ADoubleLiteralLiteral */
            {
                ArrayList<Object> list = new96();
                push(goTo(34), list, false);
            }
            break;
            case 97: /* reduce AStringLiteralLiteral */
            {
                ArrayList<Object> list = new97();
                push(goTo(34), list, false);
            }
            break;
            case 98: /* reduce ATrueBooleanLiteral */
            {
                ArrayList<Object> list = new98();
                push(goTo(35), list, false);
            }
            break;
            case 99: /* reduce AFalseBooleanLiteral */
            {
                ArrayList<Object> list = new99();
                push(goTo(35), list, false);
            }
            break;
            case 100: /* reduce ATerminal$Decls */
            {
                ArrayList<Object> list = new100();
                push(goTo(36), list, true);
            }
            break;
            case 101: /* reduce ANonTerminal$Decls */
            {
                ArrayList<Object> list = new101();
                push(goTo(36), list, true);
            }
            break;
            case 102: /* reduce ATerminal$Decl */
            {
                ArrayList<Object> list = new102();
                push(goTo(37), list, true);
            }
            break;
            case 103: /* reduce ANonTerminal$Decl */
            {
                ArrayList<Object> list = new103();
                push(goTo(37), list, true);
            }
            break;
            case 104: /* reduce ATerminal$VariableTail */
            {
                ArrayList<Object> list = new104();
                push(goTo(38), list, true);
            }
            break;
            case 105: /* reduce ANonTerminal$VariableTail */
            {
                ArrayList<Object> list = new105();
                push(goTo(38), list, true);
            }
            break;
            case 106: /* reduce ATerminal$ListVarTail */
            {
                ArrayList<Object> list = new106();
                push(goTo(39), list, true);
            }
            break;
            case 107: /* reduce ANonTerminal$ListVarTail */
            {
                ArrayList<Object> list = new107();
                push(goTo(39), list, true);
            }
            break;
            case 108: /* reduce ATerminal$CallParamsTail */
            {
                ArrayList<Object> list = new108();
                push(goTo(40), list, true);
            }
            break;
            case 109: /* reduce ANonTerminal$CallParamsTail */
            {
                ArrayList<Object> list = new109();
                push(goTo(40), list, true);
            }
            break;
            case 110: /* reduce ATerminal$ParamsTail */
            {
                ArrayList<Object> list = new110();
                push(goTo(41), list, true);
            }
            break;
            case 111: /* reduce ANonTerminal$ParamsTail */
            {
                ArrayList<Object> list = new111();
                push(goTo(41), list, true);
            }
            break;
            case 112: /* reduce ATerminal$Idlist */
            {
                ArrayList<Object> list = new112();
                push(goTo(42), list, true);
            }
            break;
            case 113: /* reduce ANonTerminal$Idlist */
            {
                ArrayList<Object> list = new113();
                push(goTo(42), list, true);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AProgram */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pprogramNode1 = new AProgram(listNode3);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAdecls1Decls */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecls pdeclsNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TParL tparlNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TParR tparrNode5;
        TCurlyL tcurlylNode6;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode8 = null;
        TCurlyR tcurlyrNode9;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tparlNode3 = (TParL)nodeArrayList2.get(0);
        tparrNode5 = (TParR)nodeArrayList3.get(0);
        tcurlylNode6 = (TCurlyL)nodeArrayList4.get(0);
        {
            // Block
        }
        tcurlyrNode9 = (TCurlyR)nodeArrayList5.get(0);

        pdeclsNode1 = new ADecls(tidentifierNode2, tparlNode3, null, tparrNode5, tcurlylNode6, listNode7, null, tcurlyrNode9);
        }
	nodeList.add(pdeclsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAdecls2Decls */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecls pdeclsNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TParL tparlNode3;
        PParams pparamsNode4;
        TParR tparrNode5;
        TCurlyL tcurlylNode6;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode8 = null;
        TCurlyR tcurlyrNode9;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tparlNode3 = (TParL)nodeArrayList2.get(0);
        pparamsNode4 = (PParams)nodeArrayList3.get(0);
        tparrNode5 = (TParR)nodeArrayList4.get(0);
        tcurlylNode6 = (TCurlyL)nodeArrayList5.get(0);
        {
            // Block
        }
        tcurlyrNode9 = (TCurlyR)nodeArrayList6.get(0);

        pdeclsNode1 = new ADecls(tidentifierNode2, tparlNode3, pparamsNode4, tparrNode5, tcurlylNode6, listNode7, null, tcurlyrNode9);
        }
	nodeList.add(pdeclsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAdecls3Decls */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecls pdeclsNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TParL tparlNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TParR tparrNode5;
        TCurlyL tcurlylNode6;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode9 = null;
        TCurlyR tcurlyrNode10;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tparlNode3 = (TParL)nodeArrayList2.get(0);
        tparrNode5 = (TParR)nodeArrayList3.get(0);
        tcurlylNode6 = (TCurlyL)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList5.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        tcurlyrNode10 = (TCurlyR)nodeArrayList6.get(0);

        pdeclsNode1 = new ADecls(tidentifierNode2, tparlNode3, null, tparrNode5, tcurlylNode6, listNode8, null, tcurlyrNode10);
        }
	nodeList.add(pdeclsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AAdecls4Decls */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecls pdeclsNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TParL tparlNode3;
        PParams pparamsNode4;
        TParR tparrNode5;
        TCurlyL tcurlylNode6;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode9 = null;
        TCurlyR tcurlyrNode10;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tparlNode3 = (TParL)nodeArrayList2.get(0);
        pparamsNode4 = (PParams)nodeArrayList3.get(0);
        tparrNode5 = (TParR)nodeArrayList4.get(0);
        tcurlylNode6 = (TCurlyL)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList6.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        tcurlyrNode10 = (TCurlyR)nodeArrayList7.get(0);

        pdeclsNode1 = new ADecls(tidentifierNode2, tparlNode3, pparamsNode4, tparrNode5, tcurlylNode6, listNode8, null, tcurlyrNode10);
        }
	nodeList.add(pdeclsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAdecls5Decls */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecls pdeclsNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TParL tparlNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TParR tparrNode5;
        TCurlyL tcurlylNode6;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        PReturnValue preturnvalueNode8;
        TCurlyR tcurlyrNode9;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tparlNode3 = (TParL)nodeArrayList2.get(0);
        tparrNode5 = (TParR)nodeArrayList3.get(0);
        tcurlylNode6 = (TCurlyL)nodeArrayList4.get(0);
        {
            // Block
        }
        preturnvalueNode8 = (PReturnValue)nodeArrayList5.get(0);
        tcurlyrNode9 = (TCurlyR)nodeArrayList6.get(0);

        pdeclsNode1 = new ADecls(tidentifierNode2, tparlNode3, null, tparrNode5, tcurlylNode6, listNode7, preturnvalueNode8, tcurlyrNode9);
        }
	nodeList.add(pdeclsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AAdecls6Decls */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecls pdeclsNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TParL tparlNode3;
        PParams pparamsNode4;
        TParR tparrNode5;
        TCurlyL tcurlylNode6;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        PReturnValue preturnvalueNode8;
        TCurlyR tcurlyrNode9;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tparlNode3 = (TParL)nodeArrayList2.get(0);
        pparamsNode4 = (PParams)nodeArrayList3.get(0);
        tparrNode5 = (TParR)nodeArrayList4.get(0);
        tcurlylNode6 = (TCurlyL)nodeArrayList5.get(0);
        {
            // Block
        }
        preturnvalueNode8 = (PReturnValue)nodeArrayList6.get(0);
        tcurlyrNode9 = (TCurlyR)nodeArrayList7.get(0);

        pdeclsNode1 = new ADecls(tidentifierNode2, tparlNode3, pparamsNode4, tparrNode5, tcurlylNode6, listNode7, preturnvalueNode8, tcurlyrNode9);
        }
	nodeList.add(pdeclsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AAdecls7Decls */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecls pdeclsNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TParL tparlNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TParR tparrNode5;
        TCurlyL tcurlylNode6;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        PReturnValue preturnvalueNode9;
        TCurlyR tcurlyrNode10;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tparlNode3 = (TParL)nodeArrayList2.get(0);
        tparrNode5 = (TParR)nodeArrayList3.get(0);
        tcurlylNode6 = (TCurlyL)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList5.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        preturnvalueNode9 = (PReturnValue)nodeArrayList6.get(0);
        tcurlyrNode10 = (TCurlyR)nodeArrayList7.get(0);

        pdeclsNode1 = new ADecls(tidentifierNode2, tparlNode3, null, tparrNode5, tcurlylNode6, listNode8, preturnvalueNode9, tcurlyrNode10);
        }
	nodeList.add(pdeclsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AAdecls8Decls */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecls pdeclsNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TParL tparlNode3;
        PParams pparamsNode4;
        TParR tparrNode5;
        TCurlyL tcurlylNode6;
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        PReturnValue preturnvalueNode9;
        TCurlyR tcurlyrNode10;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tparlNode3 = (TParL)nodeArrayList2.get(0);
        pparamsNode4 = (PParams)nodeArrayList3.get(0);
        tparrNode5 = (TParR)nodeArrayList4.get(0);
        tcurlylNode6 = (TCurlyL)nodeArrayList5.get(0);
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList6.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        preturnvalueNode9 = (PReturnValue)nodeArrayList7.get(0);
        tcurlyrNode10 = (TCurlyR)nodeArrayList8.get(0);

        pdeclsNode1 = new ADecls(tidentifierNode2, tparlNode3, pparamsNode4, tparrNode5, tcurlylNode6, listNode8, preturnvalueNode9, tcurlyrNode10);
        }
	nodeList.add(pdeclsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AVariableDeclarationDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecl pdeclNode1;
        {
            // Block
        PVariableDeclaration pvariabledeclarationNode2;
        pvariabledeclarationNode2 = (PVariableDeclaration)nodeArrayList1.get(0);

        pdeclNode1 = new AVariableDeclarationDecl(pvariabledeclarationNode2);
        }
	nodeList.add(pdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AFunctionDeclarationDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecl pdeclNode1;
        {
            // Block
        PFunctionDeclaration pfunctiondeclarationNode2;
        pfunctiondeclarationNode2 = (PFunctionDeclaration)nodeArrayList1.get(0);

        pdeclNode1 = new AFunctionDeclarationDecl(pfunctiondeclarationNode2);
        }
	nodeList.add(pdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AControlStatementsDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecl pdeclNode1;
        {
            // Block
        PControlStatments pcontrolstatmentsNode2;
        pcontrolstatmentsNode2 = (PControlStatments)nodeArrayList1.get(0);

        pdeclNode1 = new AControlStatementsDecl(pcontrolstatmentsNode2);
        }
	nodeList.add(pdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AAssignDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecl pdeclNode1;
        {
            // Block
        PExpr pexprNode2;
        TSemiC tsemicNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tsemicNode3 = (TSemiC)nodeArrayList2.get(0);

        pdeclNode1 = new AAssignDecl(pexprNode2, tsemicNode3);
        }
	nodeList.add(pdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AAvariabledeclaration1VariableDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariableDeclaration pvariabledeclarationNode1;
        {
            // Block
        TNew tnewNode2;
        TIdentifier tidentifierNode3;
        TEquals tequalsNode4;
        PVariableTypes pvariabletypesNode5;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TSemiC tsemicNode7;
        tnewNode2 = (TNew)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tequalsNode4 = (TEquals)nodeArrayList3.get(0);
        pvariabletypesNode5 = (PVariableTypes)nodeArrayList4.get(0);
        {
            // Block
        }
        tsemicNode7 = (TSemiC)nodeArrayList5.get(0);

        pvariabledeclarationNode1 = new AVariableDeclaration(tnewNode2, tidentifierNode3, tequalsNode4, pvariabletypesNode5, listNode6, tsemicNode7);
        }
	nodeList.add(pvariabledeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AAvariabledeclaration2VariableDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariableDeclaration pvariabledeclarationNode1;
        {
            // Block
        TNew tnewNode2;
        TIdentifier tidentifierNode3;
        TEquals tequalsNode4;
        PVariableTypes pvariabletypesNode5;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        TSemiC tsemicNode8;
        tnewNode2 = (TNew)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tequalsNode4 = (TEquals)nodeArrayList3.get(0);
        pvariabletypesNode5 = (PVariableTypes)nodeArrayList4.get(0);
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList5.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        tsemicNode8 = (TSemiC)nodeArrayList6.get(0);

        pvariabledeclarationNode1 = new AVariableDeclaration(tnewNode2, tidentifierNode3, tequalsNode4, pvariabletypesNode5, listNode7, tsemicNode8);
        }
	nodeList.add(pvariabledeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ASingleVariableTypes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariableTypes pvariabletypesNode1;
        {
            // Block
        PExpr pexprNode2;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);

        pvariabletypesNode1 = new ASingleVariableTypes(pexprNode2);
        }
	nodeList.add(pvariabletypesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AAlistvariabletypes1VariableTypes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariableTypes pvariabletypesNode1;
        {
            // Block
        TBrackL tbracklNode2;
        PExpr pexprNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TBrackR tbrackrNode5;
        tbracklNode2 = (TBrackL)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        {
            // Block
        }
        tbrackrNode5 = (TBrackR)nodeArrayList3.get(0);

        pvariabletypesNode1 = new AListVariableTypes(tbracklNode2, pexprNode3, listNode4, tbrackrNode5);
        }
	nodeList.add(pvariabletypesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AAlistvariabletypes2VariableTypes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariableTypes pvariabletypesNode1;
        {
            // Block
        TBrackL tbracklNode2;
        PExpr pexprNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TBrackR tbrackrNode6;
        tbracklNode2 = (TBrackL)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        tbrackrNode6 = (TBrackR)nodeArrayList4.get(0);

        pvariabletypesNode1 = new AListVariableTypes(tbracklNode2, pexprNode3, listNode5, tbrackrNode6);
        }
	nodeList.add(pvariabletypesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AVariableTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariableTail pvariabletailNode1;
        {
            // Block
        TComma tcommaNode2;
        TNew tnewNode3;
        TIdentifier tidentifierNode4;
        TEquals tequalsNode5;
        PVariableTypes pvariabletypesNode6;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        tnewNode3 = (TNew)nodeArrayList2.get(0);
        tidentifierNode4 = (TIdentifier)nodeArrayList3.get(0);
        tequalsNode5 = (TEquals)nodeArrayList4.get(0);
        pvariabletypesNode6 = (PVariableTypes)nodeArrayList5.get(0);

        pvariabletailNode1 = new AVariableTail(tcommaNode2, tnewNode3, tidentifierNode4, tequalsNode5, pvariabletypesNode6);
        }
	nodeList.add(pvariabletailNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AListVarTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListVarTail plistvartailNode1;
        {
            // Block
        TComma tcommaNode2;
        PExpr pexprNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);

        plistvartailNode1 = new AListVarTail(tcommaNode2, pexprNode3);
        }
	nodeList.add(plistvartailNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AAcallparams1CallParams */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCallParams pcallparamsNode1;
        {
            // Block
        PExpr pexprNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        {
            // Block
        }

        pcallparamsNode1 = new ACallParams(pexprNode2, listNode3);
        }
	nodeList.add(pcallparamsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AAcallparams2CallParams */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCallParams pcallparamsNode1;
        {
            // Block
        PExpr pexprNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pcallparamsNode1 = new ACallParams(pexprNode2, listNode4);
        }
	nodeList.add(pcallparamsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce ACallParamsTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCallParamsTail pcallparamstailNode1;
        {
            // Block
        TComma tcommaNode2;
        PExpr pexprNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);

        pcallparamstailNode1 = new ACallParamsTail(tcommaNode2, pexprNode3);
        }
	nodeList.add(pcallparamstailNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AFunctionDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionDeclaration pfunctiondeclarationNode1;
        {
            // Block
        TNew tnewNode2;
        PDecls pdeclsNode3;
        tnewNode2 = (TNew)nodeArrayList1.get(0);
        pdeclsNode3 = (PDecls)nodeArrayList2.get(0);

        pfunctiondeclarationNode1 = new AFunctionDeclaration(tnewNode2, pdeclsNode3);
        }
	nodeList.add(pfunctiondeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AReturnValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PReturnValue preturnvalueNode1;
        {
            // Block
        TReturn treturnNode2;
        PExpr pexprNode3;
        TSemiC tsemicNode4;
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        tsemicNode4 = (TSemiC)nodeArrayList3.get(0);

        preturnvalueNode1 = new AReturnValue(treturnNode2, pexprNode3, tsemicNode4);
        }
	nodeList.add(preturnvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AAparams1Params */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParams pparamsNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        }

        pparamsNode1 = new AParams(tidentifierNode2, listNode3);
        }
	nodeList.add(pparamsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AAparams2Params */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParams pparamsNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pparamsNode1 = new AParams(tidentifierNode2, listNode4);
        }
	nodeList.add(pparamsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AParamsTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParamsTail pparamstailNode1;
        {
            // Block
        TComma tcommaNode2;
        TIdentifier tidentifierNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);

        pparamstailNode1 = new AParamsTail(tcommaNode2, tidentifierNode3);
        }
	nodeList.add(pparamstailNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AWhileControlStatments */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PControlStatments pcontrolstatmentsNode1;
        {
            // Block
        TRepeat trepeatNode2;
        TWhile twhileNode3;
        TParL tparlNode4;
        PExpr pexprNode5;
        TParR tparrNode6;
        PBody pbodyNode7;
        trepeatNode2 = (TRepeat)nodeArrayList1.get(0);
        twhileNode3 = (TWhile)nodeArrayList2.get(0);
        tparlNode4 = (TParL)nodeArrayList3.get(0);
        pexprNode5 = (PExpr)nodeArrayList4.get(0);
        tparrNode6 = (TParR)nodeArrayList5.get(0);
        pbodyNode7 = (PBody)nodeArrayList6.get(0);

        pcontrolstatmentsNode1 = new AWhileControlStatments(trepeatNode2, twhileNode3, tparlNode4, pexprNode5, tparrNode6, pbodyNode7);
        }
	nodeList.add(pcontrolstatmentsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AArepeatcontrolstatments1ControlStatments */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PControlStatments pcontrolstatmentsNode1;
        {
            // Block
        TRepeat trepeatNode2;
        TParL tparlNode3;
        PLeftParam pleftparamNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TParR tparrNode6;
        PBody pbodyNode7;
        trepeatNode2 = (TRepeat)nodeArrayList1.get(0);
        tparlNode3 = (TParL)nodeArrayList2.get(0);
        pleftparamNode4 = (PLeftParam)nodeArrayList3.get(0);
        tparrNode6 = (TParR)nodeArrayList4.get(0);
        pbodyNode7 = (PBody)nodeArrayList5.get(0);

        pcontrolstatmentsNode1 = new ARepeatControlStatments(trepeatNode2, tparlNode3, pleftparamNode4, null, tparrNode6, pbodyNode7);
        }
	nodeList.add(pcontrolstatmentsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AArepeatcontrolstatments2ControlStatments */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PControlStatments pcontrolstatmentsNode1;
        {
            // Block
        TRepeat trepeatNode2;
        TParL tparlNode3;
        PLeftParam pleftparamNode4;
        PRightParam prightparamNode5;
        TParR tparrNode6;
        PBody pbodyNode7;
        trepeatNode2 = (TRepeat)nodeArrayList1.get(0);
        tparlNode3 = (TParL)nodeArrayList2.get(0);
        pleftparamNode4 = (PLeftParam)nodeArrayList3.get(0);
        prightparamNode5 = (PRightParam)nodeArrayList4.get(0);
        tparrNode6 = (TParR)nodeArrayList5.get(0);
        pbodyNode7 = (PBody)nodeArrayList6.get(0);

        pcontrolstatmentsNode1 = new ARepeatControlStatments(trepeatNode2, tparlNode3, pleftparamNode4, prightparamNode5, tparrNode6, pbodyNode7);
        }
	nodeList.add(pcontrolstatmentsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AForeachControlStatments */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PControlStatments pcontrolstatmentsNode1;
        {
            // Block
        TRepeat trepeatNode2;
        TForeach tforeachNode3;
        TParL tparlNode4;
        TIdentifier tidentifierNode5;
        TIn tinNode6;
        PVarname pvarnameNode7;
        TParR tparrNode8;
        PBody pbodyNode9;
        trepeatNode2 = (TRepeat)nodeArrayList1.get(0);
        tforeachNode3 = (TForeach)nodeArrayList2.get(0);
        tparlNode4 = (TParL)nodeArrayList3.get(0);
        tidentifierNode5 = (TIdentifier)nodeArrayList4.get(0);
        tinNode6 = (TIn)nodeArrayList5.get(0);
        pvarnameNode7 = (PVarname)nodeArrayList6.get(0);
        tparrNode8 = (TParR)nodeArrayList7.get(0);
        pbodyNode9 = (PBody)nodeArrayList8.get(0);

        pcontrolstatmentsNode1 = new AForeachControlStatments(trepeatNode2, tforeachNode3, tparlNode4, tidentifierNode5, tinNode6, pvarnameNode7, tparrNode8, pbodyNode9);
        }
	nodeList.add(pcontrolstatmentsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AAifstructurecontrolstatments1ControlStatments */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PControlStatments pcontrolstatmentsNode1;
        {
            // Block
        TIf tifNode2;
        TParL tparlNode3;
        PExpr pexprNode4;
        TParR tparrNode5;
        PBody pbodyNode6;
        @SuppressWarnings("unused") Object nullNode7 = null;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        tparlNode3 = (TParL)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        tparrNode5 = (TParR)nodeArrayList4.get(0);
        pbodyNode6 = (PBody)nodeArrayList5.get(0);

        pcontrolstatmentsNode1 = new AIfstructureControlStatments(tifNode2, tparlNode3, pexprNode4, tparrNode5, pbodyNode6, null);
        }
	nodeList.add(pcontrolstatmentsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AAifstructurecontrolstatments2ControlStatments */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PControlStatments pcontrolstatmentsNode1;
        {
            // Block
        TIf tifNode2;
        TParL tparlNode3;
        PExpr pexprNode4;
        TParR tparrNode5;
        PBody pbodyNode6;
        PElsestructure pelsestructureNode7;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        tparlNode3 = (TParL)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        tparrNode5 = (TParR)nodeArrayList4.get(0);
        pbodyNode6 = (PBody)nodeArrayList5.get(0);
        pelsestructureNode7 = (PElsestructure)nodeArrayList6.get(0);

        pcontrolstatmentsNode1 = new AIfstructureControlStatments(tifNode2, tparlNode3, pexprNode4, tparrNode5, pbodyNode6, pelsestructureNode7);
        }
	nodeList.add(pcontrolstatmentsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AElseElsestructure */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElsestructure pelsestructureNode1;
        {
            // Block
        TElse telseNode2;
        PBody pbodyNode3;
        telseNode2 = (TElse)nodeArrayList1.get(0);
        pbodyNode3 = (PBody)nodeArrayList2.get(0);

        pelsestructureNode1 = new AElseElsestructure(telseNode2, pbodyNode3);
        }
	nodeList.add(pelsestructureNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AAifelseelsestructure1Elsestructure */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElsestructure pelsestructureNode1;
        {
            // Block
        TElse telseNode2;
        TIf tifNode3;
        TParL tparlNode4;
        PExpr pexprNode5;
        TParR tparrNode6;
        PBody pbodyNode7;
        @SuppressWarnings("unused") Object nullNode8 = null;
        telseNode2 = (TElse)nodeArrayList1.get(0);
        tifNode3 = (TIf)nodeArrayList2.get(0);
        tparlNode4 = (TParL)nodeArrayList3.get(0);
        pexprNode5 = (PExpr)nodeArrayList4.get(0);
        tparrNode6 = (TParR)nodeArrayList5.get(0);
        pbodyNode7 = (PBody)nodeArrayList6.get(0);

        pelsestructureNode1 = new AIfelseElsestructure(telseNode2, tifNode3, tparlNode4, pexprNode5, tparrNode6, pbodyNode7, null);
        }
	nodeList.add(pelsestructureNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AAifelseelsestructure2Elsestructure */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElsestructure pelsestructureNode1;
        {
            // Block
        TElse telseNode2;
        TIf tifNode3;
        TParL tparlNode4;
        PExpr pexprNode5;
        TParR tparrNode6;
        PBody pbodyNode7;
        PElsestructure pelsestructureNode8;
        telseNode2 = (TElse)nodeArrayList1.get(0);
        tifNode3 = (TIf)nodeArrayList2.get(0);
        tparlNode4 = (TParL)nodeArrayList3.get(0);
        pexprNode5 = (PExpr)nodeArrayList4.get(0);
        tparrNode6 = (TParR)nodeArrayList5.get(0);
        pbodyNode7 = (PBody)nodeArrayList6.get(0);
        pelsestructureNode8 = (PElsestructure)nodeArrayList7.get(0);

        pelsestructureNode1 = new AIfelseElsestructure(telseNode2, tifNode3, tparlNode4, pexprNode5, tparrNode6, pbodyNode7, pelsestructureNode8);
        }
	nodeList.add(pelsestructureNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AAssignLeftParam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLeftParam pleftparamNode1;
        {
            // Block
        POpadd popaddNode2;
        popaddNode2 = (POpadd)nodeArrayList1.get(0);

        pleftparamNode1 = new AAssignLeftParam(popaddNode2);
        }
	nodeList.add(pleftparamNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AVariableLeftParam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLeftParam pleftparamNode1;
        {
            // Block
        TNew tnewNode2;
        TIdentifier tidentifierNode3;
        TEquals tequalsNode4;
        POpadd popaddNode5;
        tnewNode2 = (TNew)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tequalsNode4 = (TEquals)nodeArrayList3.get(0);
        popaddNode5 = (POpadd)nodeArrayList4.get(0);

        pleftparamNode1 = new AVariableLeftParam(tnewNode2, tidentifierNode3, tequalsNode4, popaddNode5);
        }
	nodeList.add(pleftparamNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce ARightParam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRightParam prightparamNode1;
        {
            // Block
        TComma tcommaNode2;
        POpadd popaddNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        popaddNode3 = (POpadd)nodeArrayList2.get(0);

        prightparamNode1 = new ARightParam(tcommaNode2, popaddNode3);
        }
	nodeList.add(prightparamNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AAbody1Body */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBody pbodyNode1;
        {
            // Block
        TCurlyL tcurlylNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        TCurlyR tcurlyrNode4;
        tcurlylNode2 = (TCurlyL)nodeArrayList1.get(0);
        {
            // Block
        }
        tcurlyrNode4 = (TCurlyR)nodeArrayList2.get(0);

        pbodyNode1 = new ABody(tcurlylNode2, listNode3, tcurlyrNode4);
        }
	nodeList.add(pbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AAbody2Body */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBody pbodyNode1;
        {
            // Block
        TCurlyL tcurlylNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TCurlyR tcurlyrNode5;
        tcurlylNode2 = (TCurlyL)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        tcurlyrNode5 = (TCurlyR)nodeArrayList3.get(0);

        pbodyNode1 = new ABody(tcurlylNode2, listNode4, tcurlyrNode5);
        }
	nodeList.add(pbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AEqualsExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        POpor poporNode2;
        TEquals tequalsNode3;
        PExpr pexprNode4;
        poporNode2 = (POpor)nodeArrayList1.get(0);
        tequalsNode3 = (TEquals)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AEqualsExpr(poporNode2, tequalsNode3, pexprNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AIncrementExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        POpor poporNode2;
        TIncrement tincrementNode3;
        PExpr pexprNode4;
        poporNode2 = (POpor)nodeArrayList1.get(0);
        tincrementNode3 = (TIncrement)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AIncrementExpr(poporNode2, tincrementNode3, pexprNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce ADecrementExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        POpor poporNode2;
        TDecrement tdecrementNode3;
        PExpr pexprNode4;
        poporNode2 = (POpor)nodeArrayList1.get(0);
        tdecrementNode3 = (TDecrement)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new ADecrementExpr(poporNode2, tdecrementNode3, pexprNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AOrExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        POpor poporNode2;
        poporNode2 = (POpor)nodeArrayList1.get(0);

        pexprNode1 = new AOrExpr(poporNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AOrOpor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpor poporNode1;
        {
            // Block
        POpor poporNode2;
        TOr torNode3;
        POpand popandNode4;
        poporNode2 = (POpor)nodeArrayList1.get(0);
        torNode3 = (TOr)nodeArrayList2.get(0);
        popandNode4 = (POpand)nodeArrayList3.get(0);

        poporNode1 = new AOrOpor(poporNode2, torNode3, popandNode4);
        }
	nodeList.add(poporNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AAndOpor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpor poporNode1;
        {
            // Block
        POpand popandNode2;
        popandNode2 = (POpand)nodeArrayList1.get(0);

        poporNode1 = new AAndOpor(popandNode2);
        }
	nodeList.add(poporNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AAndOpand */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpand popandNode1;
        {
            // Block
        POpand popandNode2;
        TAnd tandNode3;
        POpequate popequateNode4;
        popandNode2 = (POpand)nodeArrayList1.get(0);
        tandNode3 = (TAnd)nodeArrayList2.get(0);
        popequateNode4 = (POpequate)nodeArrayList3.get(0);

        popandNode1 = new AAndOpand(popandNode2, tandNode3, popequateNode4);
        }
	nodeList.add(popandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AEquateOpand */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpand popandNode1;
        {
            // Block
        POpequate popequateNode2;
        popequateNode2 = (POpequate)nodeArrayList1.get(0);

        popandNode1 = new AEquateOpand(popequateNode2);
        }
	nodeList.add(popandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AEqualOpequate */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpequate popequateNode1;
        {
            // Block
        POpequate popequateNode2;
        TEqual tequalNode3;
        POpcompare popcompareNode4;
        popequateNode2 = (POpequate)nodeArrayList1.get(0);
        tequalNode3 = (TEqual)nodeArrayList2.get(0);
        popcompareNode4 = (POpcompare)nodeArrayList3.get(0);

        popequateNode1 = new AEqualOpequate(popequateNode2, tequalNode3, popcompareNode4);
        }
	nodeList.add(popequateNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce ANegateOpequate */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpequate popequateNode1;
        {
            // Block
        POpequate popequateNode2;
        TNegate tnegateNode3;
        POpcompare popcompareNode4;
        popequateNode2 = (POpequate)nodeArrayList1.get(0);
        tnegateNode3 = (TNegate)nodeArrayList2.get(0);
        popcompareNode4 = (POpcompare)nodeArrayList3.get(0);

        popequateNode1 = new ANegateOpequate(popequateNode2, tnegateNode3, popcompareNode4);
        }
	nodeList.add(popequateNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce ACompareOpequate */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpequate popequateNode1;
        {
            // Block
        POpcompare popcompareNode2;
        popcompareNode2 = (POpcompare)nodeArrayList1.get(0);

        popequateNode1 = new ACompareOpequate(popcompareNode2);
        }
	nodeList.add(popequateNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce ALessOpcompare */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpcompare popcompareNode1;
        {
            // Block
        POpcompare popcompareNode2;
        TLess tlessNode3;
        PValue pvalueNode4;
        popcompareNode2 = (POpcompare)nodeArrayList1.get(0);
        tlessNode3 = (TLess)nodeArrayList2.get(0);
        pvalueNode4 = (PValue)nodeArrayList3.get(0);

        popcompareNode1 = new ALessOpcompare(popcompareNode2, tlessNode3, pvalueNode4);
        }
	nodeList.add(popcompareNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AGreaterOpcompare */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpcompare popcompareNode1;
        {
            // Block
        POpcompare popcompareNode2;
        TGreater tgreaterNode3;
        PValue pvalueNode4;
        popcompareNode2 = (POpcompare)nodeArrayList1.get(0);
        tgreaterNode3 = (TGreater)nodeArrayList2.get(0);
        pvalueNode4 = (PValue)nodeArrayList3.get(0);

        popcompareNode1 = new AGreaterOpcompare(popcompareNode2, tgreaterNode3, pvalueNode4);
        }
	nodeList.add(popcompareNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce ALessEqualOpcompare */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpcompare popcompareNode1;
        {
            // Block
        POpcompare popcompareNode2;
        TLessEqual tlessequalNode3;
        PValue pvalueNode4;
        popcompareNode2 = (POpcompare)nodeArrayList1.get(0);
        tlessequalNode3 = (TLessEqual)nodeArrayList2.get(0);
        pvalueNode4 = (PValue)nodeArrayList3.get(0);

        popcompareNode1 = new ALessEqualOpcompare(popcompareNode2, tlessequalNode3, pvalueNode4);
        }
	nodeList.add(popcompareNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AGreaterEqualOpcompare */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpcompare popcompareNode1;
        {
            // Block
        POpcompare popcompareNode2;
        TGreaterEqual tgreaterequalNode3;
        PValue pvalueNode4;
        popcompareNode2 = (POpcompare)nodeArrayList1.get(0);
        tgreaterequalNode3 = (TGreaterEqual)nodeArrayList2.get(0);
        pvalueNode4 = (PValue)nodeArrayList3.get(0);

        popcompareNode1 = new AGreaterEqualOpcompare(popcompareNode2, tgreaterequalNode3, pvalueNode4);
        }
	nodeList.add(popcompareNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AAddOpcompare */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpcompare popcompareNode1;
        {
            // Block
        POpadd popaddNode2;
        popaddNode2 = (POpadd)nodeArrayList1.get(0);

        popcompareNode1 = new AAddOpcompare(popaddNode2);
        }
	nodeList.add(popcompareNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce APlusOpadd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpadd popaddNode1;
        {
            // Block
        POpadd popaddNode2;
        TPlus tplusNode3;
        POpmult popmultNode4;
        popaddNode2 = (POpadd)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        popmultNode4 = (POpmult)nodeArrayList3.get(0);

        popaddNode1 = new APlusOpadd(popaddNode2, tplusNode3, popmultNode4);
        }
	nodeList.add(popaddNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AMinusOpadd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpadd popaddNode1;
        {
            // Block
        POpadd popaddNode2;
        TMinus tminusNode3;
        POpmult popmultNode4;
        popaddNode2 = (POpadd)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        popmultNode4 = (POpmult)nodeArrayList3.get(0);

        popaddNode1 = new AMinusOpadd(popaddNode2, tminusNode3, popmultNode4);
        }
	nodeList.add(popaddNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AMultOpadd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpadd popaddNode1;
        {
            // Block
        POpmult popmultNode2;
        popmultNode2 = (POpmult)nodeArrayList1.get(0);

        popaddNode1 = new AMultOpadd(popmultNode2);
        }
	nodeList.add(popaddNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AMultOpmult */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpmult popmultNode1;
        {
            // Block
        POpmult popmultNode2;
        TMult tmultNode3;
        POpunary popunaryNode4;
        popmultNode2 = (POpmult)nodeArrayList1.get(0);
        tmultNode3 = (TMult)nodeArrayList2.get(0);
        popunaryNode4 = (POpunary)nodeArrayList3.get(0);

        popmultNode1 = new AMultOpmult(popmultNode2, tmultNode3, popunaryNode4);
        }
	nodeList.add(popmultNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce ADivOpmult */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpmult popmultNode1;
        {
            // Block
        POpmult popmultNode2;
        TDiv tdivNode3;
        POpunary popunaryNode4;
        popmultNode2 = (POpmult)nodeArrayList1.get(0);
        tdivNode3 = (TDiv)nodeArrayList2.get(0);
        popunaryNode4 = (POpunary)nodeArrayList3.get(0);

        popmultNode1 = new ADivOpmult(popmultNode2, tdivNode3, popunaryNode4);
        }
	nodeList.add(popmultNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce AUnaryOpmult */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpmult popmultNode1;
        {
            // Block
        POpunary popunaryNode2;
        popunaryNode2 = (POpunary)nodeArrayList1.get(0);

        popmultNode1 = new AUnaryOpmult(popunaryNode2);
        }
	nodeList.add(popmultNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce AMinusvalueOpunary */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpunary popunaryNode1;
        {
            // Block
        TMinus tminusNode2;
        POpunary popunaryNode3;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);
        popunaryNode3 = (POpunary)nodeArrayList2.get(0);

        popunaryNode1 = new AMinusvalueOpunary(tminusNode2, popunaryNode3);
        }
	nodeList.add(popunaryNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce AValueOpunary */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpunary popunaryNode1;
        {
            // Block
        PValue pvalueNode2;
        pvalueNode2 = (PValue)nodeArrayList1.get(0);

        popunaryNode1 = new AValueOpunary(pvalueNode2);
        }
	nodeList.add(popunaryNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce AAvarnamevalue1Value */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValue pvalueNode1;
        {
            // Block
        PVarname pvarnameNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        pvarnameNode2 = (PVarname)nodeArrayList1.get(0);

        pvalueNode1 = new AVarnameValue(pvarnameNode2, null);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce AAvarnamevalue2Value */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValue pvalueNode1;
        {
            // Block
        PVarname pvarnameNode2;
        PFunctionCall pfunctioncallNode3;
        pvarnameNode2 = (PVarname)nodeArrayList1.get(0);
        pfunctioncallNode3 = (PFunctionCall)nodeArrayList2.get(0);

        pvalueNode1 = new AVarnameValue(pvarnameNode2, pfunctioncallNode3);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce ALiteralValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValue pvalueNode1;
        {
            // Block
        PLiteral pliteralNode2;
        pliteralNode2 = (PLiteral)nodeArrayList1.get(0);

        pvalueNode1 = new ALiteralValue(pliteralNode2);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce ARndValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValue pvalueNode1;
        {
            // Block
        PRnd prndNode2;
        prndNode2 = (PRnd)nodeArrayList1.get(0);

        pvalueNode1 = new ARndValue(prndNode2);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce AAfunctioncall1FunctionCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionCall pfunctioncallNode1;
        {
            // Block
        TParL tparlNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        TParR tparrNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        tparlNode2 = (TParL)nodeArrayList1.get(0);
        tparrNode4 = (TParR)nodeArrayList2.get(0);

        pfunctioncallNode1 = new AFunctionCall(tparlNode2, null, tparrNode4, null);
        }
	nodeList.add(pfunctioncallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce AAfunctioncall2FunctionCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionCall pfunctioncallNode1;
        {
            // Block
        TParL tparlNode2;
        PCallParams pcallparamsNode3;
        TParR tparrNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        tparlNode2 = (TParL)nodeArrayList1.get(0);
        pcallparamsNode3 = (PCallParams)nodeArrayList2.get(0);
        tparrNode4 = (TParR)nodeArrayList3.get(0);

        pfunctioncallNode1 = new AFunctionCall(tparlNode2, pcallparamsNode3, tparrNode4, null);
        }
	nodeList.add(pfunctioncallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce AAfunctioncall3FunctionCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionCall pfunctioncallNode1;
        {
            // Block
        TParL tparlNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        TParR tparrNode4;
        PBody pbodyNode5;
        tparlNode2 = (TParL)nodeArrayList1.get(0);
        tparrNode4 = (TParR)nodeArrayList2.get(0);
        pbodyNode5 = (PBody)nodeArrayList3.get(0);

        pfunctioncallNode1 = new AFunctionCall(tparlNode2, null, tparrNode4, pbodyNode5);
        }
	nodeList.add(pfunctioncallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce AAfunctioncall4FunctionCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionCall pfunctioncallNode1;
        {
            // Block
        TParL tparlNode2;
        PCallParams pcallparamsNode3;
        TParR tparrNode4;
        PBody pbodyNode5;
        tparlNode2 = (TParL)nodeArrayList1.get(0);
        pcallparamsNode3 = (PCallParams)nodeArrayList2.get(0);
        tparrNode4 = (TParR)nodeArrayList3.get(0);
        pbodyNode5 = (PBody)nodeArrayList4.get(0);

        pfunctioncallNode1 = new AFunctionCall(tparlNode2, pcallparamsNode3, tparrNode4, pbodyNode5);
        }
	nodeList.add(pfunctioncallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce AAvarname1Varname */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarname pvarnameNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        }

        pvarnameNode1 = new AVarname(tidentifierNode2, listNode3);
        }
	nodeList.add(pvarnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce AAvarname2Varname */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarname pvarnameNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pvarnameNode1 = new AVarname(tidentifierNode2, listNode4);
        }
	nodeList.add(pvarnameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce AIdlist */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIdlist pidlistNode1;
        {
            // Block
        TDot tdotNode2;
        TIdentifier tidentifierNode3;
        tdotNode2 = (TDot)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);

        pidlistNode1 = new AIdlist(tdotNode2, tidentifierNode3);
        }
	nodeList.add(pidlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce ALessEqualCompareToken */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCompareToken pcomparetokenNode1;
        {
            // Block
        TLessEqual tlessequalNode2;
        tlessequalNode2 = (TLessEqual)nodeArrayList1.get(0);

        pcomparetokenNode1 = new ALessEqualCompareToken(tlessequalNode2);
        }
	nodeList.add(pcomparetokenNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce ALessCompareToken */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCompareToken pcomparetokenNode1;
        {
            // Block
        TLess tlessNode2;
        tlessNode2 = (TLess)nodeArrayList1.get(0);

        pcomparetokenNode1 = new ALessCompareToken(tlessNode2);
        }
	nodeList.add(pcomparetokenNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce AGreaterEqualCompareToken */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCompareToken pcomparetokenNode1;
        {
            // Block
        TGreaterEqual tgreaterequalNode2;
        tgreaterequalNode2 = (TGreaterEqual)nodeArrayList1.get(0);

        pcomparetokenNode1 = new AGreaterEqualCompareToken(tgreaterequalNode2);
        }
	nodeList.add(pcomparetokenNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce AGreaterCompareToken */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCompareToken pcomparetokenNode1;
        {
            // Block
        TGreater tgreaterNode2;
        tgreaterNode2 = (TGreater)nodeArrayList1.get(0);

        pcomparetokenNode1 = new AGreaterCompareToken(tgreaterNode2);
        }
	nodeList.add(pcomparetokenNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce AMinusOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POperator poperatorNode1;
        {
            // Block
        TMinus tminusNode2;
        PValue pvalueNode3;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);
        pvalueNode3 = (PValue)nodeArrayList2.get(0);

        poperatorNode1 = new AMinusOperator(tminusNode2, pvalueNode3);
        }
	nodeList.add(poperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce APlusOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POperator poperatorNode1;
        {
            // Block
        TPlus tplusNode2;
        PValue pvalueNode3;
        tplusNode2 = (TPlus)nodeArrayList1.get(0);
        pvalueNode3 = (PValue)nodeArrayList2.get(0);

        poperatorNode1 = new APlusOperator(tplusNode2, pvalueNode3);
        }
	nodeList.add(poperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce AMultOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POperator poperatorNode1;
        {
            // Block
        TMult tmultNode2;
        PValue pvalueNode3;
        tmultNode2 = (TMult)nodeArrayList1.get(0);
        pvalueNode3 = (PValue)nodeArrayList2.get(0);

        poperatorNode1 = new AMultOperator(tmultNode2, pvalueNode3);
        }
	nodeList.add(poperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce ADivOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POperator poperatorNode1;
        {
            // Block
        TDiv tdivNode2;
        PValue pvalueNode3;
        tdivNode2 = (TDiv)nodeArrayList1.get(0);
        pvalueNode3 = (PValue)nodeArrayList2.get(0);

        poperatorNode1 = new ADivOperator(tdivNode2, pvalueNode3);
        }
	nodeList.add(poperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new85() /* reduce AEqualBoolOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBoolOperator pbooloperatorNode1;
        {
            // Block
        TEqual tequalNode2;
        tequalNode2 = (TEqual)nodeArrayList1.get(0);

        pbooloperatorNode1 = new AEqualBoolOperator(tequalNode2);
        }
	nodeList.add(pbooloperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new86() /* reduce ALessEqualBoolOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBoolOperator pbooloperatorNode1;
        {
            // Block
        TLessEqual tlessequalNode2;
        tlessequalNode2 = (TLessEqual)nodeArrayList1.get(0);

        pbooloperatorNode1 = new ALessEqualBoolOperator(tlessequalNode2);
        }
	nodeList.add(pbooloperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new87() /* reduce AGreaterEqualBoolOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBoolOperator pbooloperatorNode1;
        {
            // Block
        TGreaterEqual tgreaterequalNode2;
        tgreaterequalNode2 = (TGreaterEqual)nodeArrayList1.get(0);

        pbooloperatorNode1 = new AGreaterEqualBoolOperator(tgreaterequalNode2);
        }
	nodeList.add(pbooloperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new88() /* reduce ANegateBoolOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBoolOperator pbooloperatorNode1;
        {
            // Block
        TNegate tnegateNode2;
        tnegateNode2 = (TNegate)nodeArrayList1.get(0);

        pbooloperatorNode1 = new ANegateBoolOperator(tnegateNode2);
        }
	nodeList.add(pbooloperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new89() /* reduce AAndBoolOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBoolOperator pbooloperatorNode1;
        {
            // Block
        TAnd tandNode2;
        tandNode2 = (TAnd)nodeArrayList1.get(0);

        pbooloperatorNode1 = new AAndBoolOperator(tandNode2);
        }
	nodeList.add(pbooloperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new90() /* reduce AOrBoolOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBoolOperator pbooloperatorNode1;
        {
            // Block
        TOr torNode2;
        torNode2 = (TOr)nodeArrayList1.get(0);

        pbooloperatorNode1 = new AOrBoolOperator(torNode2);
        }
	nodeList.add(pbooloperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new91() /* reduce ALessBoolOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBoolOperator pbooloperatorNode1;
        {
            // Block
        TLess tlessNode2;
        tlessNode2 = (TLess)nodeArrayList1.get(0);

        pbooloperatorNode1 = new ALessBoolOperator(tlessNode2);
        }
	nodeList.add(pbooloperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new92() /* reduce AGreaterBoolOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBoolOperator pbooloperatorNode1;
        {
            // Block
        TGreater tgreaterNode2;
        tgreaterNode2 = (TGreater)nodeArrayList1.get(0);

        pbooloperatorNode1 = new AGreaterBoolOperator(tgreaterNode2);
        }
	nodeList.add(pbooloperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new93() /* reduce ARnd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRnd prndNode1;
        {
            // Block
        TRandom trandomNode2;
        TParL tparlNode3;
        PValue pvalueNode4;
        TTo ttoNode5;
        PValue pvalueNode6;
        TParR tparrNode7;
        trandomNode2 = (TRandom)nodeArrayList1.get(0);
        tparlNode3 = (TParL)nodeArrayList2.get(0);
        pvalueNode4 = (PValue)nodeArrayList3.get(0);
        ttoNode5 = (TTo)nodeArrayList4.get(0);
        pvalueNode6 = (PValue)nodeArrayList5.get(0);
        tparrNode7 = (TParR)nodeArrayList6.get(0);

        prndNode1 = new ARnd(trandomNode2, tparlNode3, pvalueNode4, ttoNode5, pvalueNode6, tparrNode7);
        }
	nodeList.add(prndNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new94() /* reduce ABooleanLiteralLiteral */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLiteral pliteralNode1;
        {
            // Block
        PBooleanLiteral pbooleanliteralNode2;
        pbooleanliteralNode2 = (PBooleanLiteral)nodeArrayList1.get(0);

        pliteralNode1 = new ABooleanLiteralLiteral(pbooleanliteralNode2);
        }
	nodeList.add(pliteralNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new95() /* reduce AIntegerLiteralLiteral */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLiteral pliteralNode1;
        {
            // Block
        TIntegerLiteral tintegerliteralNode2;
        tintegerliteralNode2 = (TIntegerLiteral)nodeArrayList1.get(0);

        pliteralNode1 = new AIntegerLiteralLiteral(tintegerliteralNode2);
        }
	nodeList.add(pliteralNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new96() /* reduce ADoubleLiteralLiteral */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLiteral pliteralNode1;
        {
            // Block
        TDoubleLiteral tdoubleliteralNode2;
        tdoubleliteralNode2 = (TDoubleLiteral)nodeArrayList1.get(0);

        pliteralNode1 = new ADoubleLiteralLiteral(tdoubleliteralNode2);
        }
	nodeList.add(pliteralNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new97() /* reduce AStringLiteralLiteral */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLiteral pliteralNode1;
        {
            // Block
        TStringLiteral tstringliteralNode2;
        tstringliteralNode2 = (TStringLiteral)nodeArrayList1.get(0);

        pliteralNode1 = new AStringLiteralLiteral(tstringliteralNode2);
        }
	nodeList.add(pliteralNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new98() /* reduce ATrueBooleanLiteral */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBooleanLiteral pbooleanliteralNode1;
        {
            // Block
        TTrue ttrueNode2;
        ttrueNode2 = (TTrue)nodeArrayList1.get(0);

        pbooleanliteralNode1 = new ATrueBooleanLiteral(ttrueNode2);
        }
	nodeList.add(pbooleanliteralNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new99() /* reduce AFalseBooleanLiteral */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBooleanLiteral pbooleanliteralNode1;
        {
            // Block
        TFalse tfalseNode2;
        tfalseNode2 = (TFalse)nodeArrayList1.get(0);

        pbooleanliteralNode1 = new AFalseBooleanLiteral(tfalseNode2);
        }
	nodeList.add(pbooleanliteralNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new100() /* reduce ATerminal$Decls */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PDecls pdeclsNode1;
        pdeclsNode1 = (PDecls)nodeArrayList1.get(0);
	if(pdeclsNode1 != null)
	{
	  listNode2.add(pdeclsNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new101() /* reduce ANonTerminal$Decls */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PDecls pdeclsNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pdeclsNode2 = (PDecls)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pdeclsNode2 != null)
	{
	  listNode3.add(pdeclsNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new102() /* reduce ATerminal$Decl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PDecl pdeclNode1;
        pdeclNode1 = (PDecl)nodeArrayList1.get(0);
	if(pdeclNode1 != null)
	{
	  listNode2.add(pdeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new103() /* reduce ANonTerminal$Decl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PDecl pdeclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pdeclNode2 = (PDecl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pdeclNode2 != null)
	{
	  listNode3.add(pdeclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new104() /* reduce ATerminal$VariableTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PVariableTail pvariabletailNode1;
        pvariabletailNode1 = (PVariableTail)nodeArrayList1.get(0);
	if(pvariabletailNode1 != null)
	{
	  listNode2.add(pvariabletailNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new105() /* reduce ANonTerminal$VariableTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PVariableTail pvariabletailNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pvariabletailNode2 = (PVariableTail)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pvariabletailNode2 != null)
	{
	  listNode3.add(pvariabletailNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new106() /* reduce ATerminal$ListVarTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PListVarTail plistvartailNode1;
        plistvartailNode1 = (PListVarTail)nodeArrayList1.get(0);
	if(plistvartailNode1 != null)
	{
	  listNode2.add(plistvartailNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new107() /* reduce ANonTerminal$ListVarTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PListVarTail plistvartailNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        plistvartailNode2 = (PListVarTail)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(plistvartailNode2 != null)
	{
	  listNode3.add(plistvartailNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new108() /* reduce ATerminal$CallParamsTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PCallParamsTail pcallparamstailNode1;
        pcallparamstailNode1 = (PCallParamsTail)nodeArrayList1.get(0);
	if(pcallparamstailNode1 != null)
	{
	  listNode2.add(pcallparamstailNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new109() /* reduce ANonTerminal$CallParamsTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PCallParamsTail pcallparamstailNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcallparamstailNode2 = (PCallParamsTail)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcallparamstailNode2 != null)
	{
	  listNode3.add(pcallparamstailNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new110() /* reduce ATerminal$ParamsTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PParamsTail pparamstailNode1;
        pparamstailNode1 = (PParamsTail)nodeArrayList1.get(0);
	if(pparamstailNode1 != null)
	{
	  listNode2.add(pparamstailNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new111() /* reduce ANonTerminal$ParamsTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PParamsTail pparamstailNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pparamstailNode2 = (PParamsTail)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pparamstailNode2 != null)
	{
	  listNode3.add(pparamstailNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new112() /* reduce ATerminal$Idlist */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PIdlist pidlistNode1;
        pidlistNode1 = (PIdlist)nodeArrayList1.get(0);
	if(pidlistNode1 != null)
	{
	  listNode2.add(pidlistNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new113() /* reduce ANonTerminal$Idlist */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PIdlist pidlistNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pidlistNode2 = (PIdlist)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pidlistNode2 != null)
	{
	  listNode3.add(pidlistNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {37, SHIFT, 1}, },
			{{-1, ERROR, 1}, {5, SHIFT, 5}, },
			{{-1, ERROR, 2}, {41, ACCEPT, -1}, },
			{{-1, REDUCE, 100}, },
			{{-1, REDUCE, 0}, {37, SHIFT, 1}, },
			{{-1, ERROR, 5}, {6, SHIFT, 7}, {37, SHIFT, 8}, },
			{{-1, REDUCE, 101}, },
			{{-1, ERROR, 7}, {7, SHIFT, 10}, },
			{{-1, REDUCE, 25}, {12, SHIFT, 11}, },
			{{-1, ERROR, 9}, {6, SHIFT, 14}, },
			{{-1, ERROR, 10}, {1, SHIFT, 15}, {8, SHIFT, 16}, {25, SHIFT, 17}, {26, SHIFT, 18}, {27, SHIFT, 19}, {29, SHIFT, 20}, {31, SHIFT, 21}, {32, SHIFT, 22}, {36, SHIFT, 23}, {37, SHIFT, 24}, {38, SHIFT, 25}, {39, SHIFT, 26}, {40, SHIFT, 27}, },
			{{-1, ERROR, 11}, {37, SHIFT, 47}, },
			{{-1, REDUCE, 110}, },
			{{-1, REDUCE, 26}, {12, SHIFT, 11}, },
			{{-1, ERROR, 14}, {7, SHIFT, 49}, },
			{{-1, ERROR, 15}, {1, SHIFT, 15}, {25, SHIFT, 17}, {26, SHIFT, 18}, {31, SHIFT, 21}, {37, SHIFT, 24}, {38, SHIFT, 25}, {39, SHIFT, 26}, {40, SHIFT, 27}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 98}, },
			{{-1, REDUCE, 99}, },
			{{-1, ERROR, 19}, {37, SHIFT, 51}, },
			{{-1, ERROR, 20}, {5, SHIFT, 53}, {30, SHIFT, 54}, {34, SHIFT, 55}, },
			{{-1, ERROR, 21}, {5, SHIFT, 56}, },
			{{-1, ERROR, 22}, {5, SHIFT, 57}, },
			{{-1, ERROR, 23}, {1, SHIFT, 15}, {25, SHIFT, 17}, {26, SHIFT, 18}, {31, SHIFT, 21}, {37, SHIFT, 24}, {38, SHIFT, 25}, {39, SHIFT, 26}, {40, SHIFT, 27}, },
			{{-1, REDUCE, 74}, {14, SHIFT, 59}, },
			{{-1, REDUCE, 97}, },
			{{-1, REDUCE, 96}, },
			{{-1, REDUCE, 95}, },
			{{-1, REDUCE, 102}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 31}, {8, SHIFT, 62}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 33}, {13, SHIFT, 63}, },
			{{-1, REDUCE, 45}, {4, SHIFT, 64}, {20, SHIFT, 65}, {23, SHIFT, 66}, {24, SHIFT, 67}, },
			{{-1, REDUCE, 47}, {19, SHIFT, 68}, },
			{{-1, REDUCE, 49}, {15, SHIFT, 69}, {18, SHIFT, 70}, },
			{{-1, REDUCE, 52}, {16, SHIFT, 71}, {17, SHIFT, 72}, {21, SHIFT, 73}, {22, SHIFT, 74}, },
			{{-1, REDUCE, 57}, {0, SHIFT, 75}, {1, SHIFT, 76}, },
			{{-1, REDUCE, 60}, {2, SHIFT, 77}, {3, SHIFT, 78}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 66}, {5, SHIFT, 79}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 94}, },
			{{-1, ERROR, 46}, {1, SHIFT, 15}, {8, SHIFT, 81}, {25, SHIFT, 17}, {26, SHIFT, 18}, {27, SHIFT, 19}, {29, SHIFT, 20}, {31, SHIFT, 21}, {32, SHIFT, 22}, {36, SHIFT, 23}, {37, SHIFT, 24}, {38, SHIFT, 25}, {39, SHIFT, 26}, {40, SHIFT, 27}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 111}, },
			{{-1, ERROR, 49}, {1, SHIFT, 15}, {8, SHIFT, 84}, {25, SHIFT, 17}, {26, SHIFT, 18}, {27, SHIFT, 19}, {29, SHIFT, 20}, {31, SHIFT, 21}, {32, SHIFT, 22}, {36, SHIFT, 23}, {37, SHIFT, 24}, {38, SHIFT, 25}, {39, SHIFT, 26}, {40, SHIFT, 27}, },
			{{-1, REDUCE, 64}, },
			{{-1, ERROR, 51}, {4, SHIFT, 87}, {5, SHIFT, 5}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 53}, {1, SHIFT, 15}, {25, SHIFT, 17}, {26, SHIFT, 18}, {27, SHIFT, 88}, {31, SHIFT, 21}, {37, SHIFT, 24}, {38, SHIFT, 25}, {39, SHIFT, 26}, {40, SHIFT, 27}, },
			{{-1, ERROR, 54}, {5, SHIFT, 91}, },
			{{-1, ERROR, 55}, {5, SHIFT, 92}, },
			{{-1, ERROR, 56}, {25, SHIFT, 17}, {26, SHIFT, 18}, {31, SHIFT, 21}, {37, SHIFT, 24}, {38, SHIFT, 25}, {39, SHIFT, 26}, {40, SHIFT, 27}, },
			{{-1, ERROR, 57}, {1, SHIFT, 15}, {25, SHIFT, 17}, {26, SHIFT, 18}, {31, SHIFT, 21}, {37, SHIFT, 24}, {38, SHIFT, 25}, {39, SHIFT, 26}, {40, SHIFT, 27}, },
			{{-1, ERROR, 58}, {13, SHIFT, 95}, },
			{{-1, ERROR, 59}, {37, SHIFT, 96}, },
			{{-1, REDUCE, 112}, },
			{{-1, REDUCE, 75}, {14, SHIFT, 59}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 64}, {1, SHIFT, 15}, {25, SHIFT, 17}, {26, SHIFT, 18}, {31, SHIFT, 21}, {37, SHIFT, 24}, {38, SHIFT, 25}, {39, SHIFT, 26}, {40, SHIFT, 27}, },
			{{-1, ERROR, 65}, {1, SHIFT, 15}, {25, SHIFT, 17}, {26, SHIFT, 18}, {31, SHIFT, 21}, {37, SHIFT, 24}, {38, SHIFT, 25}, {39, SHIFT, 26}, {40, SHIFT, 27}, },
			{{-1, ERROR, 66}, {1, SHIFT, 15}, {25, SHIFT, 17}, {26, SHIFT, 18}, {31, SHIFT, 21}, {37, SHIFT, 24}, {38, SHIFT, 25}, {39, SHIFT, 26}, {40, SHIFT, 27}, },
			{{-1, ERROR, 67}, {1, SHIFT, 15}, {25, SHIFT, 17}, {26, SHIFT, 18}, {31, SHIFT, 21}, {37, SHIFT, 24}, {38, SHIFT, 25}, {39, SHIFT, 26}, {40, SHIFT, 27}, },
			{{-1, ERROR, 68}, {1, SHIFT, 15}, {25, SHIFT, 17}, {26, SHIFT, 18}, {31, SHIFT, 21}, {37, SHIFT, 24}, {38, SHIFT, 25}, {39, SHIFT, 26}, {40, SHIFT, 27}, },
			{{-1, ERROR, 69}, {1, SHIFT, 15}, {25, SHIFT, 17}, {26, SHIFT, 18}, {31, SHIFT, 21}, {37, SHIFT, 24}, {38, SHIFT, 25}, {39, SHIFT, 26}, {40, SHIFT, 27}, },
			{{-1, ERROR, 70}, {1, SHIFT, 15}, {25, SHIFT, 17}, {26, SHIFT, 18}, {31, SHIFT, 21}, {37, SHIFT, 24}, {38, SHIFT, 25}, {39, SHIFT, 26}, {40, SHIFT, 27}, },
			{{-1, ERROR, 71}, {25, SHIFT, 17}, {26, SHIFT, 18}, {31, SHIFT, 21}, {37, SHIFT, 24}, {38, SHIFT, 25}, {39, SHIFT, 26}, {40, SHIFT, 27}, },
			{{-1, ERROR, 72}, {25, SHIFT, 17}, {26, SHIFT, 18}, {31, SHIFT, 21}, {37, SHIFT, 24}, {38, SHIFT, 25}, {39, SHIFT, 26}, {40, SHIFT, 27}, },
			{{-1, ERROR, 73}, {25, SHIFT, 17}, {26, SHIFT, 18}, {31, SHIFT, 21}, {37, SHIFT, 24}, {38, SHIFT, 25}, {39, SHIFT, 26}, {40, SHIFT, 27}, },
			{{-1, ERROR, 74}, {25, SHIFT, 17}, {26, SHIFT, 18}, {31, SHIFT, 21}, {37, SHIFT, 24}, {38, SHIFT, 25}, {39, SHIFT, 26}, {40, SHIFT, 27}, },
			{{-1, ERROR, 75}, {1, SHIFT, 15}, {25, SHIFT, 17}, {26, SHIFT, 18}, {31, SHIFT, 21}, {37, SHIFT, 24}, {38, SHIFT, 25}, {39, SHIFT, 26}, {40, SHIFT, 27}, },
			{{-1, ERROR, 76}, {1, SHIFT, 15}, {25, SHIFT, 17}, {26, SHIFT, 18}, {31, SHIFT, 21}, {37, SHIFT, 24}, {38, SHIFT, 25}, {39, SHIFT, 26}, {40, SHIFT, 27}, },
			{{-1, ERROR, 77}, {1, SHIFT, 15}, {25, SHIFT, 17}, {26, SHIFT, 18}, {31, SHIFT, 21}, {37, SHIFT, 24}, {38, SHIFT, 25}, {39, SHIFT, 26}, {40, SHIFT, 27}, },
			{{-1, ERROR, 78}, {1, SHIFT, 15}, {25, SHIFT, 17}, {26, SHIFT, 18}, {31, SHIFT, 21}, {37, SHIFT, 24}, {38, SHIFT, 25}, {39, SHIFT, 26}, {40, SHIFT, 27}, },
			{{-1, ERROR, 79}, {1, SHIFT, 15}, {6, SHIFT, 113}, {25, SHIFT, 17}, {26, SHIFT, 18}, {31, SHIFT, 21}, {37, SHIFT, 24}, {38, SHIFT, 25}, {39, SHIFT, 26}, {40, SHIFT, 27}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 103}, },
			{{-1, ERROR, 83}, {8, SHIFT, 116}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 85}, {8, SHIFT, 117}, },
			{{-1, ERROR, 86}, {1, SHIFT, 15}, {8, SHIFT, 118}, {25, SHIFT, 17}, {26, SHIFT, 18}, {27, SHIFT, 19}, {29, SHIFT, 20}, {31, SHIFT, 21}, {32, SHIFT, 22}, {36, SHIFT, 23}, {37, SHIFT, 24}, {38, SHIFT, 25}, {39, SHIFT, 26}, {40, SHIFT, 27}, },
			{{-1, ERROR, 87}, {1, SHIFT, 15}, {9, SHIFT, 120}, {25, SHIFT, 17}, {26, SHIFT, 18}, {31, SHIFT, 21}, {37, SHIFT, 24}, {38, SHIFT, 25}, {39, SHIFT, 26}, {40, SHIFT, 27}, },
			{{-1, ERROR, 88}, {37, SHIFT, 123}, },
			{{-1, ERROR, 89}, {6, SHIFT, 124}, {12, SHIFT, 125}, },
			{{-1, REDUCE, 37}, {0, SHIFT, 75}, {1, SHIFT, 76}, },
			{{-1, ERROR, 91}, {1, SHIFT, 15}, {25, SHIFT, 17}, {26, SHIFT, 18}, {31, SHIFT, 21}, {37, SHIFT, 24}, {38, SHIFT, 25}, {39, SHIFT, 26}, {40, SHIFT, 27}, },
			{{-1, ERROR, 92}, {37, SHIFT, 128}, },
			{{-1, ERROR, 93}, {28, SHIFT, 129}, },
			{{-1, ERROR, 94}, {6, SHIFT, 130}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 113}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 46}, {19, SHIFT, 68}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 48}, {15, SHIFT, 69}, {18, SHIFT, 70}, },
			{{-1, REDUCE, 50}, {16, SHIFT, 71}, {17, SHIFT, 72}, {21, SHIFT, 73}, {22, SHIFT, 74}, },
			{{-1, REDUCE, 51}, {16, SHIFT, 71}, {17, SHIFT, 72}, {21, SHIFT, 73}, {22, SHIFT, 74}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 58}, {2, SHIFT, 77}, {3, SHIFT, 78}, },
			{{-1, REDUCE, 59}, {2, SHIFT, 77}, {3, SHIFT, 78}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 70}, {7, SHIFT, 131}, },
			{{-1, ERROR, 114}, {6, SHIFT, 133}, },
			{{-1, REDUCE, 20}, {12, SHIFT, 134}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 119}, {8, SHIFT, 137}, },
			{{-1, ERROR, 120}, {1, SHIFT, 15}, {25, SHIFT, 17}, {26, SHIFT, 18}, {31, SHIFT, 21}, {37, SHIFT, 24}, {38, SHIFT, 25}, {39, SHIFT, 26}, {40, SHIFT, 27}, },
			{{-1, ERROR, 121}, {12, SHIFT, 139}, {13, SHIFT, 140}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 123}, {4, SHIFT, 143}, },
			{{-1, ERROR, 124}, {7, SHIFT, 131}, },
			{{-1, ERROR, 125}, {1, SHIFT, 15}, {25, SHIFT, 17}, {26, SHIFT, 18}, {31, SHIFT, 21}, {37, SHIFT, 24}, {38, SHIFT, 25}, {39, SHIFT, 26}, {40, SHIFT, 27}, },
			{{-1, ERROR, 126}, {6, SHIFT, 146}, },
			{{-1, ERROR, 127}, {6, SHIFT, 147}, },
			{{-1, ERROR, 128}, {35, SHIFT, 148}, },
			{{-1, ERROR, 129}, {25, SHIFT, 17}, {26, SHIFT, 18}, {31, SHIFT, 21}, {37, SHIFT, 24}, {38, SHIFT, 25}, {39, SHIFT, 26}, {40, SHIFT, 27}, },
			{{-1, ERROR, 130}, {7, SHIFT, 131}, },
			{{-1, ERROR, 131}, {1, SHIFT, 15}, {8, SHIFT, 151}, {25, SHIFT, 17}, {26, SHIFT, 18}, {27, SHIFT, 19}, {29, SHIFT, 20}, {31, SHIFT, 21}, {32, SHIFT, 22}, {37, SHIFT, 24}, {38, SHIFT, 25}, {39, SHIFT, 26}, {40, SHIFT, 27}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 71}, {7, SHIFT, 131}, },
			{{-1, ERROR, 134}, {1, SHIFT, 15}, {25, SHIFT, 17}, {26, SHIFT, 18}, {31, SHIFT, 21}, {37, SHIFT, 24}, {38, SHIFT, 25}, {39, SHIFT, 26}, {40, SHIFT, 27}, },
			{{-1, REDUCE, 108}, },
			{{-1, REDUCE, 21}, {12, SHIFT, 134}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 138}, {10, SHIFT, 156}, {12, SHIFT, 157}, },
			{{-1, ERROR, 139}, {27, SHIFT, 160}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 104}, },
			{{-1, ERROR, 142}, {12, SHIFT, 139}, {13, SHIFT, 161}, },
			{{-1, ERROR, 143}, {1, SHIFT, 15}, {25, SHIFT, 17}, {26, SHIFT, 18}, {31, SHIFT, 21}, {37, SHIFT, 24}, {38, SHIFT, 25}, {39, SHIFT, 26}, {40, SHIFT, 27}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 39}, {0, SHIFT, 75}, {1, SHIFT, 76}, },
			{{-1, ERROR, 146}, {7, SHIFT, 131}, },
			{{-1, ERROR, 147}, {7, SHIFT, 131}, },
			{{-1, ERROR, 148}, {37, SHIFT, 24}, },
			{{-1, ERROR, 149}, {6, SHIFT, 167}, },
			{{-1, REDUCE, 32}, {33, SHIFT, 168}, },
			{{-1, REDUCE, 40}, },
			{{-1, ERROR, 152}, {1, SHIFT, 15}, {8, SHIFT, 170}, {25, SHIFT, 17}, {26, SHIFT, 18}, {27, SHIFT, 19}, {29, SHIFT, 20}, {31, SHIFT, 21}, {32, SHIFT, 22}, {37, SHIFT, 24}, {38, SHIFT, 25}, {39, SHIFT, 26}, {40, SHIFT, 27}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 109}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 157}, {1, SHIFT, 15}, {25, SHIFT, 17}, {26, SHIFT, 18}, {31, SHIFT, 21}, {37, SHIFT, 24}, {38, SHIFT, 25}, {39, SHIFT, 26}, {40, SHIFT, 27}, },
			{{-1, REDUCE, 106}, },
			{{-1, ERROR, 159}, {10, SHIFT, 172}, {12, SHIFT, 157}, },
			{{-1, ERROR, 160}, {37, SHIFT, 174}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 105}, },
			{{-1, REDUCE, 38}, {0, SHIFT, 75}, {1, SHIFT, 76}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 166}, {6, SHIFT, 175}, },
			{{-1, REDUCE, 93}, },
			{{-1, ERROR, 168}, {7, SHIFT, 131}, {32, SHIFT, 176}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 107}, },
			{{-1, ERROR, 174}, {4, SHIFT, 178}, },
			{{-1, ERROR, 175}, {7, SHIFT, 131}, },
			{{-1, ERROR, 176}, {5, SHIFT, 180}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 178}, {1, SHIFT, 15}, {9, SHIFT, 120}, {25, SHIFT, 17}, {26, SHIFT, 18}, {31, SHIFT, 21}, {37, SHIFT, 24}, {38, SHIFT, 25}, {39, SHIFT, 26}, {40, SHIFT, 27}, },
			{{-1, REDUCE, 31}, },
			{{-1, ERROR, 180}, {1, SHIFT, 15}, {25, SHIFT, 17}, {26, SHIFT, 18}, {31, SHIFT, 21}, {37, SHIFT, 24}, {38, SHIFT, 25}, {39, SHIFT, 26}, {40, SHIFT, 27}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 182}, {6, SHIFT, 183}, },
			{{-1, ERROR, 183}, {7, SHIFT, 131}, },
			{{-1, REDUCE, 35}, {33, SHIFT, 168}, },
			{{-1, REDUCE, 36}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 3}, {4, 6}, {19, 52}, },
			{{-1, 28}, {46, 82}, {86, 82}, {152, 82}, },
			{{-1, 29}, },
			{{-1, 121}, {178, 181}, },
			{{-1, 141}, {142, 162}, },
			{{-1, 158}, {159, 173}, },
			{{-1, 114}, },
			{{-1, 135}, {136, 155}, },
			{{-1, 30}, },
			{{-1, 31}, {46, 83}, {49, 85}, {86, 119}, },
			{{-1, 9}, },
			{{-1, 12}, {13, 48}, },
			{{-1, 32}, },
			{{-1, 169}, {184, 185}, },
			{{-1, 89}, },
			{{-1, 126}, },
			{{-1, 132}, {124, 144}, {130, 150}, {133, 153}, {146, 164}, {147, 165}, {168, 177}, {175, 179}, {183, 184}, },
			{{-1, 33}, {23, 58}, {57, 94}, {64, 98}, {66, 100}, {67, 101}, {79, 115}, {87, 122}, {91, 127}, {120, 138}, {134, 154}, {157, 171}, {178, 122}, {180, 182}, },
			{{-1, 34}, },
			{{-1, 35}, {65, 99}, },
			{{-1, 36}, {68, 102}, },
			{{-1, 37}, {69, 103}, {70, 104}, },
			{{-1, 38}, {53, 90}, {125, 145}, {143, 163}, },
			{{-1, 39}, {75, 109}, {76, 110}, },
			{{-1, 40}, {15, 50}, {77, 111}, {78, 112}, },
			{{-1, 41}, {56, 93}, {71, 105}, {72, 106}, {73, 107}, {74, 108}, {129, 149}, },
			{{-1, 80}, },
			{{-1, 42}, {148, 166}, },
			{{-1, 60}, {61, 97}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, 43}, },
			{{-1, 44}, },
			{{-1, 45}, },
			{{-1, 4}, },
			{{-1, 46}, {49, 86}, {131, 152}, },
			{{-1, 142}, },
			{{-1, 159}, },
			{{-1, 136}, },
			{{-1, 13}, },
			{{-1, 61}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: identifier",
			"expecting: '('",
			"expecting: EOF",
			"expecting: identifier, EOF",
			"expecting: ')', identifier",
			"expecting: '{'",
			"expecting: ')', ','",
			"expecting: ')'",
			"expecting: '-', '}', 'true', 'false', 'new', 'repeat', 'random', 'if', 'return', identifier, string literal, double literal, integer literal",
			"expecting: '-', 'true', 'false', 'random', identifier, string literal, double literal, integer literal",
			"expecting: '-', '}', 'true', 'false', 'new', 'repeat', 'random', 'if', 'return', identifier, string literal, double literal, integer literal, EOF",
			"expecting: '+', '-', '*', '/', '=', ')', ']', ',', ';', '==', '<=', '>=', '!=', '&&', '||', '<', '>', '+=', '-=', 'to'",
			"expecting: '(', 'while', 'foreach'",
			"expecting: '+', '-', '*', '/', '=', '(', ')', ']', ',', ';', '.', '==', '<=', '>=', '!=', '&&', '||', '<', '>', '+=', '-=', 'to'",
			"expecting: '}'",
			"expecting: ';'",
			"expecting: '=', ')', ']', ',', ';', '||', '+=', '-='",
			"expecting: '=', ')', ']', ',', ';', '&&', '||', '+=', '-='",
			"expecting: '=', ')', ']', ',', ';', '==', '!=', '&&', '||', '+=', '-='",
			"expecting: '=', ')', ']', ',', ';', '==', '<=', '>=', '!=', '&&', '||', '<', '>', '+=', '-='",
			"expecting: '+', '-', '=', ')', ']', ',', ';', '==', '<=', '>=', '!=', '&&', '||', '<', '>', '+=', '-='",
			"expecting: '+', '-', '*', '/', '=', ')', ']', ',', ';', '==', '<=', '>=', '!=', '&&', '||', '<', '>', '+=', '-='",
			"expecting: '+', '-', '*', '/', '=', '(', ')', ']', ',', ';', '==', '<=', '>=', '!=', '&&', '||', '<', '>', '+=', '-=', 'to'",
			"expecting: '=', '('",
			"expecting: '-', 'true', 'false', 'new', 'random', identifier, string literal, double literal, integer literal",
			"expecting: 'true', 'false', 'random', identifier, string literal, double literal, integer literal",
			"expecting: '-', ')', 'true', 'false', 'random', identifier, string literal, double literal, integer literal",
			"expecting: '-', '[', 'true', 'false', 'random', identifier, string literal, double literal, integer literal",
			"expecting: '+', '-', ')', ','",
			"expecting: 'to'",
			"expecting: ')', ']', ',', ';'",
			"expecting: '+', '-', '*', '/', '=', ')', '{', ']', ',', ';', '==', '<=', '>=', '!=', '&&', '||', '<', '>', '+=', '-=', 'to'",
			"expecting: ',', ';'",
			"expecting: '='",
			"expecting: 'in'",
			"expecting: '-', '}', 'true', 'false', 'new', 'repeat', 'random', 'if', identifier, string literal, double literal, integer literal",
			"expecting: ']', ','",
			"expecting: 'new'",
			"expecting: '+', '-', ')'",
			"expecting: '-', '}', 'true', 'false', 'new', 'repeat', 'random', 'if', 'else', 'return', identifier, string literal, double literal, integer literal",
			"expecting: '+', '-', '*', '/', '=', ')', '}', ']', ',', ';', '==', '<=', '>=', '!=', '&&', '||', '<', '>', '+=', '-=', 'true', 'false', 'new', 'to', 'repeat', 'random', 'if', 'else', 'return', identifier, string literal, double literal, integer literal",
			"expecting: '{', 'if'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 3, 4, 3, 5, 6, 7, 8, 0, 6, 6, 5, 9, 10, 11, 11, 0, 12, 1, 1, 9, 13, 11, 11, 11, 8, 8, 8, 14, 8, 15, 16, 17, 18, 19, 20, 21, 21, 21, 22, 11, 11, 11, 8, 6, 6, 8, 21, 23, 8, 24, 1, 1, 25, 9, 15, 0, 13, 13, 10, 8, 9, 9, 9, 9, 9, 9, 9, 25, 25, 25, 25, 9, 9, 9, 9, 26, 11, 10, 8, 14, 10, 14, 8, 27, 0, 6, 28, 9, 0, 29, 7, 14, 13, 13, 30, 17, 30, 30, 18, 19, 19, 19, 19, 19, 19, 21, 21, 21, 21, 31, 7, 6, 10, 10, 10, 14, 9, 32, 32, 33, 5, 9, 7, 7, 34, 25, 5, 35, 11, 31, 9, 6, 6, 10, 36, 37, 8, 32, 32, 9, 8, 38, 5, 5, 0, 7, 39, 40, 35, 11, 6, 6, 32, 9, 36, 36, 0, 8, 32, 28, 8, 8, 7, 11, 41, 8, 40, 36, 32, 36, 33, 5, 1, 8, 27, 8, 9, 32, 7, 5, 39, 8, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
