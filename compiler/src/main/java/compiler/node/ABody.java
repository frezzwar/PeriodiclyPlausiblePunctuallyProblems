/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.node;

import java.util.*;
import compiler.analysis.*;

@SuppressWarnings("nls")
public final class ABody extends PBody
{
    private TCurlyL _curlyL_;
    private final LinkedList<PStmt> _stmt_ = new LinkedList<PStmt>();
    private PReturnValue _returnValue_;
    private TCurlyR _curlyR_;

    public ABody()
    {
        // Constructor
    }

    public ABody(
        @SuppressWarnings("hiding") TCurlyL _curlyL_,
        @SuppressWarnings("hiding") List<?> _stmt_,
        @SuppressWarnings("hiding") PReturnValue _returnValue_,
        @SuppressWarnings("hiding") TCurlyR _curlyR_)
    {
        // Constructor
        setCurlyL(_curlyL_);

        setStmt(_stmt_);

        setReturnValue(_returnValue_);

        setCurlyR(_curlyR_);

    }

    @Override
    public Object clone()
    {
        return new ABody(
            cloneNode(this._curlyL_),
            cloneList(this._stmt_),
            cloneNode(this._returnValue_),
            cloneNode(this._curlyR_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseABody(this);
    }

    public TCurlyL getCurlyL()
    {
        return this._curlyL_;
    }

    public void setCurlyL(TCurlyL node)
    {
        if(this._curlyL_ != null)
        {
            this._curlyL_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._curlyL_ = node;
    }

    public LinkedList<PStmt> getStmt()
    {
        return this._stmt_;
    }

    public void setStmt(List<?> list)
    {
        for(PStmt e : this._stmt_)
        {
            e.parent(null);
        }
        this._stmt_.clear();

        for(Object obj_e : list)
        {
            PStmt e = (PStmt) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._stmt_.add(e);
        }
    }

    public PReturnValue getReturnValue()
    {
        return this._returnValue_;
    }

    public void setReturnValue(PReturnValue node)
    {
        if(this._returnValue_ != null)
        {
            this._returnValue_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._returnValue_ = node;
    }

    public TCurlyR getCurlyR()
    {
        return this._curlyR_;
    }

    public void setCurlyR(TCurlyR node)
    {
        if(this._curlyR_ != null)
        {
            this._curlyR_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._curlyR_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._curlyL_)
            + toString(this._stmt_)
            + toString(this._returnValue_)
            + toString(this._curlyR_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._curlyL_ == child)
        {
            this._curlyL_ = null;
            return;
        }

        if(this._stmt_.remove(child))
        {
            return;
        }

        if(this._returnValue_ == child)
        {
            this._returnValue_ = null;
            return;
        }

        if(this._curlyR_ == child)
        {
            this._curlyR_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._curlyL_ == oldChild)
        {
            setCurlyL((TCurlyL) newChild);
            return;
        }

        for(ListIterator<PStmt> i = this._stmt_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PStmt) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._returnValue_ == oldChild)
        {
            setReturnValue((PReturnValue) newChild);
            return;
        }

        if(this._curlyR_ == oldChild)
        {
            setCurlyR((TCurlyR) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
