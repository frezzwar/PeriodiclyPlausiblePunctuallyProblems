Prog -> Lines $
Lines -> Line Lines | EPSILON
Line -> Stmt | Dcl | Print | ControlStructure
Print -> write '(' PrintStmt ')' ';'
PrintStmt -> STRINGLITERAL PrintStmt | Val PrintStmt| EPSILON
Dcl -> new id assign (Val Expr | List);
List -> '[' Listvariables ']'
Listvariables -> (id | Val ) Listvariables | EPSILON
Stmt -> id  typeofAssign
ControlStructure -> RepeatStructure | IfStructure | SwitchStructure
                 
RepeatStructure -> repeat ( RepeatFor|RepeatWhileStructure|RepeatForEach )
RepeatFor -> '('(INTLITERAL|id) ')' '{' Lines '}'
RepeatForEach -> foreach ( id in id ) %first id is new variable, second id has to be a list
RepeatWhileStructure -> while '(' BooleanExpr ')' '{' Lines '}'
IfStructure -> if '(' BooleanExpr ')' '{' Lines '}' [ else (Ifstructure |'{' Lines '}') ]
SwitchStructure -> switch  ( Val ) Cases
Cases -> case ( (Val|INTLITERAL) to (Val|INTLITERAL) ) Cases | EPSILON

IfMatched ->   if ( BooleanExpr ) matched else matched | Lines
IfUnmatched -> if ( BooleanExpr ) matched |
               if ( BooleanExpr ) unmatched |
               if ( BooleanExpr ) matched else unmatched



typeofAssign -> IncrAssign | NormAssign
IncrAssign -> Operator assign Val Expr;
NormAssign -> assign Val Expr ;

Expr -> Operator Val Expr |EPSILON
BooleanExpr -> Val [ BoolOperators Val ]
Val -> id | INTLITERAL | FLOATLITERAL | BOOLLITERAL | rnd
Operator -> plus | minus | multiply | divide
BoolOperators -> isExactly | and | or | not
rnd -> 'random' '(' (id|INTLITERAL) 'to' (id|INTLITERAL) ')'
