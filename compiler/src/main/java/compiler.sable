Package     compiler;

Helpers
    all             = [0 .. 0xFFF];
    tab             = 9;
    lf              = 10;
    cr              = 13;
    letter          = [['a' .. 'z'] + ['A' .. 'Z']];
    digit           = ['0' .. '9'];
    nonzero_digit   = ['1' .. '9'];
    normal          = [[digit + '_'] + letter];
    dot             = '.';
    not_cr_lf       = [all - [cr + lf]];
    eol             = cr | lf | cr lf;


Tokens
    plus            = '+';
    minus           = '-';
    mult            = '*';
    div             = '/';
    assign          = '=';
    par_l           = '(';
    par_r           = ')';
    curly_l         = '{';
    curly_r         = '}';
    brack_l         = '[';
    brack_r         = ']';
    quote           = '"';
    comma           = ',';
    semi_c          = ';';
    blank           = (' ' | tab | lf | cr)*;




    dot             = '.';
    equal           = '==';
    not_equal       = '!=';
    less_equal      = '<=';
    greater_equal   = '>=';
    negate          = '!';
    and             = '&&';
    or              = '||';
    less            = '<';
    greater         = '>';
    true            = 'true';
    false           = 'false';
    new             = 'new';
    event           = 'event';
    to              = 'to';
    repeat          = 'repeat';
    while           = 'while';
    random          = 'random';
    if              = 'if';
    else            = 'else';
    foreach         = 'foreach';
    in              = 'in';
    return          = 'return';
    main            = 'program';



    figure          = 'figure';
    grid            = 'grid';



    identifier      = letter (normal)* ;


    string_literal  = '"' not_cr_lf+ '"';
    number_literal  = (digit+ | digit* dot digit+);

    multiline_comment   = '/' '*' [all - ['*' + '/']]* '*' '/' ;
    oneline_comment     = '//' [all - [cr + lf]]* eol?;

Ignored Tokens
    blank,
    multiline_comment,
    oneline_comment;

Productions
    program             = global_decl* main body func_decl* event_decl?;

    stmt                = {variable_decl} variable_decl
                        | {control_stmt} control_stmt
                        | {expr} expr semi_c;

    global_decl         = {var} variable_decl
                        | {obj} object_decl
                        | {grid} grid_decl;

    event_decl          = event par_l identifier par_r body;

    grid_decl           = new identifier assign grid par_l [int1]:value comma [int2]:value par_r semi_c;

    object_decl         = new [id1]:identifier assign figure par_l [id2]:identifier par_r obj_body;

    func_decl           = new identifier par_l params? par_r body;

    variable_decl       = new identifier assign_operator variable semi_c;

    variable            = {expr} expr
                        | {list} brack_l list_var? brack_r;

    list_var            = value list_var_tail*;

    list_var_tail       = comma value;

    call_params         = expr call_params_tail*;

    call_params_tail    = comma expr;

    return_value        = return expr semi_c;

    params              = identifier params_tail*;

    params_tail         = comma identifier;

    control_stmt        = {while} repeat while condition body
                        | {repeat} repeat repeat_count body
                        | {foreach} repeat foreach par_l [identifier]:identifier in [list]:identifier par_r body
                        | {if_stmt} if condition body else_stmt?;

    else_stmt           = {else_stmt} else body
                        | {elseif_stmt} else if condition body else_stmt?;

    condition           = par_l bool_expr par_r;

    repeat_count        = par_l value par_r;

    body                = curly_l stmt* return_value? curly_r;

    obj_body            = curly_l in_obj_decl* curly_r;

    in_obj_decl         = {method} func_decl
                        | {member} variable_decl;

    expr                = {assign} assign_expr
                        | {boolean} negation_operator? bool_expr
                        | {numeric} value operator expr
                        | {value} value
                        | {parenthesized} par_l expr par_r
                        | {parama_bool} par_l [body]:expr par_r bool_operator [forllow_expr]:expr
                        | {parama_numeric} par_l [body]:expr par_r operator [forllow_expr]:expr;

    assign_expr         = {var} identifier member? assign_operator expr;

    bool_expr           = value bool_operator expr;

    value               = {id} identifier member*
                        | {method_call} identifier dot func_call
                        | {grid_pos} func_call dot identifier grid_params?
                        | {func_call} func_call
                        | {literal} literal;

    grid_params         = par_l identifier par_r;

    func_call           = identifier par_l call_params? par_r;

    member              = dot identifier;

    operator            = {minus} minus
                        | {plus} plus
                        | {mult} mult
                        | {div} div;

    assign_operator     = assign;

    bool_operator       = {equal} equal
                        | {not_equal} not_equal
                        | {less_equal} less_equal
                        | {greater_equal} greater_equal
                        | {and} and
                        | {or} or
                        | {less} less
                        | {greater} greater;

    negation_operator   = negate;

    literal             = {boolean} boolean_literal
                        | {number} number_literal
                        | {string} string_literal;

    boolean_literal 	= {true} true
                        | {false} false;

