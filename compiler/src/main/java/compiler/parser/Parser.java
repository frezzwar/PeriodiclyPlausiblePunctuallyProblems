/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.parser;

import compiler.lexer.*;
import compiler.node.*;
import compiler.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAprogram1Program */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AAprogram2Program */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list, false);
            }
            break;
            case 2: /* reduce AAprogram3Program */
            {
                ArrayList<Object> list = new2();
                push(goTo(0), list, false);
            }
            break;
            case 3: /* reduce AAprogram4Program */
            {
                ArrayList<Object> list = new3();
                push(goTo(0), list, false);
            }
            break;
            case 4: /* reduce AAprogram5Program */
            {
                ArrayList<Object> list = new4();
                push(goTo(0), list, false);
            }
            break;
            case 5: /* reduce AAprogram6Program */
            {
                ArrayList<Object> list = new5();
                push(goTo(0), list, false);
            }
            break;
            case 6: /* reduce AAprogram7Program */
            {
                ArrayList<Object> list = new6();
                push(goTo(0), list, false);
            }
            break;
            case 7: /* reduce AAprogram8Program */
            {
                ArrayList<Object> list = new7();
                push(goTo(0), list, false);
            }
            break;
            case 8: /* reduce AVariableDeclStmt */
            {
                ArrayList<Object> list = new8();
                push(goTo(1), list, false);
            }
            break;
            case 9: /* reduce AControlStmtStmt */
            {
                ArrayList<Object> list = new9();
                push(goTo(1), list, false);
            }
            break;
            case 10: /* reduce AExprStmt */
            {
                ArrayList<Object> list = new10();
                push(goTo(1), list, false);
            }
            break;
            case 11: /* reduce AVarGlobalDecl */
            {
                ArrayList<Object> list = new11();
                push(goTo(2), list, false);
            }
            break;
            case 12: /* reduce AObjGlobalDecl */
            {
                ArrayList<Object> list = new12();
                push(goTo(2), list, false);
            }
            break;
            case 13: /* reduce AGridGlobalDecl */
            {
                ArrayList<Object> list = new13();
                push(goTo(2), list, false);
            }
            break;
            case 14: /* reduce AEventDecl */
            {
                ArrayList<Object> list = new14();
                push(goTo(3), list, false);
            }
            break;
            case 15: /* reduce AGridDecl */
            {
                ArrayList<Object> list = new15();
                push(goTo(4), list, false);
            }
            break;
            case 16: /* reduce AObjectDecl */
            {
                ArrayList<Object> list = new16();
                push(goTo(5), list, false);
            }
            break;
            case 17: /* reduce AAfuncdecl1FuncDecl */
            {
                ArrayList<Object> list = new17();
                push(goTo(6), list, false);
            }
            break;
            case 18: /* reduce AAfuncdecl2FuncDecl */
            {
                ArrayList<Object> list = new18();
                push(goTo(6), list, false);
            }
            break;
            case 19: /* reduce AVariableDecl */
            {
                ArrayList<Object> list = new19();
                push(goTo(7), list, false);
            }
            break;
            case 20: /* reduce AExprVariable */
            {
                ArrayList<Object> list = new20();
                push(goTo(8), list, false);
            }
            break;
            case 21: /* reduce AAlistvariable1Variable */
            {
                ArrayList<Object> list = new21();
                push(goTo(8), list, false);
            }
            break;
            case 22: /* reduce AAlistvariable2Variable */
            {
                ArrayList<Object> list = new22();
                push(goTo(8), list, false);
            }
            break;
            case 23: /* reduce AAlistvar1ListVar */
            {
                ArrayList<Object> list = new23();
                push(goTo(9), list, false);
            }
            break;
            case 24: /* reduce AAlistvar2ListVar */
            {
                ArrayList<Object> list = new24();
                push(goTo(9), list, false);
            }
            break;
            case 25: /* reduce AListVarTail */
            {
                ArrayList<Object> list = new25();
                push(goTo(10), list, false);
            }
            break;
            case 26: /* reduce AAcallparams1CallParams */
            {
                ArrayList<Object> list = new26();
                push(goTo(11), list, false);
            }
            break;
            case 27: /* reduce AAcallparams2CallParams */
            {
                ArrayList<Object> list = new27();
                push(goTo(11), list, false);
            }
            break;
            case 28: /* reduce ACallParamsTail */
            {
                ArrayList<Object> list = new28();
                push(goTo(12), list, false);
            }
            break;
            case 29: /* reduce AReturnValue */
            {
                ArrayList<Object> list = new29();
                push(goTo(13), list, false);
            }
            break;
            case 30: /* reduce AAparams1Params */
            {
                ArrayList<Object> list = new30();
                push(goTo(14), list, false);
            }
            break;
            case 31: /* reduce AAparams2Params */
            {
                ArrayList<Object> list = new31();
                push(goTo(14), list, false);
            }
            break;
            case 32: /* reduce AParamsTail */
            {
                ArrayList<Object> list = new32();
                push(goTo(15), list, false);
            }
            break;
            case 33: /* reduce AWhileControlStmt */
            {
                ArrayList<Object> list = new33();
                push(goTo(16), list, false);
            }
            break;
            case 34: /* reduce ARepeatControlStmt */
            {
                ArrayList<Object> list = new34();
                push(goTo(16), list, false);
            }
            break;
            case 35: /* reduce AForeachControlStmt */
            {
                ArrayList<Object> list = new35();
                push(goTo(16), list, false);
            }
            break;
            case 36: /* reduce AAifstmtcontrolstmt1ControlStmt */
            {
                ArrayList<Object> list = new36();
                push(goTo(16), list, false);
            }
            break;
            case 37: /* reduce AAifstmtcontrolstmt2ControlStmt */
            {
                ArrayList<Object> list = new37();
                push(goTo(16), list, false);
            }
            break;
            case 38: /* reduce AElseStmtElseStmt */
            {
                ArrayList<Object> list = new38();
                push(goTo(17), list, false);
            }
            break;
            case 39: /* reduce AAelseifstmtelsestmt1ElseStmt */
            {
                ArrayList<Object> list = new39();
                push(goTo(17), list, false);
            }
            break;
            case 40: /* reduce AAelseifstmtelsestmt2ElseStmt */
            {
                ArrayList<Object> list = new40();
                push(goTo(17), list, false);
            }
            break;
            case 41: /* reduce ACondition */
            {
                ArrayList<Object> list = new41();
                push(goTo(18), list, false);
            }
            break;
            case 42: /* reduce ARepeatCount */
            {
                ArrayList<Object> list = new42();
                push(goTo(19), list, false);
            }
            break;
            case 43: /* reduce AAbody1Body */
            {
                ArrayList<Object> list = new43();
                push(goTo(20), list, false);
            }
            break;
            case 44: /* reduce AAbody2Body */
            {
                ArrayList<Object> list = new44();
                push(goTo(20), list, false);
            }
            break;
            case 45: /* reduce AAbody3Body */
            {
                ArrayList<Object> list = new45();
                push(goTo(20), list, false);
            }
            break;
            case 46: /* reduce AAbody4Body */
            {
                ArrayList<Object> list = new46();
                push(goTo(20), list, false);
            }
            break;
            case 47: /* reduce AAobjbody1ObjBody */
            {
                ArrayList<Object> list = new47();
                push(goTo(21), list, false);
            }
            break;
            case 48: /* reduce AAobjbody2ObjBody */
            {
                ArrayList<Object> list = new48();
                push(goTo(21), list, false);
            }
            break;
            case 49: /* reduce AMethodInObjDecl */
            {
                ArrayList<Object> list = new49();
                push(goTo(22), list, false);
            }
            break;
            case 50: /* reduce AMemberInObjDecl */
            {
                ArrayList<Object> list = new50();
                push(goTo(22), list, false);
            }
            break;
            case 51: /* reduce AAssignExpr */
            {
                ArrayList<Object> list = new51();
                push(goTo(23), list, false);
            }
            break;
            case 52: /* reduce AAbooleanexpr1Expr */
            {
                ArrayList<Object> list = new52();
                push(goTo(23), list, false);
            }
            break;
            case 53: /* reduce AAbooleanexpr2Expr */
            {
                ArrayList<Object> list = new53();
                push(goTo(23), list, false);
            }
            break;
            case 54: /* reduce ANumericExpr */
            {
                ArrayList<Object> list = new54();
                push(goTo(23), list, false);
            }
            break;
            case 55: /* reduce AValueExpr */
            {
                ArrayList<Object> list = new55();
                push(goTo(23), list, false);
            }
            break;
            case 56: /* reduce AParenthesizedExpr */
            {
                ArrayList<Object> list = new56();
                push(goTo(23), list, false);
            }
            break;
            case 57: /* reduce AParamaBoolExpr */
            {
                ArrayList<Object> list = new57();
                push(goTo(23), list, false);
            }
            break;
            case 58: /* reduce AParamaNumericExpr */
            {
                ArrayList<Object> list = new58();
                push(goTo(23), list, false);
            }
            break;
            case 59: /* reduce AAvarassignexpr1AssignExpr */
            {
                ArrayList<Object> list = new59();
                push(goTo(24), list, false);
            }
            break;
            case 60: /* reduce AAvarassignexpr2AssignExpr */
            {
                ArrayList<Object> list = new60();
                push(goTo(24), list, false);
            }
            break;
            case 61: /* reduce ABoolExpr */
            {
                ArrayList<Object> list = new61();
                push(goTo(25), list, false);
            }
            break;
            case 62: /* reduce AAidvalue1Value */
            {
                ArrayList<Object> list = new62();
                push(goTo(26), list, false);
            }
            break;
            case 63: /* reduce AAidvalue2Value */
            {
                ArrayList<Object> list = new63();
                push(goTo(26), list, false);
            }
            break;
            case 64: /* reduce AMethodCallValue */
            {
                ArrayList<Object> list = new64();
                push(goTo(26), list, false);
            }
            break;
            case 65: /* reduce AAgridposvalue1Value */
            {
                ArrayList<Object> list = new65();
                push(goTo(26), list, false);
            }
            break;
            case 66: /* reduce AAgridposvalue2Value */
            {
                ArrayList<Object> list = new66();
                push(goTo(26), list, false);
            }
            break;
            case 67: /* reduce AFuncCallValue */
            {
                ArrayList<Object> list = new67();
                push(goTo(26), list, false);
            }
            break;
            case 68: /* reduce ALiteralValue */
            {
                ArrayList<Object> list = new68();
                push(goTo(26), list, false);
            }
            break;
            case 69: /* reduce AGridParams */
            {
                ArrayList<Object> list = new69();
                push(goTo(27), list, false);
            }
            break;
            case 70: /* reduce AAfunccall1FuncCall */
            {
                ArrayList<Object> list = new70();
                push(goTo(28), list, false);
            }
            break;
            case 71: /* reduce AAfunccall2FuncCall */
            {
                ArrayList<Object> list = new71();
                push(goTo(28), list, false);
            }
            break;
            case 72: /* reduce AMember */
            {
                ArrayList<Object> list = new72();
                push(goTo(29), list, false);
            }
            break;
            case 73: /* reduce AMinusOperator */
            {
                ArrayList<Object> list = new73();
                push(goTo(30), list, false);
            }
            break;
            case 74: /* reduce APlusOperator */
            {
                ArrayList<Object> list = new74();
                push(goTo(30), list, false);
            }
            break;
            case 75: /* reduce AMultOperator */
            {
                ArrayList<Object> list = new75();
                push(goTo(30), list, false);
            }
            break;
            case 76: /* reduce ADivOperator */
            {
                ArrayList<Object> list = new76();
                push(goTo(30), list, false);
            }
            break;
            case 77: /* reduce AAssignOperator */
            {
                ArrayList<Object> list = new77();
                push(goTo(31), list, false);
            }
            break;
            case 78: /* reduce AEqualBoolOperator */
            {
                ArrayList<Object> list = new78();
                push(goTo(32), list, false);
            }
            break;
            case 79: /* reduce ANotEqualBoolOperator */
            {
                ArrayList<Object> list = new79();
                push(goTo(32), list, false);
            }
            break;
            case 80: /* reduce ALessEqualBoolOperator */
            {
                ArrayList<Object> list = new80();
                push(goTo(32), list, false);
            }
            break;
            case 81: /* reduce AGreaterEqualBoolOperator */
            {
                ArrayList<Object> list = new81();
                push(goTo(32), list, false);
            }
            break;
            case 82: /* reduce AAndBoolOperator */
            {
                ArrayList<Object> list = new82();
                push(goTo(32), list, false);
            }
            break;
            case 83: /* reduce AOrBoolOperator */
            {
                ArrayList<Object> list = new83();
                push(goTo(32), list, false);
            }
            break;
            case 84: /* reduce ALessBoolOperator */
            {
                ArrayList<Object> list = new84();
                push(goTo(32), list, false);
            }
            break;
            case 85: /* reduce AGreaterBoolOperator */
            {
                ArrayList<Object> list = new85();
                push(goTo(32), list, false);
            }
            break;
            case 86: /* reduce ANegationOperator */
            {
                ArrayList<Object> list = new86();
                push(goTo(33), list, false);
            }
            break;
            case 87: /* reduce ABooleanLiteral */
            {
                ArrayList<Object> list = new87();
                push(goTo(34), list, false);
            }
            break;
            case 88: /* reduce ANumberLiteral */
            {
                ArrayList<Object> list = new88();
                push(goTo(34), list, false);
            }
            break;
            case 89: /* reduce AStringLiteral */
            {
                ArrayList<Object> list = new89();
                push(goTo(34), list, false);
            }
            break;
            case 90: /* reduce ATrueBooleanLiteral */
            {
                ArrayList<Object> list = new90();
                push(goTo(35), list, false);
            }
            break;
            case 91: /* reduce AFalseBooleanLiteral */
            {
                ArrayList<Object> list = new91();
                push(goTo(35), list, false);
            }
            break;
            case 92: /* reduce ATerminal$GlobalDecl */
            {
                ArrayList<Object> list = new92();
                push(goTo(36), list, true);
            }
            break;
            case 93: /* reduce ANonTerminal$GlobalDecl */
            {
                ArrayList<Object> list = new93();
                push(goTo(36), list, true);
            }
            break;
            case 94: /* reduce ATerminal$FuncDecl */
            {
                ArrayList<Object> list = new94();
                push(goTo(37), list, true);
            }
            break;
            case 95: /* reduce ANonTerminal$FuncDecl */
            {
                ArrayList<Object> list = new95();
                push(goTo(37), list, true);
            }
            break;
            case 96: /* reduce ATerminal$ListVarTail */
            {
                ArrayList<Object> list = new96();
                push(goTo(38), list, true);
            }
            break;
            case 97: /* reduce ANonTerminal$ListVarTail */
            {
                ArrayList<Object> list = new97();
                push(goTo(38), list, true);
            }
            break;
            case 98: /* reduce ATerminal$CallParamsTail */
            {
                ArrayList<Object> list = new98();
                push(goTo(39), list, true);
            }
            break;
            case 99: /* reduce ANonTerminal$CallParamsTail */
            {
                ArrayList<Object> list = new99();
                push(goTo(39), list, true);
            }
            break;
            case 100: /* reduce ATerminal$ParamsTail */
            {
                ArrayList<Object> list = new100();
                push(goTo(40), list, true);
            }
            break;
            case 101: /* reduce ANonTerminal$ParamsTail */
            {
                ArrayList<Object> list = new101();
                push(goTo(40), list, true);
            }
            break;
            case 102: /* reduce ATerminal$Stmt */
            {
                ArrayList<Object> list = new102();
                push(goTo(41), list, true);
            }
            break;
            case 103: /* reduce ANonTerminal$Stmt */
            {
                ArrayList<Object> list = new103();
                push(goTo(41), list, true);
            }
            break;
            case 104: /* reduce ATerminal$InObjDecl */
            {
                ArrayList<Object> list = new104();
                push(goTo(42), list, true);
            }
            break;
            case 105: /* reduce ANonTerminal$InObjDecl */
            {
                ArrayList<Object> list = new105();
                push(goTo(42), list, true);
            }
            break;
            case 106: /* reduce ATerminal$Member */
            {
                ArrayList<Object> list = new106();
                push(goTo(43), list, true);
            }
            break;
            case 107: /* reduce ANonTerminal$Member */
            {
                ArrayList<Object> list = new107();
                push(goTo(43), list, true);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAprogram1Program */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        TMain tmainNode3;
        PBody pbodyNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode6 = null;
        {
            // Block
        }
        tmainNode3 = (TMain)nodeArrayList1.get(0);
        pbodyNode4 = (PBody)nodeArrayList2.get(0);
        {
            // Block
        }

        pprogramNode1 = new AProgram(listNode2, tmainNode3, pbodyNode4, listNode5, null);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAprogram2Program */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        TMain tmainNode4;
        PBody pbodyNode5;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode7 = null;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tmainNode4 = (TMain)nodeArrayList2.get(0);
        pbodyNode5 = (PBody)nodeArrayList3.get(0);
        {
            // Block
        }

        pprogramNode1 = new AProgram(listNode3, tmainNode4, pbodyNode5, listNode6, null);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAprogram3Program */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        TMain tmainNode3;
        PBody pbodyNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode7 = null;
        {
            // Block
        }
        tmainNode3 = (TMain)nodeArrayList1.get(0);
        pbodyNode4 = (PBody)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pprogramNode1 = new AProgram(listNode2, tmainNode3, pbodyNode4, listNode6, null);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAprogram4Program */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        TMain tmainNode4;
        PBody pbodyNode5;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode8 = null;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tmainNode4 = (TMain)nodeArrayList2.get(0);
        pbodyNode5 = (PBody)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList4.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        pprogramNode1 = new AProgram(listNode3, tmainNode4, pbodyNode5, listNode7, null);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AAprogram5Program */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        TMain tmainNode3;
        PBody pbodyNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        PEventDecl peventdeclNode6;
        {
            // Block
        }
        tmainNode3 = (TMain)nodeArrayList1.get(0);
        pbodyNode4 = (PBody)nodeArrayList2.get(0);
        {
            // Block
        }
        peventdeclNode6 = (PEventDecl)nodeArrayList3.get(0);

        pprogramNode1 = new AProgram(listNode2, tmainNode3, pbodyNode4, listNode5, peventdeclNode6);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAprogram6Program */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        TMain tmainNode4;
        PBody pbodyNode5;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        PEventDecl peventdeclNode7;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tmainNode4 = (TMain)nodeArrayList2.get(0);
        pbodyNode5 = (PBody)nodeArrayList3.get(0);
        {
            // Block
        }
        peventdeclNode7 = (PEventDecl)nodeArrayList4.get(0);

        pprogramNode1 = new AProgram(listNode3, tmainNode4, pbodyNode5, listNode6, peventdeclNode7);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AAprogram7Program */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        TMain tmainNode3;
        PBody pbodyNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        PEventDecl peventdeclNode7;
        {
            // Block
        }
        tmainNode3 = (TMain)nodeArrayList1.get(0);
        pbodyNode4 = (PBody)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        peventdeclNode7 = (PEventDecl)nodeArrayList4.get(0);

        pprogramNode1 = new AProgram(listNode2, tmainNode3, pbodyNode4, listNode6, peventdeclNode7);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AAprogram8Program */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        TMain tmainNode4;
        PBody pbodyNode5;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        PEventDecl peventdeclNode8;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        tmainNode4 = (TMain)nodeArrayList2.get(0);
        pbodyNode5 = (PBody)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList4.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        peventdeclNode8 = (PEventDecl)nodeArrayList5.get(0);

        pprogramNode1 = new AProgram(listNode3, tmainNode4, pbodyNode5, listNode7, peventdeclNode8);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AVariableDeclStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PVariableDecl pvariabledeclNode2;
        pvariabledeclNode2 = (PVariableDecl)nodeArrayList1.get(0);

        pstmtNode1 = new AVariableDeclStmt(pvariabledeclNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AControlStmtStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PControlStmt pcontrolstmtNode2;
        pcontrolstmtNode2 = (PControlStmt)nodeArrayList1.get(0);

        pstmtNode1 = new AControlStmtStmt(pcontrolstmtNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AExprStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PExpr pexprNode2;
        TSemiC tsemicNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tsemicNode3 = (TSemiC)nodeArrayList2.get(0);

        pstmtNode1 = new AExprStmt(pexprNode2, tsemicNode3);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AVarGlobalDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PGlobalDecl pglobaldeclNode1;
        {
            // Block
        PVariableDecl pvariabledeclNode2;
        pvariabledeclNode2 = (PVariableDecl)nodeArrayList1.get(0);

        pglobaldeclNode1 = new AVarGlobalDecl(pvariabledeclNode2);
        }
	nodeList.add(pglobaldeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AObjGlobalDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PGlobalDecl pglobaldeclNode1;
        {
            // Block
        PObjectDecl pobjectdeclNode2;
        pobjectdeclNode2 = (PObjectDecl)nodeArrayList1.get(0);

        pglobaldeclNode1 = new AObjGlobalDecl(pobjectdeclNode2);
        }
	nodeList.add(pglobaldeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AGridGlobalDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PGlobalDecl pglobaldeclNode1;
        {
            // Block
        PGridDecl pgriddeclNode2;
        pgriddeclNode2 = (PGridDecl)nodeArrayList1.get(0);

        pglobaldeclNode1 = new AGridGlobalDecl(pgriddeclNode2);
        }
	nodeList.add(pglobaldeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AEventDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEventDecl peventdeclNode1;
        {
            // Block
        TEvent teventNode2;
        TParL tparlNode3;
        TIdentifier tidentifierNode4;
        TParR tparrNode5;
        PBody pbodyNode6;
        teventNode2 = (TEvent)nodeArrayList1.get(0);
        tparlNode3 = (TParL)nodeArrayList2.get(0);
        tidentifierNode4 = (TIdentifier)nodeArrayList3.get(0);
        tparrNode5 = (TParR)nodeArrayList4.get(0);
        pbodyNode6 = (PBody)nodeArrayList5.get(0);

        peventdeclNode1 = new AEventDecl(teventNode2, tparlNode3, tidentifierNode4, tparrNode5, pbodyNode6);
        }
	nodeList.add(peventdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AGridDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PGridDecl pgriddeclNode1;
        {
            // Block
        TNew tnewNode2;
        TIdentifier tidentifierNode3;
        TAssign tassignNode4;
        TGrid tgridNode5;
        TParL tparlNode6;
        PValue pvalueNode7;
        TComma tcommaNode8;
        PValue pvalueNode9;
        TParR tparrNode10;
        TSemiC tsemicNode11;
        tnewNode2 = (TNew)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tassignNode4 = (TAssign)nodeArrayList3.get(0);
        tgridNode5 = (TGrid)nodeArrayList4.get(0);
        tparlNode6 = (TParL)nodeArrayList5.get(0);
        pvalueNode7 = (PValue)nodeArrayList6.get(0);
        tcommaNode8 = (TComma)nodeArrayList7.get(0);
        pvalueNode9 = (PValue)nodeArrayList8.get(0);
        tparrNode10 = (TParR)nodeArrayList9.get(0);
        tsemicNode11 = (TSemiC)nodeArrayList10.get(0);

        pgriddeclNode1 = new AGridDecl(tnewNode2, tidentifierNode3, tassignNode4, tgridNode5, tparlNode6, pvalueNode7, tcommaNode8, pvalueNode9, tparrNode10, tsemicNode11);
        }
	nodeList.add(pgriddeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AObjectDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PObjectDecl pobjectdeclNode1;
        {
            // Block
        TNew tnewNode2;
        TIdentifier tidentifierNode3;
        TAssign tassignNode4;
        TFigure tfigureNode5;
        TParL tparlNode6;
        TIdentifier tidentifierNode7;
        TParR tparrNode8;
        PObjBody pobjbodyNode9;
        tnewNode2 = (TNew)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tassignNode4 = (TAssign)nodeArrayList3.get(0);
        tfigureNode5 = (TFigure)nodeArrayList4.get(0);
        tparlNode6 = (TParL)nodeArrayList5.get(0);
        tidentifierNode7 = (TIdentifier)nodeArrayList6.get(0);
        tparrNode8 = (TParR)nodeArrayList7.get(0);
        pobjbodyNode9 = (PObjBody)nodeArrayList8.get(0);

        pobjectdeclNode1 = new AObjectDecl(tnewNode2, tidentifierNode3, tassignNode4, tfigureNode5, tparlNode6, tidentifierNode7, tparrNode8, pobjbodyNode9);
        }
	nodeList.add(pobjectdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AAfuncdecl1FuncDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncDecl pfuncdeclNode1;
        {
            // Block
        TNew tnewNode2;
        TIdentifier tidentifierNode3;
        TParL tparlNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TParR tparrNode6;
        PBody pbodyNode7;
        tnewNode2 = (TNew)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tparlNode4 = (TParL)nodeArrayList3.get(0);
        tparrNode6 = (TParR)nodeArrayList4.get(0);
        pbodyNode7 = (PBody)nodeArrayList5.get(0);

        pfuncdeclNode1 = new AFuncDecl(tnewNode2, tidentifierNode3, tparlNode4, null, tparrNode6, pbodyNode7);
        }
	nodeList.add(pfuncdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AAfuncdecl2FuncDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncDecl pfuncdeclNode1;
        {
            // Block
        TNew tnewNode2;
        TIdentifier tidentifierNode3;
        TParL tparlNode4;
        PParams pparamsNode5;
        TParR tparrNode6;
        PBody pbodyNode7;
        tnewNode2 = (TNew)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tparlNode4 = (TParL)nodeArrayList3.get(0);
        pparamsNode5 = (PParams)nodeArrayList4.get(0);
        tparrNode6 = (TParR)nodeArrayList5.get(0);
        pbodyNode7 = (PBody)nodeArrayList6.get(0);

        pfuncdeclNode1 = new AFuncDecl(tnewNode2, tidentifierNode3, tparlNode4, pparamsNode5, tparrNode6, pbodyNode7);
        }
	nodeList.add(pfuncdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AVariableDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariableDecl pvariabledeclNode1;
        {
            // Block
        TNew tnewNode2;
        TIdentifier tidentifierNode3;
        PAssignOperator passignoperatorNode4;
        PVariable pvariableNode5;
        TSemiC tsemicNode6;
        tnewNode2 = (TNew)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        passignoperatorNode4 = (PAssignOperator)nodeArrayList3.get(0);
        pvariableNode5 = (PVariable)nodeArrayList4.get(0);
        tsemicNode6 = (TSemiC)nodeArrayList5.get(0);

        pvariabledeclNode1 = new AVariableDecl(tnewNode2, tidentifierNode3, passignoperatorNode4, pvariableNode5, tsemicNode6);
        }
	nodeList.add(pvariabledeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AExprVariable */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariable pvariableNode1;
        {
            // Block
        PExpr pexprNode2;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);

        pvariableNode1 = new AExprVariable(pexprNode2);
        }
	nodeList.add(pvariableNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AAlistvariable1Variable */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariable pvariableNode1;
        {
            // Block
        TBrackL tbracklNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        TBrackR tbrackrNode4;
        tbracklNode2 = (TBrackL)nodeArrayList1.get(0);
        tbrackrNode4 = (TBrackR)nodeArrayList2.get(0);

        pvariableNode1 = new AListVariable(tbracklNode2, null, tbrackrNode4);
        }
	nodeList.add(pvariableNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AAlistvariable2Variable */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariable pvariableNode1;
        {
            // Block
        TBrackL tbracklNode2;
        PListVar plistvarNode3;
        TBrackR tbrackrNode4;
        tbracklNode2 = (TBrackL)nodeArrayList1.get(0);
        plistvarNode3 = (PListVar)nodeArrayList2.get(0);
        tbrackrNode4 = (TBrackR)nodeArrayList3.get(0);

        pvariableNode1 = new AListVariable(tbracklNode2, plistvarNode3, tbrackrNode4);
        }
	nodeList.add(pvariableNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AAlistvar1ListVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListVar plistvarNode1;
        {
            // Block
        PValue pvalueNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pvalueNode2 = (PValue)nodeArrayList1.get(0);
        {
            // Block
        }

        plistvarNode1 = new AListVar(pvalueNode2, listNode3);
        }
	nodeList.add(plistvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AAlistvar2ListVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListVar plistvarNode1;
        {
            // Block
        PValue pvalueNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pvalueNode2 = (PValue)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        plistvarNode1 = new AListVar(pvalueNode2, listNode4);
        }
	nodeList.add(plistvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AListVarTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListVarTail plistvartailNode1;
        {
            // Block
        TComma tcommaNode2;
        PValue pvalueNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pvalueNode3 = (PValue)nodeArrayList2.get(0);

        plistvartailNode1 = new AListVarTail(tcommaNode2, pvalueNode3);
        }
	nodeList.add(plistvartailNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AAcallparams1CallParams */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCallParams pcallparamsNode1;
        {
            // Block
        PExpr pexprNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        {
            // Block
        }

        pcallparamsNode1 = new ACallParams(pexprNode2, listNode3);
        }
	nodeList.add(pcallparamsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AAcallparams2CallParams */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCallParams pcallparamsNode1;
        {
            // Block
        PExpr pexprNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pcallparamsNode1 = new ACallParams(pexprNode2, listNode4);
        }
	nodeList.add(pcallparamsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce ACallParamsTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCallParamsTail pcallparamstailNode1;
        {
            // Block
        TComma tcommaNode2;
        PExpr pexprNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);

        pcallparamstailNode1 = new ACallParamsTail(tcommaNode2, pexprNode3);
        }
	nodeList.add(pcallparamstailNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AReturnValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PReturnValue preturnvalueNode1;
        {
            // Block
        TReturn treturnNode2;
        PExpr pexprNode3;
        TSemiC tsemicNode4;
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        tsemicNode4 = (TSemiC)nodeArrayList3.get(0);

        preturnvalueNode1 = new AReturnValue(treturnNode2, pexprNode3, tsemicNode4);
        }
	nodeList.add(preturnvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AAparams1Params */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParams pparamsNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        }

        pparamsNode1 = new AParams(tidentifierNode2, listNode3);
        }
	nodeList.add(pparamsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AAparams2Params */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParams pparamsNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pparamsNode1 = new AParams(tidentifierNode2, listNode4);
        }
	nodeList.add(pparamsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AParamsTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParamsTail pparamstailNode1;
        {
            // Block
        TComma tcommaNode2;
        TIdentifier tidentifierNode3;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);

        pparamstailNode1 = new AParamsTail(tcommaNode2, tidentifierNode3);
        }
	nodeList.add(pparamstailNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AWhileControlStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PControlStmt pcontrolstmtNode1;
        {
            // Block
        TRepeat trepeatNode2;
        TWhile twhileNode3;
        PCondition pconditionNode4;
        PBody pbodyNode5;
        trepeatNode2 = (TRepeat)nodeArrayList1.get(0);
        twhileNode3 = (TWhile)nodeArrayList2.get(0);
        pconditionNode4 = (PCondition)nodeArrayList3.get(0);
        pbodyNode5 = (PBody)nodeArrayList4.get(0);

        pcontrolstmtNode1 = new AWhileControlStmt(trepeatNode2, twhileNode3, pconditionNode4, pbodyNode5);
        }
	nodeList.add(pcontrolstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce ARepeatControlStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PControlStmt pcontrolstmtNode1;
        {
            // Block
        TRepeat trepeatNode2;
        PRepeatCount prepeatcountNode3;
        PBody pbodyNode4;
        trepeatNode2 = (TRepeat)nodeArrayList1.get(0);
        prepeatcountNode3 = (PRepeatCount)nodeArrayList2.get(0);
        pbodyNode4 = (PBody)nodeArrayList3.get(0);

        pcontrolstmtNode1 = new ARepeatControlStmt(trepeatNode2, prepeatcountNode3, pbodyNode4);
        }
	nodeList.add(pcontrolstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AForeachControlStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PControlStmt pcontrolstmtNode1;
        {
            // Block
        TRepeat trepeatNode2;
        TForeach tforeachNode3;
        TParL tparlNode4;
        TIdentifier tidentifierNode5;
        TIn tinNode6;
        TIdentifier tidentifierNode7;
        TParR tparrNode8;
        PBody pbodyNode9;
        trepeatNode2 = (TRepeat)nodeArrayList1.get(0);
        tforeachNode3 = (TForeach)nodeArrayList2.get(0);
        tparlNode4 = (TParL)nodeArrayList3.get(0);
        tidentifierNode5 = (TIdentifier)nodeArrayList4.get(0);
        tinNode6 = (TIn)nodeArrayList5.get(0);
        tidentifierNode7 = (TIdentifier)nodeArrayList6.get(0);
        tparrNode8 = (TParR)nodeArrayList7.get(0);
        pbodyNode9 = (PBody)nodeArrayList8.get(0);

        pcontrolstmtNode1 = new AForeachControlStmt(trepeatNode2, tforeachNode3, tparlNode4, tidentifierNode5, tinNode6, tidentifierNode7, tparrNode8, pbodyNode9);
        }
	nodeList.add(pcontrolstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AAifstmtcontrolstmt1ControlStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PControlStmt pcontrolstmtNode1;
        {
            // Block
        TIf tifNode2;
        PCondition pconditionNode3;
        PBody pbodyNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        pconditionNode3 = (PCondition)nodeArrayList2.get(0);
        pbodyNode4 = (PBody)nodeArrayList3.get(0);

        pcontrolstmtNode1 = new AIfStmtControlStmt(tifNode2, pconditionNode3, pbodyNode4, null);
        }
	nodeList.add(pcontrolstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AAifstmtcontrolstmt2ControlStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PControlStmt pcontrolstmtNode1;
        {
            // Block
        TIf tifNode2;
        PCondition pconditionNode3;
        PBody pbodyNode4;
        PElseStmt pelsestmtNode5;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        pconditionNode3 = (PCondition)nodeArrayList2.get(0);
        pbodyNode4 = (PBody)nodeArrayList3.get(0);
        pelsestmtNode5 = (PElseStmt)nodeArrayList4.get(0);

        pcontrolstmtNode1 = new AIfStmtControlStmt(tifNode2, pconditionNode3, pbodyNode4, pelsestmtNode5);
        }
	nodeList.add(pcontrolstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AElseStmtElseStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElseStmt pelsestmtNode1;
        {
            // Block
        TElse telseNode2;
        PBody pbodyNode3;
        telseNode2 = (TElse)nodeArrayList1.get(0);
        pbodyNode3 = (PBody)nodeArrayList2.get(0);

        pelsestmtNode1 = new AElseStmtElseStmt(telseNode2, pbodyNode3);
        }
	nodeList.add(pelsestmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AAelseifstmtelsestmt1ElseStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElseStmt pelsestmtNode1;
        {
            // Block
        TElse telseNode2;
        TIf tifNode3;
        PCondition pconditionNode4;
        PBody pbodyNode5;
        @SuppressWarnings("unused") Object nullNode6 = null;
        telseNode2 = (TElse)nodeArrayList1.get(0);
        tifNode3 = (TIf)nodeArrayList2.get(0);
        pconditionNode4 = (PCondition)nodeArrayList3.get(0);
        pbodyNode5 = (PBody)nodeArrayList4.get(0);

        pelsestmtNode1 = new AElseifStmtElseStmt(telseNode2, tifNode3, pconditionNode4, pbodyNode5, null);
        }
	nodeList.add(pelsestmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AAelseifstmtelsestmt2ElseStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElseStmt pelsestmtNode1;
        {
            // Block
        TElse telseNode2;
        TIf tifNode3;
        PCondition pconditionNode4;
        PBody pbodyNode5;
        PElseStmt pelsestmtNode6;
        telseNode2 = (TElse)nodeArrayList1.get(0);
        tifNode3 = (TIf)nodeArrayList2.get(0);
        pconditionNode4 = (PCondition)nodeArrayList3.get(0);
        pbodyNode5 = (PBody)nodeArrayList4.get(0);
        pelsestmtNode6 = (PElseStmt)nodeArrayList5.get(0);

        pelsestmtNode1 = new AElseifStmtElseStmt(telseNode2, tifNode3, pconditionNode4, pbodyNode5, pelsestmtNode6);
        }
	nodeList.add(pelsestmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce ACondition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCondition pconditionNode1;
        {
            // Block
        TParL tparlNode2;
        PBoolExpr pboolexprNode3;
        TParR tparrNode4;
        tparlNode2 = (TParL)nodeArrayList1.get(0);
        pboolexprNode3 = (PBoolExpr)nodeArrayList2.get(0);
        tparrNode4 = (TParR)nodeArrayList3.get(0);

        pconditionNode1 = new ACondition(tparlNode2, pboolexprNode3, tparrNode4);
        }
	nodeList.add(pconditionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce ARepeatCount */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRepeatCount prepeatcountNode1;
        {
            // Block
        TParL tparlNode2;
        PValue pvalueNode3;
        TParR tparrNode4;
        tparlNode2 = (TParL)nodeArrayList1.get(0);
        pvalueNode3 = (PValue)nodeArrayList2.get(0);
        tparrNode4 = (TParR)nodeArrayList3.get(0);

        prepeatcountNode1 = new ARepeatCount(tparlNode2, pvalueNode3, tparrNode4);
        }
	nodeList.add(prepeatcountNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AAbody1Body */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBody pbodyNode1;
        {
            // Block
        TCurlyL tcurlylNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode4 = null;
        TCurlyR tcurlyrNode5;
        tcurlylNode2 = (TCurlyL)nodeArrayList1.get(0);
        {
            // Block
        }
        tcurlyrNode5 = (TCurlyR)nodeArrayList2.get(0);

        pbodyNode1 = new ABody(tcurlylNode2, listNode3, null, tcurlyrNode5);
        }
	nodeList.add(pbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AAbody2Body */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBody pbodyNode1;
        {
            // Block
        TCurlyL tcurlylNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode5 = null;
        TCurlyR tcurlyrNode6;
        tcurlylNode2 = (TCurlyL)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        tcurlyrNode6 = (TCurlyR)nodeArrayList3.get(0);

        pbodyNode1 = new ABody(tcurlylNode2, listNode4, null, tcurlyrNode6);
        }
	nodeList.add(pbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AAbody3Body */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBody pbodyNode1;
        {
            // Block
        TCurlyL tcurlylNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PReturnValue preturnvalueNode4;
        TCurlyR tcurlyrNode5;
        tcurlylNode2 = (TCurlyL)nodeArrayList1.get(0);
        {
            // Block
        }
        preturnvalueNode4 = (PReturnValue)nodeArrayList2.get(0);
        tcurlyrNode5 = (TCurlyR)nodeArrayList3.get(0);

        pbodyNode1 = new ABody(tcurlylNode2, listNode3, preturnvalueNode4, tcurlyrNode5);
        }
	nodeList.add(pbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AAbody4Body */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBody pbodyNode1;
        {
            // Block
        TCurlyL tcurlylNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PReturnValue preturnvalueNode5;
        TCurlyR tcurlyrNode6;
        tcurlylNode2 = (TCurlyL)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        preturnvalueNode5 = (PReturnValue)nodeArrayList3.get(0);
        tcurlyrNode6 = (TCurlyR)nodeArrayList4.get(0);

        pbodyNode1 = new ABody(tcurlylNode2, listNode4, preturnvalueNode5, tcurlyrNode6);
        }
	nodeList.add(pbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AAobjbody1ObjBody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PObjBody pobjbodyNode1;
        {
            // Block
        TCurlyL tcurlylNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        TCurlyR tcurlyrNode4;
        tcurlylNode2 = (TCurlyL)nodeArrayList1.get(0);
        {
            // Block
        }
        tcurlyrNode4 = (TCurlyR)nodeArrayList2.get(0);

        pobjbodyNode1 = new AObjBody(tcurlylNode2, listNode3, tcurlyrNode4);
        }
	nodeList.add(pobjbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AAobjbody2ObjBody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PObjBody pobjbodyNode1;
        {
            // Block
        TCurlyL tcurlylNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TCurlyR tcurlyrNode5;
        tcurlylNode2 = (TCurlyL)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        tcurlyrNode5 = (TCurlyR)nodeArrayList3.get(0);

        pobjbodyNode1 = new AObjBody(tcurlylNode2, listNode4, tcurlyrNode5);
        }
	nodeList.add(pobjbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AMethodInObjDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInObjDecl pinobjdeclNode1;
        {
            // Block
        PFuncDecl pfuncdeclNode2;
        pfuncdeclNode2 = (PFuncDecl)nodeArrayList1.get(0);

        pinobjdeclNode1 = new AMethodInObjDecl(pfuncdeclNode2);
        }
	nodeList.add(pinobjdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AMemberInObjDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInObjDecl pinobjdeclNode1;
        {
            // Block
        PVariableDecl pvariabledeclNode2;
        pvariabledeclNode2 = (PVariableDecl)nodeArrayList1.get(0);

        pinobjdeclNode1 = new AMemberInObjDecl(pvariabledeclNode2);
        }
	nodeList.add(pinobjdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AAssignExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PAssignExpr passignexprNode2;
        passignexprNode2 = (PAssignExpr)nodeArrayList1.get(0);

        pexprNode1 = new AAssignExpr(passignexprNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AAbooleanexpr1Expr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        PBoolExpr pboolexprNode3;
        pboolexprNode3 = (PBoolExpr)nodeArrayList1.get(0);

        pexprNode1 = new ABooleanExpr(null, pboolexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AAbooleanexpr2Expr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PNegationOperator pnegationoperatorNode2;
        PBoolExpr pboolexprNode3;
        pnegationoperatorNode2 = (PNegationOperator)nodeArrayList1.get(0);
        pboolexprNode3 = (PBoolExpr)nodeArrayList2.get(0);

        pexprNode1 = new ABooleanExpr(pnegationoperatorNode2, pboolexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce ANumericExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PValue pvalueNode2;
        POperator poperatorNode3;
        PExpr pexprNode4;
        pvalueNode2 = (PValue)nodeArrayList1.get(0);
        poperatorNode3 = (POperator)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new ANumericExpr(pvalueNode2, poperatorNode3, pexprNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AValueExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PValue pvalueNode2;
        pvalueNode2 = (PValue)nodeArrayList1.get(0);

        pexprNode1 = new AValueExpr(pvalueNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AParenthesizedExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TParL tparlNode2;
        PExpr pexprNode3;
        TParR tparrNode4;
        tparlNode2 = (TParL)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        tparrNode4 = (TParR)nodeArrayList3.get(0);

        pexprNode1 = new AParenthesizedExpr(tparlNode2, pexprNode3, tparrNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AParamaBoolExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TParL tparlNode2;
        PExpr pexprNode3;
        TParR tparrNode4;
        PBoolOperator pbooloperatorNode5;
        PExpr pexprNode6;
        tparlNode2 = (TParL)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        tparrNode4 = (TParR)nodeArrayList3.get(0);
        pbooloperatorNode5 = (PBoolOperator)nodeArrayList4.get(0);
        pexprNode6 = (PExpr)nodeArrayList5.get(0);

        pexprNode1 = new AParamaBoolExpr(tparlNode2, pexprNode3, tparrNode4, pbooloperatorNode5, pexprNode6);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AParamaNumericExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TParL tparlNode2;
        PExpr pexprNode3;
        TParR tparrNode4;
        POperator poperatorNode5;
        PExpr pexprNode6;
        tparlNode2 = (TParL)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        tparrNode4 = (TParR)nodeArrayList3.get(0);
        poperatorNode5 = (POperator)nodeArrayList4.get(0);
        pexprNode6 = (PExpr)nodeArrayList5.get(0);

        pexprNode1 = new AParamaNumericExpr(tparlNode2, pexprNode3, tparrNode4, poperatorNode5, pexprNode6);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AAvarassignexpr1AssignExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAssignExpr passignexprNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        PAssignOperator passignoperatorNode4;
        PExpr pexprNode5;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        passignoperatorNode4 = (PAssignOperator)nodeArrayList2.get(0);
        pexprNode5 = (PExpr)nodeArrayList3.get(0);

        passignexprNode1 = new AVarAssignExpr(tidentifierNode2, null, passignoperatorNode4, pexprNode5);
        }
	nodeList.add(passignexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AAvarassignexpr2AssignExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAssignExpr passignexprNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PMember pmemberNode3;
        PAssignOperator passignoperatorNode4;
        PExpr pexprNode5;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        pmemberNode3 = (PMember)nodeArrayList2.get(0);
        passignoperatorNode4 = (PAssignOperator)nodeArrayList3.get(0);
        pexprNode5 = (PExpr)nodeArrayList4.get(0);

        passignexprNode1 = new AVarAssignExpr(tidentifierNode2, pmemberNode3, passignoperatorNode4, pexprNode5);
        }
	nodeList.add(passignexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce ABoolExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBoolExpr pboolexprNode1;
        {
            // Block
        PValue pvalueNode2;
        PBoolOperator pbooloperatorNode3;
        PExpr pexprNode4;
        pvalueNode2 = (PValue)nodeArrayList1.get(0);
        pbooloperatorNode3 = (PBoolOperator)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        pboolexprNode1 = new ABoolExpr(pvalueNode2, pbooloperatorNode3, pexprNode4);
        }
	nodeList.add(pboolexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AAidvalue1Value */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValue pvalueNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        }

        pvalueNode1 = new AIdValue(tidentifierNode2, listNode3);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce AAidvalue2Value */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValue pvalueNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pvalueNode1 = new AIdValue(tidentifierNode2, listNode4);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce AMethodCallValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValue pvalueNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TDot tdotNode3;
        PFuncCall pfunccallNode4;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tdotNode3 = (TDot)nodeArrayList2.get(0);
        pfunccallNode4 = (PFuncCall)nodeArrayList3.get(0);

        pvalueNode1 = new AMethodCallValue(tidentifierNode2, tdotNode3, pfunccallNode4);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce AAgridposvalue1Value */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValue pvalueNode1;
        {
            // Block
        PFuncCall pfunccallNode2;
        TDot tdotNode3;
        TIdentifier tidentifierNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        pfunccallNode2 = (PFuncCall)nodeArrayList1.get(0);
        tdotNode3 = (TDot)nodeArrayList2.get(0);
        tidentifierNode4 = (TIdentifier)nodeArrayList3.get(0);

        pvalueNode1 = new AGridPosValue(pfunccallNode2, tdotNode3, tidentifierNode4, null);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce AAgridposvalue2Value */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValue pvalueNode1;
        {
            // Block
        PFuncCall pfunccallNode2;
        TDot tdotNode3;
        TIdentifier tidentifierNode4;
        PGridParams pgridparamsNode5;
        pfunccallNode2 = (PFuncCall)nodeArrayList1.get(0);
        tdotNode3 = (TDot)nodeArrayList2.get(0);
        tidentifierNode4 = (TIdentifier)nodeArrayList3.get(0);
        pgridparamsNode5 = (PGridParams)nodeArrayList4.get(0);

        pvalueNode1 = new AGridPosValue(pfunccallNode2, tdotNode3, tidentifierNode4, pgridparamsNode5);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce AFuncCallValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValue pvalueNode1;
        {
            // Block
        PFuncCall pfunccallNode2;
        pfunccallNode2 = (PFuncCall)nodeArrayList1.get(0);

        pvalueNode1 = new AFuncCallValue(pfunccallNode2);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce ALiteralValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValue pvalueNode1;
        {
            // Block
        PLiteral pliteralNode2;
        pliteralNode2 = (PLiteral)nodeArrayList1.get(0);

        pvalueNode1 = new ALiteralValue(pliteralNode2);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce AGridParams */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PGridParams pgridparamsNode1;
        {
            // Block
        TParL tparlNode2;
        TIdentifier tidentifierNode3;
        TParR tparrNode4;
        tparlNode2 = (TParL)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tparrNode4 = (TParR)nodeArrayList3.get(0);

        pgridparamsNode1 = new AGridParams(tparlNode2, tidentifierNode3, tparrNode4);
        }
	nodeList.add(pgridparamsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce AAfunccall1FuncCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncCall pfunccallNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TParL tparlNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TParR tparrNode5;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tparlNode3 = (TParL)nodeArrayList2.get(0);
        tparrNode5 = (TParR)nodeArrayList3.get(0);

        pfunccallNode1 = new AFuncCall(tidentifierNode2, tparlNode3, null, tparrNode5);
        }
	nodeList.add(pfunccallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce AAfunccall2FuncCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFuncCall pfunccallNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TParL tparlNode3;
        PCallParams pcallparamsNode4;
        TParR tparrNode5;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tparlNode3 = (TParL)nodeArrayList2.get(0);
        pcallparamsNode4 = (PCallParams)nodeArrayList3.get(0);
        tparrNode5 = (TParR)nodeArrayList4.get(0);

        pfunccallNode1 = new AFuncCall(tidentifierNode2, tparlNode3, pcallparamsNode4, tparrNode5);
        }
	nodeList.add(pfunccallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce AMember */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMember pmemberNode1;
        {
            // Block
        TDot tdotNode2;
        TIdentifier tidentifierNode3;
        tdotNode2 = (TDot)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);

        pmemberNode1 = new AMember(tdotNode2, tidentifierNode3);
        }
	nodeList.add(pmemberNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce AMinusOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POperator poperatorNode1;
        {
            // Block
        TMinus tminusNode2;
        tminusNode2 = (TMinus)nodeArrayList1.get(0);

        poperatorNode1 = new AMinusOperator(tminusNode2);
        }
	nodeList.add(poperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce APlusOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POperator poperatorNode1;
        {
            // Block
        TPlus tplusNode2;
        tplusNode2 = (TPlus)nodeArrayList1.get(0);

        poperatorNode1 = new APlusOperator(tplusNode2);
        }
	nodeList.add(poperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce AMultOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POperator poperatorNode1;
        {
            // Block
        TMult tmultNode2;
        tmultNode2 = (TMult)nodeArrayList1.get(0);

        poperatorNode1 = new AMultOperator(tmultNode2);
        }
	nodeList.add(poperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce ADivOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POperator poperatorNode1;
        {
            // Block
        TDiv tdivNode2;
        tdivNode2 = (TDiv)nodeArrayList1.get(0);

        poperatorNode1 = new ADivOperator(tdivNode2);
        }
	nodeList.add(poperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce AAssignOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAssignOperator passignoperatorNode1;
        {
            // Block
        TAssign tassignNode2;
        tassignNode2 = (TAssign)nodeArrayList1.get(0);

        passignoperatorNode1 = new AAssignOperator(tassignNode2);
        }
	nodeList.add(passignoperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce AEqualBoolOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBoolOperator pbooloperatorNode1;
        {
            // Block
        TEqual tequalNode2;
        tequalNode2 = (TEqual)nodeArrayList1.get(0);

        pbooloperatorNode1 = new AEqualBoolOperator(tequalNode2);
        }
	nodeList.add(pbooloperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce ANotEqualBoolOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBoolOperator pbooloperatorNode1;
        {
            // Block
        TNotEqual tnotequalNode2;
        tnotequalNode2 = (TNotEqual)nodeArrayList1.get(0);

        pbooloperatorNode1 = new ANotEqualBoolOperator(tnotequalNode2);
        }
	nodeList.add(pbooloperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce ALessEqualBoolOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBoolOperator pbooloperatorNode1;
        {
            // Block
        TLessEqual tlessequalNode2;
        tlessequalNode2 = (TLessEqual)nodeArrayList1.get(0);

        pbooloperatorNode1 = new ALessEqualBoolOperator(tlessequalNode2);
        }
	nodeList.add(pbooloperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce AGreaterEqualBoolOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBoolOperator pbooloperatorNode1;
        {
            // Block
        TGreaterEqual tgreaterequalNode2;
        tgreaterequalNode2 = (TGreaterEqual)nodeArrayList1.get(0);

        pbooloperatorNode1 = new AGreaterEqualBoolOperator(tgreaterequalNode2);
        }
	nodeList.add(pbooloperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce AAndBoolOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBoolOperator pbooloperatorNode1;
        {
            // Block
        TAnd tandNode2;
        tandNode2 = (TAnd)nodeArrayList1.get(0);

        pbooloperatorNode1 = new AAndBoolOperator(tandNode2);
        }
	nodeList.add(pbooloperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce AOrBoolOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBoolOperator pbooloperatorNode1;
        {
            // Block
        TOr torNode2;
        torNode2 = (TOr)nodeArrayList1.get(0);

        pbooloperatorNode1 = new AOrBoolOperator(torNode2);
        }
	nodeList.add(pbooloperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce ALessBoolOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBoolOperator pbooloperatorNode1;
        {
            // Block
        TLess tlessNode2;
        tlessNode2 = (TLess)nodeArrayList1.get(0);

        pbooloperatorNode1 = new ALessBoolOperator(tlessNode2);
        }
	nodeList.add(pbooloperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new85() /* reduce AGreaterBoolOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBoolOperator pbooloperatorNode1;
        {
            // Block
        TGreater tgreaterNode2;
        tgreaterNode2 = (TGreater)nodeArrayList1.get(0);

        pbooloperatorNode1 = new AGreaterBoolOperator(tgreaterNode2);
        }
	nodeList.add(pbooloperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new86() /* reduce ANegationOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNegationOperator pnegationoperatorNode1;
        {
            // Block
        TNegate tnegateNode2;
        tnegateNode2 = (TNegate)nodeArrayList1.get(0);

        pnegationoperatorNode1 = new ANegationOperator(tnegateNode2);
        }
	nodeList.add(pnegationoperatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new87() /* reduce ABooleanLiteral */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLiteral pliteralNode1;
        {
            // Block
        PBooleanLiteral pbooleanliteralNode2;
        pbooleanliteralNode2 = (PBooleanLiteral)nodeArrayList1.get(0);

        pliteralNode1 = new ABooleanLiteral(pbooleanliteralNode2);
        }
	nodeList.add(pliteralNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new88() /* reduce ANumberLiteral */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLiteral pliteralNode1;
        {
            // Block
        TNumberLiteral tnumberliteralNode2;
        tnumberliteralNode2 = (TNumberLiteral)nodeArrayList1.get(0);

        pliteralNode1 = new ANumberLiteral(tnumberliteralNode2);
        }
	nodeList.add(pliteralNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new89() /* reduce AStringLiteral */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLiteral pliteralNode1;
        {
            // Block
        TStringLiteral tstringliteralNode2;
        tstringliteralNode2 = (TStringLiteral)nodeArrayList1.get(0);

        pliteralNode1 = new AStringLiteral(tstringliteralNode2);
        }
	nodeList.add(pliteralNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new90() /* reduce ATrueBooleanLiteral */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBooleanLiteral pbooleanliteralNode1;
        {
            // Block
        TTrue ttrueNode2;
        ttrueNode2 = (TTrue)nodeArrayList1.get(0);

        pbooleanliteralNode1 = new ATrueBooleanLiteral(ttrueNode2);
        }
	nodeList.add(pbooleanliteralNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new91() /* reduce AFalseBooleanLiteral */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBooleanLiteral pbooleanliteralNode1;
        {
            // Block
        TFalse tfalseNode2;
        tfalseNode2 = (TFalse)nodeArrayList1.get(0);

        pbooleanliteralNode1 = new AFalseBooleanLiteral(tfalseNode2);
        }
	nodeList.add(pbooleanliteralNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new92() /* reduce ATerminal$GlobalDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PGlobalDecl pglobaldeclNode1;
        pglobaldeclNode1 = (PGlobalDecl)nodeArrayList1.get(0);
	if(pglobaldeclNode1 != null)
	{
	  listNode2.add(pglobaldeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new93() /* reduce ANonTerminal$GlobalDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PGlobalDecl pglobaldeclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pglobaldeclNode2 = (PGlobalDecl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pglobaldeclNode2 != null)
	{
	  listNode3.add(pglobaldeclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new94() /* reduce ATerminal$FuncDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PFuncDecl pfuncdeclNode1;
        pfuncdeclNode1 = (PFuncDecl)nodeArrayList1.get(0);
	if(pfuncdeclNode1 != null)
	{
	  listNode2.add(pfuncdeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new95() /* reduce ANonTerminal$FuncDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PFuncDecl pfuncdeclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pfuncdeclNode2 = (PFuncDecl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pfuncdeclNode2 != null)
	{
	  listNode3.add(pfuncdeclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new96() /* reduce ATerminal$ListVarTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PListVarTail plistvartailNode1;
        plistvartailNode1 = (PListVarTail)nodeArrayList1.get(0);
	if(plistvartailNode1 != null)
	{
	  listNode2.add(plistvartailNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new97() /* reduce ANonTerminal$ListVarTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PListVarTail plistvartailNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        plistvartailNode2 = (PListVarTail)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(plistvartailNode2 != null)
	{
	  listNode3.add(plistvartailNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new98() /* reduce ATerminal$CallParamsTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PCallParamsTail pcallparamstailNode1;
        pcallparamstailNode1 = (PCallParamsTail)nodeArrayList1.get(0);
	if(pcallparamstailNode1 != null)
	{
	  listNode2.add(pcallparamstailNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new99() /* reduce ANonTerminal$CallParamsTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PCallParamsTail pcallparamstailNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcallparamstailNode2 = (PCallParamsTail)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcallparamstailNode2 != null)
	{
	  listNode3.add(pcallparamstailNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new100() /* reduce ATerminal$ParamsTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PParamsTail pparamstailNode1;
        pparamstailNode1 = (PParamsTail)nodeArrayList1.get(0);
	if(pparamstailNode1 != null)
	{
	  listNode2.add(pparamstailNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new101() /* reduce ANonTerminal$ParamsTail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PParamsTail pparamstailNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pparamstailNode2 = (PParamsTail)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pparamstailNode2 != null)
	{
	  listNode3.add(pparamstailNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new102() /* reduce ATerminal$Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PStmt pstmtNode1;
        pstmtNode1 = (PStmt)nodeArrayList1.get(0);
	if(pstmtNode1 != null)
	{
	  listNode2.add(pstmtNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new103() /* reduce ANonTerminal$Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PStmt pstmtNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstmtNode2 = (PStmt)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstmtNode2 != null)
	{
	  listNode3.add(pstmtNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new104() /* reduce ATerminal$InObjDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PInObjDecl pinobjdeclNode1;
        pinobjdeclNode1 = (PInObjDecl)nodeArrayList1.get(0);
	if(pinobjdeclNode1 != null)
	{
	  listNode2.add(pinobjdeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new105() /* reduce ANonTerminal$InObjDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PInObjDecl pinobjdeclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pinobjdeclNode2 = (PInObjDecl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pinobjdeclNode2 != null)
	{
	  listNode3.add(pinobjdeclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new106() /* reduce ATerminal$Member */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PMember pmemberNode1;
        pmemberNode1 = (PMember)nodeArrayList1.get(0);
	if(pmemberNode1 != null)
	{
	  listNode2.add(pmemberNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new107() /* reduce ANonTerminal$Member */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PMember pmemberNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pmemberNode2 = (PMember)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pmemberNode2 != null)
	{
	  listNode3.add(pmemberNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {26, SHIFT, 1}, {36, SHIFT, 2}, },
			{{-1, ERROR, 1}, {39, SHIFT, 9}, },
			{{-1, ERROR, 2}, {7, SHIFT, 10}, },
			{{-1, ERROR, 3}, {42, ACCEPT, -1}, },
			{{-1, REDUCE, 92}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 8}, {26, SHIFT, 1}, {36, SHIFT, 12}, },
			{{-1, ERROR, 9}, {4, SHIFT, 14}, },
			{{-1, ERROR, 10}, {5, SHIFT, 16}, {8, SHIFT, 17}, {19, SHIFT, 18}, {24, SHIFT, 19}, {25, SHIFT, 20}, {26, SHIFT, 21}, {29, SHIFT, 22}, {31, SHIFT, 23}, {35, SHIFT, 24}, {39, SHIFT, 25}, {40, SHIFT, 26}, {41, SHIFT, 27}, },
			{{-1, REDUCE, 0}, {26, SHIFT, 41}, {27, SHIFT, 42}, },
			{{-1, ERROR, 12}, {7, SHIFT, 10}, },
			{{-1, REDUCE, 93}, },
			{{-1, REDUCE, 77}, {37, SHIFT, 47}, {38, SHIFT, 48}, },
			{{-1, ERROR, 15}, {5, SHIFT, 16}, {9, SHIFT, 49}, {19, SHIFT, 18}, {24, SHIFT, 19}, {25, SHIFT, 20}, {39, SHIFT, 25}, {40, SHIFT, 26}, {41, SHIFT, 27}, },
			{{-1, ERROR, 16}, {5, SHIFT, 16}, {19, SHIFT, 18}, {24, SHIFT, 19}, {25, SHIFT, 20}, {39, SHIFT, 25}, {40, SHIFT, 26}, {41, SHIFT, 27}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 86}, },
			{{-1, REDUCE, 90}, },
			{{-1, REDUCE, 91}, },
			{{-1, ERROR, 21}, {39, SHIFT, 53}, },
			{{-1, ERROR, 22}, {5, SHIFT, 54}, {30, SHIFT, 55}, {33, SHIFT, 56}, },
			{{-1, ERROR, 23}, {5, SHIFT, 58}, },
			{{-1, ERROR, 24}, {5, SHIFT, 16}, {19, SHIFT, 18}, {24, SHIFT, 19}, {25, SHIFT, 20}, {39, SHIFT, 25}, {40, SHIFT, 26}, {41, SHIFT, 27}, },
			{{-1, REDUCE, 62}, {4, SHIFT, 61}, {5, SHIFT, 62}, {14, SHIFT, 63}, },
			{{-1, REDUCE, 89}, },
			{{-1, REDUCE, 88}, },
			{{-1, REDUCE, 102}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 30}, {8, SHIFT, 67}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 32}, {13, SHIFT, 68}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 55}, {0, SHIFT, 69}, {1, SHIFT, 70}, {2, SHIFT, 71}, {3, SHIFT, 72}, {15, SHIFT, 73}, {16, SHIFT, 74}, {17, SHIFT, 75}, {18, SHIFT, 76}, {20, SHIFT, 77}, {21, SHIFT, 78}, {22, SHIFT, 79}, {23, SHIFT, 80}, },
			{{-1, REDUCE, 67}, {14, SHIFT, 83}, },
			{{-1, ERROR, 37}, {24, SHIFT, 19}, {25, SHIFT, 20}, {39, SHIFT, 84}, {40, SHIFT, 26}, {41, SHIFT, 27}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 87}, },
			{{-1, ERROR, 40}, {5, SHIFT, 16}, {8, SHIFT, 87}, {19, SHIFT, 18}, {24, SHIFT, 19}, {25, SHIFT, 20}, {26, SHIFT, 21}, {29, SHIFT, 22}, {31, SHIFT, 23}, {35, SHIFT, 24}, {39, SHIFT, 25}, {40, SHIFT, 26}, {41, SHIFT, 27}, },
			{{-1, ERROR, 41}, {39, SHIFT, 90}, },
			{{-1, ERROR, 42}, {5, SHIFT, 91}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 94}, },
			{{-1, REDUCE, 2}, {26, SHIFT, 41}, {27, SHIFT, 42}, },
			{{-1, REDUCE, 1}, {26, SHIFT, 41}, {27, SHIFT, 42}, },
			{{-1, ERROR, 47}, {5, SHIFT, 96}, },
			{{-1, ERROR, 48}, {5, SHIFT, 97}, },
			{{-1, ERROR, 49}, {10, SHIFT, 98}, {24, SHIFT, 19}, {25, SHIFT, 20}, {39, SHIFT, 84}, {40, SHIFT, 26}, {41, SHIFT, 27}, },
			{{-1, ERROR, 50}, {13, SHIFT, 101}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 52}, {6, SHIFT, 102}, },
			{{-1, ERROR, 53}, {4, SHIFT, 61}, },
			{{-1, ERROR, 54}, {24, SHIFT, 19}, {25, SHIFT, 20}, {39, SHIFT, 84}, {40, SHIFT, 26}, {41, SHIFT, 27}, },
			{{-1, ERROR, 55}, {5, SHIFT, 58}, },
			{{-1, ERROR, 56}, {5, SHIFT, 105}, },
			{{-1, ERROR, 57}, {7, SHIFT, 10}, },
			{{-1, ERROR, 58}, {24, SHIFT, 19}, {25, SHIFT, 20}, {39, SHIFT, 84}, {40, SHIFT, 26}, {41, SHIFT, 27}, },
			{{-1, ERROR, 59}, {7, SHIFT, 10}, },
			{{-1, ERROR, 60}, {13, SHIFT, 109}, },
			{{-1, REDUCE, 77}, },
			{{-1, ERROR, 62}, {5, SHIFT, 16}, {6, SHIFT, 110}, {19, SHIFT, 18}, {24, SHIFT, 19}, {25, SHIFT, 20}, {39, SHIFT, 25}, {40, SHIFT, 26}, {41, SHIFT, 27}, },
			{{-1, ERROR, 63}, {39, SHIFT, 113}, },
			{{-1, REDUCE, 106}, {4, SHIFT, 61}, },
			{{-1, ERROR, 65}, {5, SHIFT, 16}, {19, SHIFT, 18}, {24, SHIFT, 19}, {25, SHIFT, 20}, {39, SHIFT, 25}, {40, SHIFT, 26}, {41, SHIFT, 27}, },
			{{-1, REDUCE, 63}, {14, SHIFT, 117}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 74}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 78}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 80}, },
			{{-1, REDUCE, 81}, },
			{{-1, REDUCE, 82}, },
			{{-1, REDUCE, 83}, },
			{{-1, REDUCE, 84}, },
			{{-1, REDUCE, 85}, },
			{{-1, ERROR, 81}, {5, SHIFT, 16}, {19, SHIFT, 18}, {24, SHIFT, 19}, {25, SHIFT, 20}, {39, SHIFT, 25}, {40, SHIFT, 26}, {41, SHIFT, 27}, },
			{{-1, ERROR, 82}, {5, SHIFT, 16}, {19, SHIFT, 18}, {24, SHIFT, 19}, {25, SHIFT, 20}, {39, SHIFT, 25}, {40, SHIFT, 26}, {41, SHIFT, 27}, },
			{{-1, ERROR, 83}, {39, SHIFT, 121}, },
			{{-1, REDUCE, 62}, {5, SHIFT, 62}, {14, SHIFT, 63}, },
			{{-1, REDUCE, 53}, },
			{{-1, ERROR, 86}, {15, SHIFT, 73}, {16, SHIFT, 74}, {17, SHIFT, 75}, {18, SHIFT, 76}, {20, SHIFT, 77}, {21, SHIFT, 78}, {22, SHIFT, 79}, {23, SHIFT, 80}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 103}, },
			{{-1, ERROR, 89}, {8, SHIFT, 123}, },
			{{-1, ERROR, 90}, {5, SHIFT, 124}, },
			{{-1, ERROR, 91}, {39, SHIFT, 125}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 95}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 3}, {26, SHIFT, 41}, {27, SHIFT, 42}, },
			{{-1, ERROR, 96}, {39, SHIFT, 127}, },
			{{-1, ERROR, 97}, {24, SHIFT, 19}, {25, SHIFT, 20}, {39, SHIFT, 84}, {40, SHIFT, 26}, {41, SHIFT, 27}, },
			{{-1, REDUCE, 21}, },
			{{-1, ERROR, 99}, {10, SHIFT, 129}, },
			{{-1, REDUCE, 23}, {12, SHIFT, 130}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 56}, {0, SHIFT, 69}, {1, SHIFT, 70}, {2, SHIFT, 71}, {3, SHIFT, 72}, {15, SHIFT, 73}, {16, SHIFT, 74}, {17, SHIFT, 75}, {18, SHIFT, 76}, {20, SHIFT, 77}, {21, SHIFT, 78}, {22, SHIFT, 79}, {23, SHIFT, 80}, },
			{{-1, ERROR, 103}, {6, SHIFT, 135}, },
			{{-1, ERROR, 104}, {7, SHIFT, 10}, },
			{{-1, ERROR, 105}, {39, SHIFT, 137}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 107}, {6, SHIFT, 138}, },
			{{-1, REDUCE, 36}, {32, SHIFT, 139}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 70}, },
			{{-1, ERROR, 111}, {6, SHIFT, 141}, },
			{{-1, REDUCE, 26}, {12, SHIFT, 142}, },
			{{-1, REDUCE, 72}, {5, SHIFT, 62}, },
			{{-1, REDUCE, 64}, },
			{{-1, ERROR, 115}, {5, SHIFT, 16}, {19, SHIFT, 18}, {24, SHIFT, 19}, {25, SHIFT, 20}, {39, SHIFT, 25}, {40, SHIFT, 26}, {41, SHIFT, 27}, },
			{{-1, REDUCE, 59}, },
			{{-1, ERROR, 117}, {39, SHIFT, 146}, },
			{{-1, REDUCE, 107}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 65}, {5, SHIFT, 147}, },
			{{-1, REDUCE, 106}, },
			{{-1, REDUCE, 46}, },
			{{-1, ERROR, 124}, {6, SHIFT, 149}, {39, SHIFT, 150}, },
			{{-1, ERROR, 125}, {6, SHIFT, 152}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 127}, {6, SHIFT, 153}, },
			{{-1, ERROR, 128}, {12, SHIFT, 154}, },
			{{-1, REDUCE, 22}, },
			{{-1, ERROR, 130}, {24, SHIFT, 19}, {25, SHIFT, 20}, {39, SHIFT, 84}, {40, SHIFT, 26}, {41, SHIFT, 27}, },
			{{-1, REDUCE, 96}, },
			{{-1, REDUCE, 24}, {12, SHIFT, 130}, },
			{{-1, ERROR, 133}, {5, SHIFT, 16}, {19, SHIFT, 18}, {24, SHIFT, 19}, {25, SHIFT, 20}, {39, SHIFT, 25}, {40, SHIFT, 26}, {41, SHIFT, 27}, },
			{{-1, ERROR, 134}, {5, SHIFT, 16}, {19, SHIFT, 18}, {24, SHIFT, 19}, {25, SHIFT, 20}, {39, SHIFT, 25}, {40, SHIFT, 26}, {41, SHIFT, 27}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 137}, {34, SHIFT, 159}, },
			{{-1, REDUCE, 41}, },
			{{-1, ERROR, 139}, {7, SHIFT, 10}, {31, SHIFT, 160}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 71}, },
			{{-1, ERROR, 142}, {5, SHIFT, 16}, {19, SHIFT, 18}, {24, SHIFT, 19}, {25, SHIFT, 20}, {39, SHIFT, 25}, {40, SHIFT, 26}, {41, SHIFT, 27}, },
			{{-1, REDUCE, 98}, },
			{{-1, REDUCE, 27}, {12, SHIFT, 142}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 72}, },
			{{-1, ERROR, 147}, {39, SHIFT, 164}, },
			{{-1, REDUCE, 66}, },
			{{-1, ERROR, 149}, {7, SHIFT, 10}, },
			{{-1, REDUCE, 30}, {12, SHIFT, 166}, },
			{{-1, ERROR, 151}, {6, SHIFT, 169}, },
			{{-1, ERROR, 152}, {7, SHIFT, 10}, },
			{{-1, ERROR, 153}, {7, SHIFT, 171}, },
			{{-1, ERROR, 154}, {24, SHIFT, 19}, {25, SHIFT, 20}, {39, SHIFT, 84}, {40, SHIFT, 26}, {41, SHIFT, 27}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 97}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 57}, },
			{{-1, ERROR, 159}, {39, SHIFT, 174}, },
			{{-1, ERROR, 160}, {5, SHIFT, 58}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 99}, },
			{{-1, ERROR, 164}, {6, SHIFT, 176}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 166}, {39, SHIFT, 177}, },
			{{-1, REDUCE, 100}, },
			{{-1, REDUCE, 31}, {12, SHIFT, 166}, },
			{{-1, ERROR, 169}, {7, SHIFT, 10}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 171}, {8, SHIFT, 180}, {26, SHIFT, 181}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 173}, {6, SHIFT, 186}, },
			{{-1, ERROR, 174}, {6, SHIFT, 187}, },
			{{-1, ERROR, 175}, {7, SHIFT, 10}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 101}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 47}, },
			{{-1, ERROR, 181}, {39, SHIFT, 189}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 104}, },
			{{-1, ERROR, 185}, {8, SHIFT, 190}, {26, SHIFT, 181}, },
			{{-1, ERROR, 186}, {13, SHIFT, 192}, },
			{{-1, ERROR, 187}, {7, SHIFT, 10}, },
			{{-1, REDUCE, 39}, {32, SHIFT, 139}, },
			{{-1, ERROR, 189}, {4, SHIFT, 61}, {5, SHIFT, 124}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 105}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 40}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 3}, },
			{{-1, 28}, {40, 88}, },
			{{-1, 4}, {8, 13}, },
			{{-1, 43}, {45, 92}, {46, 94}, {95, 126}, },
			{{-1, 5}, },
			{{-1, 6}, },
			{{-1, 44}, {45, 93}, {95, 93}, {171, 182}, {185, 182}, },
			{{-1, 7}, {10, 29}, {40, 29}, {171, 183}, {185, 183}, },
			{{-1, 50}, },
			{{-1, 99}, },
			{{-1, 131}, {132, 156}, },
			{{-1, 111}, },
			{{-1, 143}, {144, 163}, },
			{{-1, 30}, {40, 89}, },
			{{-1, 151}, },
			{{-1, 167}, {168, 178}, },
			{{-1, 31}, },
			{{-1, 140}, {188, 194}, },
			{{-1, 59}, {55, 104}, {160, 175}, },
			{{-1, 57}, },
			{{-1, 11}, {12, 46}, {57, 106}, {59, 108}, {104, 136}, {139, 161}, {149, 165}, {152, 170}, {169, 179}, {175, 188}, {187, 193}, },
			{{-1, 172}, },
			{{-1, 184}, {185, 191}, },
			{{-1, 32}, {15, 51}, {16, 52}, {24, 60}, {62, 112}, {65, 116}, {81, 119}, {82, 120}, {115, 145}, {133, 157}, {134, 158}, {142, 162}, },
			{{-1, 33}, },
			{{-1, 34}, {37, 85}, {58, 107}, },
			{{-1, 35}, {37, 86}, {49, 100}, {54, 103}, {58, 86}, {97, 128}, {130, 155}, {154, 173}, },
			{{-1, 148}, },
			{{-1, 36}, {63, 114}, },
			{{-1, 64}, {66, 118}, {84, 122}, },
			{{-1, 81}, {102, 133}, },
			{{-1, 15}, {25, 65}, {64, 115}, },
			{{-1, 82}, {102, 134}, },
			{{-1, 37}, },
			{{-1, 38}, },
			{{-1, 39}, },
			{{-1, 8}, },
			{{-1, 45}, {46, 95}, },
			{{-1, 132}, },
			{{-1, 144}, },
			{{-1, 168}, },
			{{-1, 40}, },
			{{-1, 185}, },
			{{-1, 66}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'new', 'program'",
			"expecting: identifier",
			"expecting: '{'",
			"expecting: EOF",
			"expecting: '='",
			"expecting: '(', '}', '!', 'true', 'false', 'new', 'repeat', 'if', 'return', identifier, string literal, number literal",
			"expecting: 'new', 'event', EOF",
			"expecting: '(', '[', '!', 'true', 'false', 'figure', 'grid', identifier, string literal, number literal",
			"expecting: '(', '[', '!', 'true', 'false', identifier, string literal, number literal",
			"expecting: '(', '!', 'true', 'false', identifier, string literal, number literal",
			"expecting: '(', '}', '!', 'true', 'false', 'new', 'event', 'repeat', 'if', 'else', 'return', identifier, string literal, number literal, EOF",
			"expecting: 'true', 'false', identifier, string literal, number literal",
			"expecting: '+', '-', '*', '/', ')', ']', ',', ';', '==', '!=', '<=', '>=', '&&', '||', '<', '>'",
			"expecting: '(', 'while', 'foreach'",
			"expecting: '('",
			"expecting: '+', '-', '*', '/', '=', '(', ')', ',', ';', '.', '==', '!=', '<=', '>=', '&&', '||', '<', '>'",
			"expecting: '}'",
			"expecting: ';'",
			"expecting: ')', ',', ';'",
			"expecting: '+', '-', '*', '/', ')', ',', ';', '==', '!=', '<=', '>=', '&&', '||', '<', '>'",
			"expecting: '+', '-', '*', '/', ')', ']', ',', ';', '.', '==', '!=', '<=', '>=', '&&', '||', '<', '>'",
			"expecting: ']', 'true', 'false', identifier, string literal, number literal",
			"expecting: ')'",
			"expecting: '(', ')', '!', 'true', 'false', identifier, string literal, number literal",
			"expecting: '+', '-', '*', '/', '=', ')', ',', ';', '.', '==', '!=', '<=', '>=', '&&', '||', '<', '>'",
			"expecting: '(', ')', ']', ',', '.', '==', '!=', '<=', '>=', '&&', '||', '<', '>'",
			"expecting: '==', '!=', '<=', '>=', '&&', '||', '<', '>'",
			"expecting: ']'",
			"expecting: ']', ','",
			"expecting: '(', '}', '!', 'true', 'false', 'new', 'repeat', 'if', 'return', 'program', identifier, string literal, number literal",
			"expecting: '(', '}', '!', 'true', 'false', 'new', 'repeat', 'if', 'else', 'return', identifier, string literal, number literal",
			"expecting: ')', ','",
			"expecting: '+', '-', '*', '/', '=', '(', ')', ']', ',', ';', '.', '==', '!=', '<=', '>=', '&&', '||', '<', '>'",
			"expecting: '+', '-', '*', '/', '(', ')', ']', ',', ';', '==', '!=', '<=', '>=', '&&', '||', '<', '>'",
			"expecting: ')', ']', ',', '.', '==', '!=', '<=', '>=', '&&', '||', '<', '>'",
			"expecting: ')', identifier",
			"expecting: ','",
			"expecting: 'in'",
			"expecting: '{', 'if'",
			"expecting: '}', 'new', 'event', EOF",
			"expecting: '}', 'new'",
			"expecting: '=', '('",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 0, 0, 0, 0, 0, 4, 5, 6, 2, 0, 7, 8, 9, 10, 11, 12, 12, 1, 13, 14, 9, 15, 12, 12, 5, 5, 16, 5, 17, 18, 18, 19, 20, 11, 12, 12, 5, 1, 14, 3, 6, 6, 6, 14, 14, 21, 17, 17, 22, 4, 11, 14, 14, 2, 11, 2, 17, 8, 23, 1, 24, 9, 20, 10, 5, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 25, 18, 26, 10, 5, 16, 14, 1, 3, 6, 3, 6, 1, 11, 17, 27, 28, 29, 19, 22, 2, 1, 5, 22, 30, 16, 20, 22, 31, 32, 12, 9, 18, 1, 20, 18, 18, 33, 34, 10, 35, 22, 3, 22, 36, 17, 11, 28, 28, 9, 9, 2, 5, 37, 2, 38, 5, 20, 9, 31, 31, 18, 20, 1, 12, 2, 31, 22, 2, 2, 11, 28, 28, 18, 18, 1, 14, 5, 31, 31, 22, 39, 1, 31, 31, 2, 3, 40, 0, 22, 22, 2, 12, 31, 31, 39, 0, 1, 40, 40, 40, 40, 17, 2, 30, 41, 0, 40, 0, 5, 5, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
