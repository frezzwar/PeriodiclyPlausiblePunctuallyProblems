/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.analysis;

import java.util.*;
import compiler.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPProgram().apply(this);
        outStart(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        {
            List<PDecls> copy = new ArrayList<PDecls>(node.getDecls());
            Collections.reverse(copy);
            for(PDecls e : copy)
            {
                e.apply(this);
            }
        }
        outAProgram(node);
    }

    public void inADecls(ADecls node)
    {
        defaultIn(node);
    }

    public void outADecls(ADecls node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecls(ADecls node)
    {
        inADecls(node);
        if(node.getCurlyR() != null)
        {
            node.getCurlyR().apply(this);
        }
        if(node.getReturnValue() != null)
        {
            node.getReturnValue().apply(this);
        }
        {
            List<PDecl> copy = new ArrayList<PDecl>(node.getDecl());
            Collections.reverse(copy);
            for(PDecl e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getCurlyL() != null)
        {
            node.getCurlyL().apply(this);
        }
        if(node.getParR() != null)
        {
            node.getParR().apply(this);
        }
        if(node.getParams() != null)
        {
            node.getParams().apply(this);
        }
        if(node.getParL() != null)
        {
            node.getParL().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outADecls(node);
    }

    public void inAVariableDeclarationDecl(AVariableDeclarationDecl node)
    {
        defaultIn(node);
    }

    public void outAVariableDeclarationDecl(AVariableDeclarationDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariableDeclarationDecl(AVariableDeclarationDecl node)
    {
        inAVariableDeclarationDecl(node);
        if(node.getVariableDeclaration() != null)
        {
            node.getVariableDeclaration().apply(this);
        }
        outAVariableDeclarationDecl(node);
    }

    public void inAFunctionDeclarationDecl(AFunctionDeclarationDecl node)
    {
        defaultIn(node);
    }

    public void outAFunctionDeclarationDecl(AFunctionDeclarationDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionDeclarationDecl(AFunctionDeclarationDecl node)
    {
        inAFunctionDeclarationDecl(node);
        if(node.getFunctionDeclaration() != null)
        {
            node.getFunctionDeclaration().apply(this);
        }
        outAFunctionDeclarationDecl(node);
    }

    public void inAControlStatementsDecl(AControlStatementsDecl node)
    {
        defaultIn(node);
    }

    public void outAControlStatementsDecl(AControlStatementsDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAControlStatementsDecl(AControlStatementsDecl node)
    {
        inAControlStatementsDecl(node);
        if(node.getControlStatments() != null)
        {
            node.getControlStatments().apply(this);
        }
        outAControlStatementsDecl(node);
    }

    public void inAAssignDecl(AAssignDecl node)
    {
        defaultIn(node);
    }

    public void outAAssignDecl(AAssignDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignDecl(AAssignDecl node)
    {
        inAAssignDecl(node);
        if(node.getSemiC() != null)
        {
            node.getSemiC().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAAssignDecl(node);
    }

    public void inAVariableDeclaration(AVariableDeclaration node)
    {
        defaultIn(node);
    }

    public void outAVariableDeclaration(AVariableDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariableDeclaration(AVariableDeclaration node)
    {
        inAVariableDeclaration(node);
        if(node.getSemiC() != null)
        {
            node.getSemiC().apply(this);
        }
        {
            List<PVariableTail> copy = new ArrayList<PVariableTail>(node.getVariableTail());
            Collections.reverse(copy);
            for(PVariableTail e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getVariableTypes() != null)
        {
            node.getVariableTypes().apply(this);
        }
        if(node.getEquals() != null)
        {
            node.getEquals().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getNew() != null)
        {
            node.getNew().apply(this);
        }
        outAVariableDeclaration(node);
    }

    public void inASingleVariableTypes(ASingleVariableTypes node)
    {
        defaultIn(node);
    }

    public void outASingleVariableTypes(ASingleVariableTypes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleVariableTypes(ASingleVariableTypes node)
    {
        inASingleVariableTypes(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outASingleVariableTypes(node);
    }

    public void inAListVariableTypes(AListVariableTypes node)
    {
        defaultIn(node);
    }

    public void outAListVariableTypes(AListVariableTypes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListVariableTypes(AListVariableTypes node)
    {
        inAListVariableTypes(node);
        if(node.getBrackR() != null)
        {
            node.getBrackR().apply(this);
        }
        {
            List<PListVarTail> copy = new ArrayList<PListVarTail>(node.getListVarTail());
            Collections.reverse(copy);
            for(PListVarTail e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getBrackL() != null)
        {
            node.getBrackL().apply(this);
        }
        outAListVariableTypes(node);
    }

    public void inAVariableTail(AVariableTail node)
    {
        defaultIn(node);
    }

    public void outAVariableTail(AVariableTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariableTail(AVariableTail node)
    {
        inAVariableTail(node);
        if(node.getVariableTypes() != null)
        {
            node.getVariableTypes().apply(this);
        }
        if(node.getEquals() != null)
        {
            node.getEquals().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getNew() != null)
        {
            node.getNew().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAVariableTail(node);
    }

    public void inAListVarTail(AListVarTail node)
    {
        defaultIn(node);
    }

    public void outAListVarTail(AListVarTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListVarTail(AListVarTail node)
    {
        inAListVarTail(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAListVarTail(node);
    }

    public void inACallParams(ACallParams node)
    {
        defaultIn(node);
    }

    public void outACallParams(ACallParams node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACallParams(ACallParams node)
    {
        inACallParams(node);
        {
            List<PCallParamsTail> copy = new ArrayList<PCallParamsTail>(node.getCallParamsTail());
            Collections.reverse(copy);
            for(PCallParamsTail e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outACallParams(node);
    }

    public void inACallParamsTail(ACallParamsTail node)
    {
        defaultIn(node);
    }

    public void outACallParamsTail(ACallParamsTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACallParamsTail(ACallParamsTail node)
    {
        inACallParamsTail(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outACallParamsTail(node);
    }

    public void inAFunctionDeclaration(AFunctionDeclaration node)
    {
        defaultIn(node);
    }

    public void outAFunctionDeclaration(AFunctionDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionDeclaration(AFunctionDeclaration node)
    {
        inAFunctionDeclaration(node);
        if(node.getDecls() != null)
        {
            node.getDecls().apply(this);
        }
        if(node.getNew() != null)
        {
            node.getNew().apply(this);
        }
        outAFunctionDeclaration(node);
    }

    public void inAReturnValue(AReturnValue node)
    {
        defaultIn(node);
    }

    public void outAReturnValue(AReturnValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnValue(AReturnValue node)
    {
        inAReturnValue(node);
        if(node.getSemiC() != null)
        {
            node.getSemiC().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        outAReturnValue(node);
    }

    public void inAParams(AParams node)
    {
        defaultIn(node);
    }

    public void outAParams(AParams node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParams(AParams node)
    {
        inAParams(node);
        {
            List<PParamsTail> copy = new ArrayList<PParamsTail>(node.getParamsTail());
            Collections.reverse(copy);
            for(PParamsTail e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAParams(node);
    }

    public void inAParamsTail(AParamsTail node)
    {
        defaultIn(node);
    }

    public void outAParamsTail(AParamsTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParamsTail(AParamsTail node)
    {
        inAParamsTail(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAParamsTail(node);
    }

    public void inAWhileControlStatments(AWhileControlStatments node)
    {
        defaultIn(node);
    }

    public void outAWhileControlStatments(AWhileControlStatments node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileControlStatments(AWhileControlStatments node)
    {
        inAWhileControlStatments(node);
        if(node.getBody() != null)
        {
            node.getBody().apply(this);
        }
        if(node.getParR() != null)
        {
            node.getParR().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getParL() != null)
        {
            node.getParL().apply(this);
        }
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        if(node.getRepeat() != null)
        {
            node.getRepeat().apply(this);
        }
        outAWhileControlStatments(node);
    }

    public void inARepeatControlStatments(ARepeatControlStatments node)
    {
        defaultIn(node);
    }

    public void outARepeatControlStatments(ARepeatControlStatments node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARepeatControlStatments(ARepeatControlStatments node)
    {
        inARepeatControlStatments(node);
        if(node.getBody() != null)
        {
            node.getBody().apply(this);
        }
        if(node.getParR() != null)
        {
            node.getParR().apply(this);
        }
        if(node.getRightParam() != null)
        {
            node.getRightParam().apply(this);
        }
        if(node.getLeftParam() != null)
        {
            node.getLeftParam().apply(this);
        }
        if(node.getParL() != null)
        {
            node.getParL().apply(this);
        }
        if(node.getRepeat() != null)
        {
            node.getRepeat().apply(this);
        }
        outARepeatControlStatments(node);
    }

    public void inAForeachControlStatments(AForeachControlStatments node)
    {
        defaultIn(node);
    }

    public void outAForeachControlStatments(AForeachControlStatments node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForeachControlStatments(AForeachControlStatments node)
    {
        inAForeachControlStatments(node);
        if(node.getBody() != null)
        {
            node.getBody().apply(this);
        }
        if(node.getParR() != null)
        {
            node.getParR().apply(this);
        }
        if(node.getVarname() != null)
        {
            node.getVarname().apply(this);
        }
        if(node.getIn() != null)
        {
            node.getIn().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getParL() != null)
        {
            node.getParL().apply(this);
        }
        if(node.getForeach() != null)
        {
            node.getForeach().apply(this);
        }
        if(node.getRepeat() != null)
        {
            node.getRepeat().apply(this);
        }
        outAForeachControlStatments(node);
    }

    public void inAIfstructureControlStatments(AIfstructureControlStatments node)
    {
        defaultIn(node);
    }

    public void outAIfstructureControlStatments(AIfstructureControlStatments node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfstructureControlStatments(AIfstructureControlStatments node)
    {
        inAIfstructureControlStatments(node);
        if(node.getElsestructure() != null)
        {
            node.getElsestructure().apply(this);
        }
        if(node.getBody() != null)
        {
            node.getBody().apply(this);
        }
        if(node.getParR() != null)
        {
            node.getParR().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getParL() != null)
        {
            node.getParL().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outAIfstructureControlStatments(node);
    }

    public void inAElseElsestructure(AElseElsestructure node)
    {
        defaultIn(node);
    }

    public void outAElseElsestructure(AElseElsestructure node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElseElsestructure(AElseElsestructure node)
    {
        inAElseElsestructure(node);
        if(node.getBody() != null)
        {
            node.getBody().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        outAElseElsestructure(node);
    }

    public void inAIfelseElsestructure(AIfelseElsestructure node)
    {
        defaultIn(node);
    }

    public void outAIfelseElsestructure(AIfelseElsestructure node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfelseElsestructure(AIfelseElsestructure node)
    {
        inAIfelseElsestructure(node);
        if(node.getElsestructure() != null)
        {
            node.getElsestructure().apply(this);
        }
        if(node.getBody() != null)
        {
            node.getBody().apply(this);
        }
        if(node.getParR() != null)
        {
            node.getParR().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getParL() != null)
        {
            node.getParL().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        outAIfelseElsestructure(node);
    }

    public void inAAssignLeftParam(AAssignLeftParam node)
    {
        defaultIn(node);
    }

    public void outAAssignLeftParam(AAssignLeftParam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignLeftParam(AAssignLeftParam node)
    {
        inAAssignLeftParam(node);
        if(node.getOpadd() != null)
        {
            node.getOpadd().apply(this);
        }
        outAAssignLeftParam(node);
    }

    public void inAVariableLeftParam(AVariableLeftParam node)
    {
        defaultIn(node);
    }

    public void outAVariableLeftParam(AVariableLeftParam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariableLeftParam(AVariableLeftParam node)
    {
        inAVariableLeftParam(node);
        if(node.getOpadd() != null)
        {
            node.getOpadd().apply(this);
        }
        if(node.getEquals() != null)
        {
            node.getEquals().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getNew() != null)
        {
            node.getNew().apply(this);
        }
        outAVariableLeftParam(node);
    }

    public void inARightParam(ARightParam node)
    {
        defaultIn(node);
    }

    public void outARightParam(ARightParam node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARightParam(ARightParam node)
    {
        inARightParam(node);
        if(node.getOpadd() != null)
        {
            node.getOpadd().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outARightParam(node);
    }

    public void inABody(ABody node)
    {
        defaultIn(node);
    }

    public void outABody(ABody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABody(ABody node)
    {
        inABody(node);
        if(node.getCurlyR() != null)
        {
            node.getCurlyR().apply(this);
        }
        {
            List<PDecl> copy = new ArrayList<PDecl>(node.getDecl());
            Collections.reverse(copy);
            for(PDecl e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getCurlyL() != null)
        {
            node.getCurlyL().apply(this);
        }
        outABody(node);
    }

    public void inAEqualsExpr(AEqualsExpr node)
    {
        defaultIn(node);
    }

    public void outAEqualsExpr(AEqualsExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqualsExpr(AEqualsExpr node)
    {
        inAEqualsExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getEquals() != null)
        {
            node.getEquals().apply(this);
        }
        if(node.getOpor() != null)
        {
            node.getOpor().apply(this);
        }
        outAEqualsExpr(node);
    }

    public void inAIncrementExpr(AIncrementExpr node)
    {
        defaultIn(node);
    }

    public void outAIncrementExpr(AIncrementExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIncrementExpr(AIncrementExpr node)
    {
        inAIncrementExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getIncrement() != null)
        {
            node.getIncrement().apply(this);
        }
        if(node.getOpor() != null)
        {
            node.getOpor().apply(this);
        }
        outAIncrementExpr(node);
    }

    public void inADecrementExpr(ADecrementExpr node)
    {
        defaultIn(node);
    }

    public void outADecrementExpr(ADecrementExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecrementExpr(ADecrementExpr node)
    {
        inADecrementExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getDecrement() != null)
        {
            node.getDecrement().apply(this);
        }
        if(node.getOpor() != null)
        {
            node.getOpor().apply(this);
        }
        outADecrementExpr(node);
    }

    public void inAOrExpr(AOrExpr node)
    {
        defaultIn(node);
    }

    public void outAOrExpr(AOrExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrExpr(AOrExpr node)
    {
        inAOrExpr(node);
        if(node.getOpor() != null)
        {
            node.getOpor().apply(this);
        }
        outAOrExpr(node);
    }

    public void inAOrOpor(AOrOpor node)
    {
        defaultIn(node);
    }

    public void outAOrOpor(AOrOpor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrOpor(AOrOpor node)
    {
        inAOrOpor(node);
        if(node.getOpand() != null)
        {
            node.getOpand().apply(this);
        }
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        if(node.getOpor() != null)
        {
            node.getOpor().apply(this);
        }
        outAOrOpor(node);
    }

    public void inAAndOpor(AAndOpor node)
    {
        defaultIn(node);
    }

    public void outAAndOpor(AAndOpor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndOpor(AAndOpor node)
    {
        inAAndOpor(node);
        if(node.getOpand() != null)
        {
            node.getOpand().apply(this);
        }
        outAAndOpor(node);
    }

    public void inAAndOpand(AAndOpand node)
    {
        defaultIn(node);
    }

    public void outAAndOpand(AAndOpand node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndOpand(AAndOpand node)
    {
        inAAndOpand(node);
        if(node.getOpequate() != null)
        {
            node.getOpequate().apply(this);
        }
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        if(node.getOpand() != null)
        {
            node.getOpand().apply(this);
        }
        outAAndOpand(node);
    }

    public void inAEquateOpand(AEquateOpand node)
    {
        defaultIn(node);
    }

    public void outAEquateOpand(AEquateOpand node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEquateOpand(AEquateOpand node)
    {
        inAEquateOpand(node);
        if(node.getOpequate() != null)
        {
            node.getOpequate().apply(this);
        }
        outAEquateOpand(node);
    }

    public void inAEqualOpequate(AEqualOpequate node)
    {
        defaultIn(node);
    }

    public void outAEqualOpequate(AEqualOpequate node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqualOpequate(AEqualOpequate node)
    {
        inAEqualOpequate(node);
        if(node.getOpcompare() != null)
        {
            node.getOpcompare().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getOpequate() != null)
        {
            node.getOpequate().apply(this);
        }
        outAEqualOpequate(node);
    }

    public void inANegateOpequate(ANegateOpequate node)
    {
        defaultIn(node);
    }

    public void outANegateOpequate(ANegateOpequate node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegateOpequate(ANegateOpequate node)
    {
        inANegateOpequate(node);
        if(node.getOpcompare() != null)
        {
            node.getOpcompare().apply(this);
        }
        if(node.getNegate() != null)
        {
            node.getNegate().apply(this);
        }
        if(node.getOpequate() != null)
        {
            node.getOpequate().apply(this);
        }
        outANegateOpequate(node);
    }

    public void inACompareOpequate(ACompareOpequate node)
    {
        defaultIn(node);
    }

    public void outACompareOpequate(ACompareOpequate node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACompareOpequate(ACompareOpequate node)
    {
        inACompareOpequate(node);
        if(node.getOpcompare() != null)
        {
            node.getOpcompare().apply(this);
        }
        outACompareOpequate(node);
    }

    public void inALessOpcompare(ALessOpcompare node)
    {
        defaultIn(node);
    }

    public void outALessOpcompare(ALessOpcompare node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessOpcompare(ALessOpcompare node)
    {
        inALessOpcompare(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getLess() != null)
        {
            node.getLess().apply(this);
        }
        if(node.getOpcompare() != null)
        {
            node.getOpcompare().apply(this);
        }
        outALessOpcompare(node);
    }

    public void inAGreaterOpcompare(AGreaterOpcompare node)
    {
        defaultIn(node);
    }

    public void outAGreaterOpcompare(AGreaterOpcompare node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterOpcompare(AGreaterOpcompare node)
    {
        inAGreaterOpcompare(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getGreater() != null)
        {
            node.getGreater().apply(this);
        }
        if(node.getOpcompare() != null)
        {
            node.getOpcompare().apply(this);
        }
        outAGreaterOpcompare(node);
    }

    public void inALessEqualOpcompare(ALessEqualOpcompare node)
    {
        defaultIn(node);
    }

    public void outALessEqualOpcompare(ALessEqualOpcompare node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessEqualOpcompare(ALessEqualOpcompare node)
    {
        inALessEqualOpcompare(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getLessEqual() != null)
        {
            node.getLessEqual().apply(this);
        }
        if(node.getOpcompare() != null)
        {
            node.getOpcompare().apply(this);
        }
        outALessEqualOpcompare(node);
    }

    public void inAGreaterEqualOpcompare(AGreaterEqualOpcompare node)
    {
        defaultIn(node);
    }

    public void outAGreaterEqualOpcompare(AGreaterEqualOpcompare node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterEqualOpcompare(AGreaterEqualOpcompare node)
    {
        inAGreaterEqualOpcompare(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getGreaterEqual() != null)
        {
            node.getGreaterEqual().apply(this);
        }
        if(node.getOpcompare() != null)
        {
            node.getOpcompare().apply(this);
        }
        outAGreaterEqualOpcompare(node);
    }

    public void inAAddOpcompare(AAddOpcompare node)
    {
        defaultIn(node);
    }

    public void outAAddOpcompare(AAddOpcompare node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddOpcompare(AAddOpcompare node)
    {
        inAAddOpcompare(node);
        if(node.getOpadd() != null)
        {
            node.getOpadd().apply(this);
        }
        outAAddOpcompare(node);
    }

    public void inAPlusOpadd(APlusOpadd node)
    {
        defaultIn(node);
    }

    public void outAPlusOpadd(APlusOpadd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusOpadd(APlusOpadd node)
    {
        inAPlusOpadd(node);
        if(node.getOpmult() != null)
        {
            node.getOpmult().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getOpadd() != null)
        {
            node.getOpadd().apply(this);
        }
        outAPlusOpadd(node);
    }

    public void inAMinusOpadd(AMinusOpadd node)
    {
        defaultIn(node);
    }

    public void outAMinusOpadd(AMinusOpadd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusOpadd(AMinusOpadd node)
    {
        inAMinusOpadd(node);
        if(node.getOpmult() != null)
        {
            node.getOpmult().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getOpadd() != null)
        {
            node.getOpadd().apply(this);
        }
        outAMinusOpadd(node);
    }

    public void inAMultOpadd(AMultOpadd node)
    {
        defaultIn(node);
    }

    public void outAMultOpadd(AMultOpadd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultOpadd(AMultOpadd node)
    {
        inAMultOpadd(node);
        if(node.getOpmult() != null)
        {
            node.getOpmult().apply(this);
        }
        outAMultOpadd(node);
    }

    public void inAMultOpmult(AMultOpmult node)
    {
        defaultIn(node);
    }

    public void outAMultOpmult(AMultOpmult node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultOpmult(AMultOpmult node)
    {
        inAMultOpmult(node);
        if(node.getOpunary() != null)
        {
            node.getOpunary().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getOpmult() != null)
        {
            node.getOpmult().apply(this);
        }
        outAMultOpmult(node);
    }

    public void inADivOpmult(ADivOpmult node)
    {
        defaultIn(node);
    }

    public void outADivOpmult(ADivOpmult node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivOpmult(ADivOpmult node)
    {
        inADivOpmult(node);
        if(node.getOpunary() != null)
        {
            node.getOpunary().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getOpmult() != null)
        {
            node.getOpmult().apply(this);
        }
        outADivOpmult(node);
    }

    public void inAUnaryOpmult(AUnaryOpmult node)
    {
        defaultIn(node);
    }

    public void outAUnaryOpmult(AUnaryOpmult node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnaryOpmult(AUnaryOpmult node)
    {
        inAUnaryOpmult(node);
        if(node.getOpunary() != null)
        {
            node.getOpunary().apply(this);
        }
        outAUnaryOpmult(node);
    }

    public void inAMinusvalueOpunary(AMinusvalueOpunary node)
    {
        defaultIn(node);
    }

    public void outAMinusvalueOpunary(AMinusvalueOpunary node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusvalueOpunary(AMinusvalueOpunary node)
    {
        inAMinusvalueOpunary(node);
        if(node.getOpunary() != null)
        {
            node.getOpunary().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAMinusvalueOpunary(node);
    }

    public void inAValueOpunary(AValueOpunary node)
    {
        defaultIn(node);
    }

    public void outAValueOpunary(AValueOpunary node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValueOpunary(AValueOpunary node)
    {
        inAValueOpunary(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        outAValueOpunary(node);
    }

    public void inAVarnameValue(AVarnameValue node)
    {
        defaultIn(node);
    }

    public void outAVarnameValue(AVarnameValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarnameValue(AVarnameValue node)
    {
        inAVarnameValue(node);
        if(node.getFunctionCall() != null)
        {
            node.getFunctionCall().apply(this);
        }
        if(node.getVarname() != null)
        {
            node.getVarname().apply(this);
        }
        outAVarnameValue(node);
    }

    public void inALiteralValue(ALiteralValue node)
    {
        defaultIn(node);
    }

    public void outALiteralValue(ALiteralValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALiteralValue(ALiteralValue node)
    {
        inALiteralValue(node);
        if(node.getLiteral() != null)
        {
            node.getLiteral().apply(this);
        }
        outALiteralValue(node);
    }

    public void inARndValue(ARndValue node)
    {
        defaultIn(node);
    }

    public void outARndValue(ARndValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARndValue(ARndValue node)
    {
        inARndValue(node);
        if(node.getRnd() != null)
        {
            node.getRnd().apply(this);
        }
        outARndValue(node);
    }

    public void inAFunctionCall(AFunctionCall node)
    {
        defaultIn(node);
    }

    public void outAFunctionCall(AFunctionCall node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunctionCall(AFunctionCall node)
    {
        inAFunctionCall(node);
        if(node.getBody() != null)
        {
            node.getBody().apply(this);
        }
        if(node.getParR() != null)
        {
            node.getParR().apply(this);
        }
        if(node.getCallParams() != null)
        {
            node.getCallParams().apply(this);
        }
        if(node.getParL() != null)
        {
            node.getParL().apply(this);
        }
        outAFunctionCall(node);
    }

    public void inAVarname(AVarname node)
    {
        defaultIn(node);
    }

    public void outAVarname(AVarname node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarname(AVarname node)
    {
        inAVarname(node);
        {
            List<PIdlist> copy = new ArrayList<PIdlist>(node.getIdlist());
            Collections.reverse(copy);
            for(PIdlist e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAVarname(node);
    }

    public void inAIdlist(AIdlist node)
    {
        defaultIn(node);
    }

    public void outAIdlist(AIdlist node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdlist(AIdlist node)
    {
        inAIdlist(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        outAIdlist(node);
    }

    public void inALessEqualCompareToken(ALessEqualCompareToken node)
    {
        defaultIn(node);
    }

    public void outALessEqualCompareToken(ALessEqualCompareToken node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessEqualCompareToken(ALessEqualCompareToken node)
    {
        inALessEqualCompareToken(node);
        if(node.getLessEqual() != null)
        {
            node.getLessEqual().apply(this);
        }
        outALessEqualCompareToken(node);
    }

    public void inALessCompareToken(ALessCompareToken node)
    {
        defaultIn(node);
    }

    public void outALessCompareToken(ALessCompareToken node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessCompareToken(ALessCompareToken node)
    {
        inALessCompareToken(node);
        if(node.getLess() != null)
        {
            node.getLess().apply(this);
        }
        outALessCompareToken(node);
    }

    public void inAGreaterEqualCompareToken(AGreaterEqualCompareToken node)
    {
        defaultIn(node);
    }

    public void outAGreaterEqualCompareToken(AGreaterEqualCompareToken node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterEqualCompareToken(AGreaterEqualCompareToken node)
    {
        inAGreaterEqualCompareToken(node);
        if(node.getGreaterEqual() != null)
        {
            node.getGreaterEqual().apply(this);
        }
        outAGreaterEqualCompareToken(node);
    }

    public void inAGreaterCompareToken(AGreaterCompareToken node)
    {
        defaultIn(node);
    }

    public void outAGreaterCompareToken(AGreaterCompareToken node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterCompareToken(AGreaterCompareToken node)
    {
        inAGreaterCompareToken(node);
        if(node.getGreater() != null)
        {
            node.getGreater().apply(this);
        }
        outAGreaterCompareToken(node);
    }

    public void inAMinusOperator(AMinusOperator node)
    {
        defaultIn(node);
    }

    public void outAMinusOperator(AMinusOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusOperator(AMinusOperator node)
    {
        inAMinusOperator(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAMinusOperator(node);
    }

    public void inAPlusOperator(APlusOperator node)
    {
        defaultIn(node);
    }

    public void outAPlusOperator(APlusOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusOperator(APlusOperator node)
    {
        inAPlusOperator(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAPlusOperator(node);
    }

    public void inAMultOperator(AMultOperator node)
    {
        defaultIn(node);
    }

    public void outAMultOperator(AMultOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultOperator(AMultOperator node)
    {
        inAMultOperator(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        outAMultOperator(node);
    }

    public void inADivOperator(ADivOperator node)
    {
        defaultIn(node);
    }

    public void outADivOperator(ADivOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivOperator(ADivOperator node)
    {
        inADivOperator(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        outADivOperator(node);
    }

    public void inAEqualBoolOperator(AEqualBoolOperator node)
    {
        defaultIn(node);
    }

    public void outAEqualBoolOperator(AEqualBoolOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqualBoolOperator(AEqualBoolOperator node)
    {
        inAEqualBoolOperator(node);
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        outAEqualBoolOperator(node);
    }

    public void inALessEqualBoolOperator(ALessEqualBoolOperator node)
    {
        defaultIn(node);
    }

    public void outALessEqualBoolOperator(ALessEqualBoolOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessEqualBoolOperator(ALessEqualBoolOperator node)
    {
        inALessEqualBoolOperator(node);
        if(node.getLessEqual() != null)
        {
            node.getLessEqual().apply(this);
        }
        outALessEqualBoolOperator(node);
    }

    public void inAGreaterEqualBoolOperator(AGreaterEqualBoolOperator node)
    {
        defaultIn(node);
    }

    public void outAGreaterEqualBoolOperator(AGreaterEqualBoolOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterEqualBoolOperator(AGreaterEqualBoolOperator node)
    {
        inAGreaterEqualBoolOperator(node);
        if(node.getGreaterEqual() != null)
        {
            node.getGreaterEqual().apply(this);
        }
        outAGreaterEqualBoolOperator(node);
    }

    public void inANegateBoolOperator(ANegateBoolOperator node)
    {
        defaultIn(node);
    }

    public void outANegateBoolOperator(ANegateBoolOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegateBoolOperator(ANegateBoolOperator node)
    {
        inANegateBoolOperator(node);
        if(node.getNegate() != null)
        {
            node.getNegate().apply(this);
        }
        outANegateBoolOperator(node);
    }

    public void inAAndBoolOperator(AAndBoolOperator node)
    {
        defaultIn(node);
    }

    public void outAAndBoolOperator(AAndBoolOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndBoolOperator(AAndBoolOperator node)
    {
        inAAndBoolOperator(node);
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        outAAndBoolOperator(node);
    }

    public void inAOrBoolOperator(AOrBoolOperator node)
    {
        defaultIn(node);
    }

    public void outAOrBoolOperator(AOrBoolOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrBoolOperator(AOrBoolOperator node)
    {
        inAOrBoolOperator(node);
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        outAOrBoolOperator(node);
    }

    public void inALessBoolOperator(ALessBoolOperator node)
    {
        defaultIn(node);
    }

    public void outALessBoolOperator(ALessBoolOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessBoolOperator(ALessBoolOperator node)
    {
        inALessBoolOperator(node);
        if(node.getLess() != null)
        {
            node.getLess().apply(this);
        }
        outALessBoolOperator(node);
    }

    public void inAGreaterBoolOperator(AGreaterBoolOperator node)
    {
        defaultIn(node);
    }

    public void outAGreaterBoolOperator(AGreaterBoolOperator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterBoolOperator(AGreaterBoolOperator node)
    {
        inAGreaterBoolOperator(node);
        if(node.getGreater() != null)
        {
            node.getGreater().apply(this);
        }
        outAGreaterBoolOperator(node);
    }

    public void inARnd(ARnd node)
    {
        defaultIn(node);
    }

    public void outARnd(ARnd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARnd(ARnd node)
    {
        inARnd(node);
        if(node.getParR() != null)
        {
            node.getParR().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getTo() != null)
        {
            node.getTo().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getParL() != null)
        {
            node.getParL().apply(this);
        }
        if(node.getRandom() != null)
        {
            node.getRandom().apply(this);
        }
        outARnd(node);
    }

    public void inABooleanLiteralLiteral(ABooleanLiteralLiteral node)
    {
        defaultIn(node);
    }

    public void outABooleanLiteralLiteral(ABooleanLiteralLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABooleanLiteralLiteral(ABooleanLiteralLiteral node)
    {
        inABooleanLiteralLiteral(node);
        if(node.getBooleanLiteral() != null)
        {
            node.getBooleanLiteral().apply(this);
        }
        outABooleanLiteralLiteral(node);
    }

    public void inAIntegerLiteralLiteral(AIntegerLiteralLiteral node)
    {
        defaultIn(node);
    }

    public void outAIntegerLiteralLiteral(AIntegerLiteralLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntegerLiteralLiteral(AIntegerLiteralLiteral node)
    {
        inAIntegerLiteralLiteral(node);
        if(node.getIntegerLiteral() != null)
        {
            node.getIntegerLiteral().apply(this);
        }
        outAIntegerLiteralLiteral(node);
    }

    public void inADoubleLiteralLiteral(ADoubleLiteralLiteral node)
    {
        defaultIn(node);
    }

    public void outADoubleLiteralLiteral(ADoubleLiteralLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADoubleLiteralLiteral(ADoubleLiteralLiteral node)
    {
        inADoubleLiteralLiteral(node);
        if(node.getDoubleLiteral() != null)
        {
            node.getDoubleLiteral().apply(this);
        }
        outADoubleLiteralLiteral(node);
    }

    public void inAStringLiteralLiteral(AStringLiteralLiteral node)
    {
        defaultIn(node);
    }

    public void outAStringLiteralLiteral(AStringLiteralLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringLiteralLiteral(AStringLiteralLiteral node)
    {
        inAStringLiteralLiteral(node);
        if(node.getStringLiteral() != null)
        {
            node.getStringLiteral().apply(this);
        }
        outAStringLiteralLiteral(node);
    }

    public void inATrueBooleanLiteral(ATrueBooleanLiteral node)
    {
        defaultIn(node);
    }

    public void outATrueBooleanLiteral(ATrueBooleanLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrueBooleanLiteral(ATrueBooleanLiteral node)
    {
        inATrueBooleanLiteral(node);
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        outATrueBooleanLiteral(node);
    }

    public void inAFalseBooleanLiteral(AFalseBooleanLiteral node)
    {
        defaultIn(node);
    }

    public void outAFalseBooleanLiteral(AFalseBooleanLiteral node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalseBooleanLiteral(AFalseBooleanLiteral node)
    {
        inAFalseBooleanLiteral(node);
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAFalseBooleanLiteral(node);
    }
}
