/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.node;

import compiler.analysis.*;

@SuppressWarnings("nls")
public final class AVarAssignExpr extends PAssignExpr
{
    private TIdentifier _identifier_;
    private PMember _member_;
    private PAssignOperator _assignOperator_;
    private PExpr _expr_;

    public AVarAssignExpr()
    {
        // Constructor
    }

    public AVarAssignExpr(
        @SuppressWarnings("hiding") TIdentifier _identifier_,
        @SuppressWarnings("hiding") PMember _member_,
        @SuppressWarnings("hiding") PAssignOperator _assignOperator_,
        @SuppressWarnings("hiding") PExpr _expr_)
    {
        // Constructor
        setIdentifier(_identifier_);

        setMember(_member_);

        setAssignOperator(_assignOperator_);

        setExpr(_expr_);

    }

    @Override
    public Object clone()
    {
        return new AVarAssignExpr(
            cloneNode(this._identifier_),
            cloneNode(this._member_),
            cloneNode(this._assignOperator_),
            cloneNode(this._expr_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAVarAssignExpr(this);
    }

    public TIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    public PMember getMember()
    {
        return this._member_;
    }

    public void setMember(PMember node)
    {
        if(this._member_ != null)
        {
            this._member_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._member_ = node;
    }

    public PAssignOperator getAssignOperator()
    {
        return this._assignOperator_;
    }

    public void setAssignOperator(PAssignOperator node)
    {
        if(this._assignOperator_ != null)
        {
            this._assignOperator_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._assignOperator_ = node;
    }

    public PExpr getExpr()
    {
        return this._expr_;
    }

    public void setExpr(PExpr node)
    {
        if(this._expr_ != null)
        {
            this._expr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expr_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._identifier_)
            + toString(this._member_)
            + toString(this._assignOperator_)
            + toString(this._expr_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        if(this._member_ == child)
        {
            this._member_ = null;
            return;
        }

        if(this._assignOperator_ == child)
        {
            this._assignOperator_ = null;
            return;
        }

        if(this._expr_ == child)
        {
            this._expr_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(this._member_ == oldChild)
        {
            setMember((PMember) newChild);
            return;
        }

        if(this._assignOperator_ == oldChild)
        {
            setAssignOperator((PAssignOperator) newChild);
            return;
        }

        if(this._expr_ == oldChild)
        {
            setExpr((PExpr) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
