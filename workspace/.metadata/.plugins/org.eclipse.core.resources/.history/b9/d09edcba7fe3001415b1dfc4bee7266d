/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.node;

import java.util.*;
import compiler.analysis.*;

@SuppressWarnings("nls")
public final class AVariableDeclaration extends PVariableDeclaration
{
    private TNew _new_;
    private TIdentifier _identifier_;
    private TAssign _assign_;
    private PVariableTypes _variableTypes_;
    private final LinkedList<PVariableTail> _variableTail_ = new LinkedList<PVariableTail>();
    private TSemiC _semiC_;

    public AVariableDeclaration()
    {
        // Constructor
    }

    public AVariableDeclaration(
        @SuppressWarnings("hiding") TNew _new_,
        @SuppressWarnings("hiding") TIdentifier _identifier_,
        @SuppressWarnings("hiding") TAssign _assign_,
        @SuppressWarnings("hiding") PVariableTypes _variableTypes_,
        @SuppressWarnings("hiding") List<?> _variableTail_,
        @SuppressWarnings("hiding") TSemiC _semiC_)
    {
        // Constructor
        setNew(_new_);

        setIdentifier(_identifier_);

        setAssign(_assign_);

        setVariableTypes(_variableTypes_);

        setVariableTail(_variableTail_);

        setSemiC(_semiC_);

    }

    @Override
    public Object clone()
    {
        return new AVariableDeclaration(
            cloneNode(this._new_),
            cloneNode(this._identifier_),
            cloneNode(this._assign_),
            cloneNode(this._variableTypes_),
            cloneList(this._variableTail_),
            cloneNode(this._semiC_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAVariableDeclaration(this);
    }

    public TNew getNew()
    {
        return this._new_;
    }

    public void setNew(TNew node)
    {
        if(this._new_ != null)
        {
            this._new_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._new_ = node;
    }

    public TIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(TIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    public TAssign getAssign()
    {
        return this._assign_;
    }

    public void setAssign(TAssign node)
    {
        if(this._assign_ != null)
        {
            this._assign_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._assign_ = node;
    }

    public PVariableTypes getVariableTypes()
    {
        return this._variableTypes_;
    }

    public void setVariableTypes(PVariableTypes node)
    {
        if(this._variableTypes_ != null)
        {
            this._variableTypes_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._variableTypes_ = node;
    }

    public LinkedList<PVariableTail> getVariableTail()
    {
        return this._variableTail_;
    }

    public void setVariableTail(List<?> list)
    {
        for(PVariableTail e : this._variableTail_)
        {
            e.parent(null);
        }
        this._variableTail_.clear();

        for(Object obj_e : list)
        {
            PVariableTail e = (PVariableTail) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._variableTail_.add(e);
        }
    }

    public TSemiC getSemiC()
    {
        return this._semiC_;
    }

    public void setSemiC(TSemiC node)
    {
        if(this._semiC_ != null)
        {
            this._semiC_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._semiC_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._new_)
            + toString(this._identifier_)
            + toString(this._assign_)
            + toString(this._variableTypes_)
            + toString(this._variableTail_)
            + toString(this._semiC_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._new_ == child)
        {
            this._new_ = null;
            return;
        }

        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        if(this._assign_ == child)
        {
            this._assign_ = null;
            return;
        }

        if(this._variableTypes_ == child)
        {
            this._variableTypes_ = null;
            return;
        }

        if(this._variableTail_.remove(child))
        {
            return;
        }

        if(this._semiC_ == child)
        {
            this._semiC_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._new_ == oldChild)
        {
            setNew((TNew) newChild);
            return;
        }

        if(this._identifier_ == oldChild)
        {
            setIdentifier((TIdentifier) newChild);
            return;
        }

        if(this._assign_ == oldChild)
        {
            setAssign((TAssign) newChild);
            return;
        }

        if(this._variableTypes_ == oldChild)
        {
            setVariableTypes((PVariableTypes) newChild);
            return;
        }

        for(ListIterator<PVariableTail> i = this._variableTail_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PVariableTail) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._semiC_ == oldChild)
        {
            setSemiC((TSemiC) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
