/* This file was generated by SableCC (http://www.sablecc.org/). */

package simpleAdder.node;

import simpleAdder.analysis.*;

@SuppressWarnings("nls")
public final class ARepeatwhileRepeatstructure extends PRepeatstructure
{
    private TWhile _while_;
    private TParL _parL_;
    private PExpr _expr_;
    private TParR _parR_;
    private TCurlyL _curlyL_;
    private PDecls _decls_;
    private TCurlyR _curlyR_;

    public ARepeatwhileRepeatstructure()
    {
        // Constructor
    }

    public ARepeatwhileRepeatstructure(
        @SuppressWarnings("hiding") TWhile _while_,
        @SuppressWarnings("hiding") TParL _parL_,
        @SuppressWarnings("hiding") PExpr _expr_,
        @SuppressWarnings("hiding") TParR _parR_,
        @SuppressWarnings("hiding") TCurlyL _curlyL_,
        @SuppressWarnings("hiding") PDecls _decls_,
        @SuppressWarnings("hiding") TCurlyR _curlyR_)
    {
        // Constructor
        setWhile(_while_);

        setParL(_parL_);

        setExpr(_expr_);

        setParR(_parR_);

        setCurlyL(_curlyL_);

        setDecls(_decls_);

        setCurlyR(_curlyR_);

    }

    @Override
    public Object clone()
    {
        return new ARepeatwhileRepeatstructure(
            cloneNode(this._while_),
            cloneNode(this._parL_),
            cloneNode(this._expr_),
            cloneNode(this._parR_),
            cloneNode(this._curlyL_),
            cloneNode(this._decls_),
            cloneNode(this._curlyR_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseARepeatwhileRepeatstructure(this);
    }

    public TWhile getWhile()
    {
        return this._while_;
    }

    public void setWhile(TWhile node)
    {
        if(this._while_ != null)
        {
            this._while_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._while_ = node;
    }

    public TParL getParL()
    {
        return this._parL_;
    }

    public void setParL(TParL node)
    {
        if(this._parL_ != null)
        {
            this._parL_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parL_ = node;
    }

    public PExpr getExpr()
    {
        return this._expr_;
    }

    public void setExpr(PExpr node)
    {
        if(this._expr_ != null)
        {
            this._expr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expr_ = node;
    }

    public TParR getParR()
    {
        return this._parR_;
    }

    public void setParR(TParR node)
    {
        if(this._parR_ != null)
        {
            this._parR_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parR_ = node;
    }

    public TCurlyL getCurlyL()
    {
        return this._curlyL_;
    }

    public void setCurlyL(TCurlyL node)
    {
        if(this._curlyL_ != null)
        {
            this._curlyL_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._curlyL_ = node;
    }

    public PDecls getDecls()
    {
        return this._decls_;
    }

    public void setDecls(PDecls node)
    {
        if(this._decls_ != null)
        {
            this._decls_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._decls_ = node;
    }

    public TCurlyR getCurlyR()
    {
        return this._curlyR_;
    }

    public void setCurlyR(TCurlyR node)
    {
        if(this._curlyR_ != null)
        {
            this._curlyR_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._curlyR_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._while_)
            + toString(this._parL_)
            + toString(this._expr_)
            + toString(this._parR_)
            + toString(this._curlyL_)
            + toString(this._decls_)
            + toString(this._curlyR_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._while_ == child)
        {
            this._while_ = null;
            return;
        }

        if(this._parL_ == child)
        {
            this._parL_ = null;
            return;
        }

        if(this._expr_ == child)
        {
            this._expr_ = null;
            return;
        }

        if(this._parR_ == child)
        {
            this._parR_ = null;
            return;
        }

        if(this._curlyL_ == child)
        {
            this._curlyL_ = null;
            return;
        }

        if(this._decls_ == child)
        {
            this._decls_ = null;
            return;
        }

        if(this._curlyR_ == child)
        {
            this._curlyR_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._while_ == oldChild)
        {
            setWhile((TWhile) newChild);
            return;
        }

        if(this._parL_ == oldChild)
        {
            setParL((TParL) newChild);
            return;
        }

        if(this._expr_ == oldChild)
        {
            setExpr((PExpr) newChild);
            return;
        }

        if(this._parR_ == oldChild)
        {
            setParR((TParR) newChild);
            return;
        }

        if(this._curlyL_ == oldChild)
        {
            setCurlyL((TCurlyL) newChild);
            return;
        }

        if(this._decls_ == oldChild)
        {
            setDecls((PDecls) newChild);
            return;
        }

        if(this._curlyR_ == oldChild)
        {
            setCurlyR((TCurlyR) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
