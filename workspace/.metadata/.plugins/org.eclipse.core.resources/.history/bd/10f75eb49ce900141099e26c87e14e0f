/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.node;

import java.util.*;
import compiler.analysis.*;

@SuppressWarnings("nls")
public final class AListVariables extends PVariables
{
    private TBrackL _brackL_;
    private PValue _value_;
    private final LinkedList<PListVarTail> _listVarTail_ = new LinkedList<PListVarTail>();
    private TBrackR _brackR_;

    public AListVariables()
    {
        // Constructor
    }

    public AListVariables(
        @SuppressWarnings("hiding") TBrackL _brackL_,
        @SuppressWarnings("hiding") PValue _value_,
        @SuppressWarnings("hiding") List<?> _listVarTail_,
        @SuppressWarnings("hiding") TBrackR _brackR_)
    {
        // Constructor
        setBrackL(_brackL_);

        setValue(_value_);

        setListVarTail(_listVarTail_);

        setBrackR(_brackR_);

    }

    @Override
    public Object clone()
    {
        return new AListVariables(
            cloneNode(this._brackL_),
            cloneNode(this._value_),
            cloneList(this._listVarTail_),
            cloneNode(this._brackR_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAListVariables(this);
    }

    public TBrackL getBrackL()
    {
        return this._brackL_;
    }

    public void setBrackL(TBrackL node)
    {
        if(this._brackL_ != null)
        {
            this._brackL_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._brackL_ = node;
    }

    public PValue getValue()
    {
        return this._value_;
    }

    public void setValue(PValue node)
    {
        if(this._value_ != null)
        {
            this._value_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._value_ = node;
    }

    public LinkedList<PListVarTail> getListVarTail()
    {
        return this._listVarTail_;
    }

    public void setListVarTail(List<?> list)
    {
        for(PListVarTail e : this._listVarTail_)
        {
            e.parent(null);
        }
        this._listVarTail_.clear();

        for(Object obj_e : list)
        {
            PListVarTail e = (PListVarTail) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._listVarTail_.add(e);
        }
    }

    public TBrackR getBrackR()
    {
        return this._brackR_;
    }

    public void setBrackR(TBrackR node)
    {
        if(this._brackR_ != null)
        {
            this._brackR_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._brackR_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._brackL_)
            + toString(this._value_)
            + toString(this._listVarTail_)
            + toString(this._brackR_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._brackL_ == child)
        {
            this._brackL_ = null;
            return;
        }

        if(this._value_ == child)
        {
            this._value_ = null;
            return;
        }

        if(this._listVarTail_.remove(child))
        {
            return;
        }

        if(this._brackR_ == child)
        {
            this._brackR_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._brackL_ == oldChild)
        {
            setBrackL((TBrackL) newChild);
            return;
        }

        if(this._value_ == oldChild)
        {
            setValue((PValue) newChild);
            return;
        }

        for(ListIterator<PListVarTail> i = this._listVarTail_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PListVarTail) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._brackR_ == oldChild)
        {
            setBrackR((TBrackR) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
