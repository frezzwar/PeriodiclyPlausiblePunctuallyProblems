/* This file was generated by SableCC (http://www.sablecc.org/). */

package simpleAdder.node;

import simpleAdder.analysis.*;

@SuppressWarnings("nls")
public final class ASwitchcase extends PSwitchcase
{
    private TCase _case_;
    private TParL _parL_;
    private PExpr _left_;
    private TTo _to_;
    private PExpr _right_;
    private TParR _parR_;
    private TCurlyL _curlyL_;
    private PDecls _decls_;
    private TCurlyR _curlyR_;
    private PSwitchcase _switchcase_;

    public ASwitchcase()
    {
        // Constructor
    }

    public ASwitchcase(
        @SuppressWarnings("hiding") TCase _case_,
        @SuppressWarnings("hiding") TParL _parL_,
        @SuppressWarnings("hiding") PExpr _left_,
        @SuppressWarnings("hiding") TTo _to_,
        @SuppressWarnings("hiding") PExpr _right_,
        @SuppressWarnings("hiding") TParR _parR_,
        @SuppressWarnings("hiding") TCurlyL _curlyL_,
        @SuppressWarnings("hiding") PDecls _decls_,
        @SuppressWarnings("hiding") TCurlyR _curlyR_,
        @SuppressWarnings("hiding") PSwitchcase _switchcase_)
    {
        // Constructor
        setCase(_case_);

        setParL(_parL_);

        setLeft(_left_);

        setTo(_to_);

        setRight(_right_);

        setParR(_parR_);

        setCurlyL(_curlyL_);

        setDecls(_decls_);

        setCurlyR(_curlyR_);

        setSwitchcase(_switchcase_);

    }

    @Override
    public Object clone()
    {
        return new ASwitchcase(
            cloneNode(this._case_),
            cloneNode(this._parL_),
            cloneNode(this._left_),
            cloneNode(this._to_),
            cloneNode(this._right_),
            cloneNode(this._parR_),
            cloneNode(this._curlyL_),
            cloneNode(this._decls_),
            cloneNode(this._curlyR_),
            cloneNode(this._switchcase_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASwitchcase(this);
    }

    public TCase getCase()
    {
        return this._case_;
    }

    public void setCase(TCase node)
    {
        if(this._case_ != null)
        {
            this._case_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._case_ = node;
    }

    public TParL getParL()
    {
        return this._parL_;
    }

    public void setParL(TParL node)
    {
        if(this._parL_ != null)
        {
            this._parL_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parL_ = node;
    }

    public PExpr getLeft()
    {
        return this._left_;
    }

    public void setLeft(PExpr node)
    {
        if(this._left_ != null)
        {
            this._left_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._left_ = node;
    }

    public TTo getTo()
    {
        return this._to_;
    }

    public void setTo(TTo node)
    {
        if(this._to_ != null)
        {
            this._to_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._to_ = node;
    }

    public PExpr getRight()
    {
        return this._right_;
    }

    public void setRight(PExpr node)
    {
        if(this._right_ != null)
        {
            this._right_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._right_ = node;
    }

    public TParR getParR()
    {
        return this._parR_;
    }

    public void setParR(TParR node)
    {
        if(this._parR_ != null)
        {
            this._parR_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parR_ = node;
    }

    public TCurlyL getCurlyL()
    {
        return this._curlyL_;
    }

    public void setCurlyL(TCurlyL node)
    {
        if(this._curlyL_ != null)
        {
            this._curlyL_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._curlyL_ = node;
    }

    public PDecls getDecls()
    {
        return this._decls_;
    }

    public void setDecls(PDecls node)
    {
        if(this._decls_ != null)
        {
            this._decls_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._decls_ = node;
    }

    public TCurlyR getCurlyR()
    {
        return this._curlyR_;
    }

    public void setCurlyR(TCurlyR node)
    {
        if(this._curlyR_ != null)
        {
            this._curlyR_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._curlyR_ = node;
    }

    public PSwitchcase getSwitchcase()
    {
        return this._switchcase_;
    }

    public void setSwitchcase(PSwitchcase node)
    {
        if(this._switchcase_ != null)
        {
            this._switchcase_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._switchcase_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._case_)
            + toString(this._parL_)
            + toString(this._left_)
            + toString(this._to_)
            + toString(this._right_)
            + toString(this._parR_)
            + toString(this._curlyL_)
            + toString(this._decls_)
            + toString(this._curlyR_)
            + toString(this._switchcase_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._case_ == child)
        {
            this._case_ = null;
            return;
        }

        if(this._parL_ == child)
        {
            this._parL_ = null;
            return;
        }

        if(this._left_ == child)
        {
            this._left_ = null;
            return;
        }

        if(this._to_ == child)
        {
            this._to_ = null;
            return;
        }

        if(this._right_ == child)
        {
            this._right_ = null;
            return;
        }

        if(this._parR_ == child)
        {
            this._parR_ = null;
            return;
        }

        if(this._curlyL_ == child)
        {
            this._curlyL_ = null;
            return;
        }

        if(this._decls_ == child)
        {
            this._decls_ = null;
            return;
        }

        if(this._curlyR_ == child)
        {
            this._curlyR_ = null;
            return;
        }

        if(this._switchcase_ == child)
        {
            this._switchcase_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._case_ == oldChild)
        {
            setCase((TCase) newChild);
            return;
        }

        if(this._parL_ == oldChild)
        {
            setParL((TParL) newChild);
            return;
        }

        if(this._left_ == oldChild)
        {
            setLeft((PExpr) newChild);
            return;
        }

        if(this._to_ == oldChild)
        {
            setTo((TTo) newChild);
            return;
        }

        if(this._right_ == oldChild)
        {
            setRight((PExpr) newChild);
            return;
        }

        if(this._parR_ == oldChild)
        {
            setParR((TParR) newChild);
            return;
        }

        if(this._curlyL_ == oldChild)
        {
            setCurlyL((TCurlyL) newChild);
            return;
        }

        if(this._decls_ == oldChild)
        {
            setDecls((PDecls) newChild);
            return;
        }

        if(this._curlyR_ == oldChild)
        {
            setCurlyR((TCurlyR) newChild);
            return;
        }

        if(this._switchcase_ == oldChild)
        {
            setSwitchcase((PSwitchcase) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
