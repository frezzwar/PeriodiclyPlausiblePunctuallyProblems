package P4.grammar;

/*******************************************************************
 * Helpers                                                         *
 *******************************************************************/
Helpers

digit 				= ['0' .. '9'];
nonzero_digit		= ['1' .. '9'];
lowercase			= ['a' .. 'z'];
uppercase			= ['A' .. 'Z'];
tab					= 9;
lf					= 10;
cr 					= 13;	

/*******************************************************************
 * Tokens                                                          *
 *******************************************************************/
Tokens

underscore 			= '_';
plus 				= '+';
minus 				= '-';
mult 				= '*';
div 				= '/';
equals 				= '=';
par_l 				= '(';
par_r 				= ')';
brace_l 			= '{';
brace_r 			= '}';
bracket_l			= '['
bracket_r			= ']'
quote				= '"';
comma				= ','
dot					= '.'
colon				= ':'
repeat				= 'repeat';
new					= 'new';
while				= 'while';
if					= 'if';
create				= 'create';
semi_c				= ';';
x					= 'x';
y					= 'y';
fig 				= 'fig';
size				= 'size';
percentage			= '%';
blank				= (' ' | tab | lf | cr)*;
foreach				= 'foreach';
in					= 'in';
startup				= 'startup';
click				= 'click';
keypress			= 'keypress';
testevent			= 'testevent';
touch				= 'touch';
edge				= 'edge';
add					= 'add';
dist				= 'dist';
random				= 'random'
set 				= 'set';
change				= 'change';
turnleft			= 'turnleft';
turnright			= 'turnright';
walk				= 'walk';
turnto				= 'turnto';
slide				= 'slide';
wait				= 'wait';
waituntil			= 'waituntil';
say					= 'say';
think				= 'think';
hide				= 'hide';
show				= 'show';
size				= 'size';
layer				= 'layer';
ask					= 'ask';
deg					= 'deg';
steps				= 'steps';
sec					= 'sec';

equal				= '=='            
and             	= '&&'
or              	= '||'
negate          	= '!='
greater_than   		= '<'
less_than      	 	= '>'
greater_equal  	 	= '<='
less_equal    	  	= '>=';

letter				= lowercase | uppercase;
string				= '"' (letter | digit)+ '"';
intliteral      	= 0 | non-zero-digit digit+;
floatliteral    	= digit* dot digit+;
boolean_literal 	= 'true' | 'false';

inputkey        	= letter 
                	| digit
                	| 'up'
                	| 'down'
                	| 'left'
					| 'right'
					| 'space';
                 
id              	= letter*;

/*******************************************************************
 * ignored Tokens                                                  *
 *******************************************************************/
ignored Tokens
blank;

/*******************************************************************
 * Productions                                                     *
 *******************************************************************/

/*http://sablecc.sourceforge.net/grammars/j102.sablecc.html*/

prog            	= val;

val             = id
                | intliteral 
                | floatliteral
                | boolean_literal
                | rnd
                | string;