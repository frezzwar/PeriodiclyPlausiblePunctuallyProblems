"Name"    = 'Texty Scratch' 
"Version" = '2015'
"Author"  = 'Oliver Købsted, Stefan Møller, Jacob Nielsen, Simon Pedersen, Lasse Petersen, Kenneth Stick'
"About"   = 'Text programming for Scratch'



"Case Sensitive"    = False
"Start Symbol"      = <Prog>
                    
{Id Head}        = {Letter} + [_]
{Id Tail}        = {Id Head} + {Digit}
{String Ch}      = {Printable} - ["]
                 
INTLITERAL       = {Digit}+
FLOATLITERAL     = {Digit}*'.'{Digit}+
                 
StringLiteral  = '"'( {String Ch} | '\'{Printable} )* '"'
CharLiteral     = [abc]

Id               = {Id Head}{Id Tail}*
               

<Prog>          ::= <Lines>
        
<Lines>         ::= <Line> <Lines> 
                  | 
              
<Line>          ::= <Stmt> 
                  | <Dcl> 
                  | <Print> 
                  | <ControlStructure> 
                  | <Event>
             
<EventLines>    ::=  <EventLine> <EventLines> 
                    |
                    
<EventLine>     ::= <Stmt> 
                  | <Dcl> 
                  | <Print> 
                  | <ControlStructure> 
                  | <Action> 
                  | <Event>
              
<Val>           ::= Id
                  | INTLITERAL 
                  | FLOATLITERAL
                  | bool
                  | <rnd>
                  | STRINGLITERAL
              
<Print>         ::= write '(' <PrintStmt> ')'

<PrintStmt>     ::= <Val> <PrintStmt>
                  |
              
<Dcl>           ::= new Id '=' <Val> <Expr>
                  | new Id '=' <List>
                 
<List>          ::= '[' <Listvariables> ']'
                 
<Listvariables> ::= <Val> ',' <Listvariables> 
                  | <Val>
                  |  

<Stmt>              ::= Id <typeofAssign>
                 
<ControlStructure>  ::= <RepeatStructure> 
                      | <IfStructure>
                 
<RepeatStructure>   ::= repeat <RepeatFor>
                      | repeat <RepeatWhileStructure>
                      | repeat <RepeatForEach>


<RepeatFor>             ::= '(' Id ')' '{' <Lines> '}'
                          | '(' INTLITERAL ')' '{' <Lines> '}'
                          
                      
<RepeatForEach>         ::= foreach '(' Id in Id ')' '{' <Lines> '}'  !first id is new variable, second id has to be a list

<RepeatWhileStructure>  ::= while '(' <BooleanExpr> ')' '{' <Lines> '}'
                         
<IfStructure>           ::= if '(' <BooleanExpr> ')' '{' <Lines> '}' 
                          | if '(' <BooleanExpr> ')' '{' <Lines> '}' else <Ifstructure>
                          | if '(' <BooleanExpr> ')' '{' <Lines> '}' else '{' <Lines> '}'


<Event>                 ::= startup '(' fig':' Id ')' '{' <EventLines> '}' 
                          | keyPress  '(' fig':' Id',' key':' CharLiteral ')' '{' <EventLines> '}'  !This only accepts a, b and c. You can't use the arrows. This is bad.
                          | click '(' fig':' Id ')' '{' <EventLines> '}' 

<Action>                ::= set '(' x':' <Val> ')'
                          | set '(' y':' <Val> ')'
                          | set '(' x':' <Val>',' y':' <Val> ')'
                          | change '(' x':' <Val> ')'
                          | change '(' y':' <Val> ')'
                          | change '(' x':' <Val>',' y':' <Val> ')'
                          | turnLeft '(' deg':' <Val> ')'
                          | turnright '(' deg':' <Val> ')'
                          | walk '(' steps':' <Val> ')'
                          | turnto '(' fig':' Id ')'
                          | slide '(' sec':' <Val>',' x':' <Val>',' y':' <Val> ')'
                          | wait '(' sec':' <Val> ')'
                          | waitUntil '(' <BooleanExpr> ')'



<typeofAssign>          ::= <IncrAssign> 
                          | <NormAssign>
                          
<IncrAssign>            ::= <Operator> '=' <Val> <Expr> 
           
<NormAssign>            ::= '=' <Val> <Expr>

<Expr>                  ::= <Operator> <Val> <Expr> 
                          |
                          
<BooleanExpr>           ::= <Val> <BoolOperators> <Val>
                          | <Val>

<Operator>              ::= '+'
                          | '-'
                          | '*'
                          | '/'
                          
<BoolOperators>         ::= '=='
                          | and
                          | or
                          | not
                          
<rnd>                   ::= random '(' <Val> to <Val> ')' !Det her må kun være tal. Det skal fixes et andet sted :)

!<Walk>                  ::= walk '(' fig: Id ',' <Val> ')'
