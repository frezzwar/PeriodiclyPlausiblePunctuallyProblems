"Case Sensitive"    = False
"Start Symbol"      = <Prog>
                    
{Id Head}        = {Letter} + [_]
{Id Tail}        = {Id Head} + {Digit}
{String Ch}      = {Printable} - ["]
  
INTLITERAL       = {Digit}+
FLOATLITERAL     = {Digit}*'.'{Digit}+
StringLiteral    = '"'( {String Ch} | '\'{Printable} )* '"'
!CharLiteral      = {Letter}
InputKey         = '\'{Printable}
                 | 'up'
                 | 'down'
                 | 'left'
                 | 'right'
                 | 'space'
                 

Id               = {Id Head}{Id Tail}*
                 


<Prog>          ::= <Dcls> <EventDecls>
      
<EventDecls>    ::= <EventDecl> <EventDecls>
                 |

<EventDecl>     ::= <Event> !<Lines>
  
<Lines>         ::= <Line> <Lines> 
                  | 
              
<Line>          ::= <Stmt> 
                  | <Dcl>  
                  | <ControlStructure> 
                  | <Action>
             
!<EventLines>    ::=  <EventLine> <EventLines> 
!                  |
                    
!<EventLine>     ::= <Stmt> 
!                  | <Dcl> 
!                  | <ControlStructure> 
!                  | <Action> 
              
<Val>           ::= Id
                  | INTLITERAL 
                  | FLOATLITERAL
                  | bool
                  | <rnd>
                  | STRINGLITERAL

<PrintStmt>     ::= <Val> '+' <PrintStmt>
                  |  <Val>
                  |
                  
<Dcls>          ::= <Dcl> <Dcls>
                 |
              
<Dcl>           ::= 'new' Id '=' <Val> <Expr>';'
                  | 'new' List '=' <List>';'
                  | 'new' Id '=' 'create' '(' STRINGLITERAL ',' 'x:' <Val> ',' 'y:' <Val> ',' 'size:' <Val> '%' ')' ';' !STRINGLITERAL er navnet på filen hvori billedet til figuren er.
                  | 'new' Id '=' 'create' '(' STRINGLITERAL ',' 'x:' <Val> ',' 'y:' <Val> ')' ';'

<List>          ::= '[' <Listvariables> ']'
                 
<Listvariables> ::= <Val> ',' <Listvariables> 
                  | <Val>
                  |  

                 
<ControlStructure>  ::= 'repeat' <RepeatStructure> 
                      | <IfStructure>
                 
<RepeatStructure>   ::=  <RepeatFor>
                      |  <RepeatWhile>
                      |  <RepeatForEach>

<RepeatFor>             ::=  '(' Id ')' '{' <Lines> '}'
                          |  '(' INTLITERAL ')' '{' <Lines> '}'
                          

<RepeatWhile>  ::= 'while' '(' <BooleanExpr> ')' '{' <Lines> '}'
                      
<RepeatForEach>         ::= 'foreach' '(' Id 'in' List ')' '{' <Lines> '}'  !first id is new variable, second id has to be a list
                         
<IfStructure>           ::= 'if' '(' <BooleanExpr> ')' '{' <Lines> '}'                           
                         | 'if' '(' <BooleanExpr> ')' '{' <Lines> '}' 'else' '{' <Lines> '}'
                         | 'if' '(' <BooleanExpr> ')' '{' <Lines> '}' 'else' <Ifstructure>                          


<Event>                 ::= 'startup' '(' 'fig:' Id ')' '{' <Lines> '}' 
                          | 'keyPress'  '(' 'fig:' Id',' 'key:' InputKey ')' '{' <Lines> '}' 
                          | 'click' '(' 'fig:' Id ')' '{' <Lines> '}' 
                          | 'testevent' '{' <Lines> '}'

<Action>                ::= 'set' '(' 'x:' <Val> ')' ';'
                          | 'set' '(' 'y:' <Val> ')' ';'
                          | 'set' '(' 'x:' <Val>',' 'y:' <Val> ')' ';'
                          | 'change' '(' 'x:' <Val> ')' ';'
                          | 'change' '(' 'y:' <Val> ')' ';'
                          | 'change' '(' 'x:' <Val>',' 'y:' <Val> ')' ';'
                          | 'turnLeft' '(' 'deg:' <Val> ')' ';'
                          | 'turnright' '(' 'deg:' <Val> ')' ';'
                          | 'walk' '(' 'steps:' <Val> ')' ';'
                          | 'turnto' '(' 'fig:' Id ')' ';'
                          | 'turnto' '(' 'deg:' <Val> ')' ';'
                          | 'slide' '(' 'sec:' <Val>',' 'x:' <Val>',' 'y:' <Val> ')' ';'
                          | 'wait' '(' 'sec:' <Val> ')' ';'
                          | 'waitUntil' '(' <BooleanExpr> ')' ';'
                          | 'say' '(' <PrintStmt> ')' ';'
                          | 'think' '(' <PrintStmt> ')' ';'
                          | 'say' '(' <PrintStmt>',' 'sec:' <Val> ')' ';'
                          | 'think' '(' <PrintStmt> ',' 'sec:' <Val> ')' ';'
                          | 'hide' ';'
                          | 'show' ';'
                          | 'size' '(' <Val>'%' ')' ';'
                          | 'layer' '(' <Val> ')' ';'
                          | 'ask' '(' <PrintStmt> ')' ';'
                          
<Condition>             ::= 'touch' '(' 'fig:' Id ')'
                          | 'touch' '(' 'edge' ')'

<Stmt>                  ::= Id <typeofAssign>';'
                         | List '.' 'add' '(' <Val> ')' ';'
                     
<typeofAssign>          ::= <IncrAssign> 
                          | <NormAssign>
                          
<IncrAssign>            ::= <Operator> '=' <Val> <Expr> 
           
<NormAssign>            ::= '=' <Val> <Expr>

<Expr>                  ::= <Operator> <Val> <Expr> 
!                          | 'dist' '(' 'fig:' <Val> ')' <Expr>
                          |
                          
<BooleanExpr>           ::= <Val> <BoolOperators> <Val>
                          | <Condition>
                          | <Val> <BoolOperators> <Val> <BoolOperators> <BooleanExpr> 

<Operator>              ::= '+'
                          | '-'
                          | '*'
                          | '/'
                          
<BoolOperators>         ::= '=='            
                         | '&&'
                         | '||'
                         | '!='
                         | '<'
                         | '>'
                         | '<='
                         | '>='
                          
<rnd>                   ::= 'random' '(' <Val> 'to' <Val> ')' !Det her må kun være tal. 
